<#
.SYNOPSIS
    TORK - Otimizador de Sistema para Windows
    Versão 4.0 - Produção

.DESCRIPTION
    Ferramenta abrangente de manutenção e otimização do sistema Windows.
    Inclui funcionalidades para limpeza, otimização de desempenho, diagnóstico,
    gerenciamento de perfis e agendamento de tarefas.

.NOTES
    Nome: TORK-Otimizador.ps1
    Autor: Equipe TORK
    Versão: 4.0
    Data de Criação: 28/04/2024
    Codificação: UTF-8 com BOM
    Requisitos: Windows 10/11, PowerShell 5.1 ou superior, Privilégios de Administrador
#>

#Requires -Version 5.1
#Requires -RunAsAdministrator

# --- Configuração Inicial ---
[CmdletBinding()]
param (
    [switch]$SilentMode,
    [switch]$LimpezaRapida,
    [switch]$LimpezaCompleta,
    [switch]$OtimizacaoRapida,
    [switch]$OtimizacaoCompleta,
    [switch]$RestaurarPadrao,
    [switch]$TestarFuncionalidades,
    [switch]$AjudaComandos,
    [string]$PerfilConfiguracao,
    [switch]$AtualizarScript,
    [switch]$VerificarAtualizacoes,
    [switch]$DiagnosticoRapido,
    [switch]$DiagnosticoCompleto,
    [switch]$CriarAgendamento,
    [switch]$ModoDesempenhoMaximo,
    [switch]$ModoEquilibrado,
    [switch]$ModoEconomiaEnergia,
    [switch]$ModoGamer
)

# --- Definições Globais ---
$script:VersaoAtual = "4.0"
$script:DataVersao = "28/04/2024"
$script:RepositorioGitHub = "https://github.com/tork-optimizer/tork"
$script:ArquivoConfiguracao = "$env:USERPROFILE\Documents\TORK\config.json"
$script:DiretorioBase = "$env:USERPROFILE\Documents\TORK"
$script:DiretorioBackup = "$DiretorioBase\Backup"
$script:DiretorioLog = "$DiretorioBase\Logs"
$script:DiretorioPerfis = "$DiretorioBase\Perfis"
$script:DiretorioRelatorios = "$DiretorioBase\Relatorios"
$script:ArquivoLog = "$DiretorioLog\TORK_Log_$(Get-Date -Format 'yyyyMMdd').txt"
$script:ArquivoHistorico = "$DiretorioLog\TORK_Historico.csv"
$script:ArquivoUltimaExecucao = "$DiretorioLog\TORK_UltimaExecucao.json"

# --- Definição de Cores ---
$script:CorTitulo = "Cyan"
$script:CorDestaque = "Yellow"
$script:CorSucesso = "Green"
$script:CorAviso = "Yellow"
$script:CorErro = "Red"
$script:CorInfo = "White"
$script:CorComando = "DarkGray"
$script:CorSecundaria = "Gray"
$script:CorBorda = "DarkCyan"
$script:CorLogo = "Green"
$script:CorVersao = "Yellow"
$script:CorCopyright = "Gray"

# --- Definição de Preferências de Erro ---
$ErrorActionPreference = 'SilentlyContinue'
$ProgressPreference = 'Continue'

# --- Configurações Padrão ---
$script:ConfiguracoesPadrao = @{
    Geral = @{
        CriarPontoRestauracao = $true
        ModoSilencioso = $false
        LogAtivado = $true
        TemaAtual = "Padrao"  # Padrao, Escuro, Claro, Colorido
        ConfirmarAcoes = $true
        MostrarTempoExecucao = $true
        NivelDetalhes = "Normal"  # Minimo, Normal, Detalhado
        FecharAutomaticamente = $false
        TempoEspera = 2  # segundos
        BackupConfiguracoes = $true
        IdiomaAtual = "pt-BR"
        ModoTeste = $false
        VerificarAtualizacoesAutomaticamente = $true
        IntervaloVerificacaoAtualizacoes = 7 # dias
        ExibirDicasInicio = $true
    }
    Perfil = @{
        PerfilAtivo = "Padrao"  # Padrao, Desempenho, Equilibrado, Economia, Gamer, Personalizado
        PerfisSalvos = @()
        UltimoPerfilUsado = "Padrao"
    }
    Avancadas = @{
        OtimizacaoAgressiva = $false
        DesativarServicosNaoEssenciais = $false
        ModificarRegistroAvancado = $false
        PermitirReinicializacaoAutomatica = $false
        MonitorarDesempenho = $true
        NotificarMudancas = $true
        PermitirAtualizacaoAutomatica = $true
        VerificarCompatibilidade = $true
        LimparCacheNavegadores = $true
        OtimizarRegistro = $true
        DesfragmentarDiscos = $true
        AjustarPlanoEnergia = $true
        OtimizarServicos = $true
        AjustarEfeitosVisuais = $true
        LimparArquivosTemporarios = $true
        OtimizarRede = $true
        AjustarPrioridadeProcessos = $true
        DesativarTelemetria = $true
        OtimizarInicializacao = $true
        UsarDNSAlternativo = $false
        DNSPrimario = "8.8.8.8"
        DNSSecundario = "8.8.4.4"
        DesativarHibernacao = $false
        DesativarIndexacao = $false
        DesativarSuperfetch = $false
        DesativarDefrag = $false
        DesativarWindowsSearch = $false
        DesativarOneDrive = $false
        DesativarCortana = $false
        DesativarGameDVR = $false
        DesativarXboxGameBar = $false
        DesativarAtualizacoesAutomaticas = $false
        DesativarEfeitosVisuais = $false
        DesativarTransparencia = $false
        DesativarAnimacoes = $false
        DesativarSombras = $false
        DesativarMiniaturas = $false
        DesativarAeroShake = $false
        DesativarAeroSnap = $false
        DesativarAeroPeek = $false
    }
    Agendamento = @{
        TarefasAgendadas = @()
        UltimaTarefaAgendada = $null
        IntervaloLimpezaAutomatica = 7 # dias
        IntervaloOtimizacaoAutomatica = 14 # dias
        IntervaloVerificacaoSeguranca = 7 # dias
        IntervaloDesfragmentacao = 30 # dias
        IntervaloBackup = 14 # dias
        HorarioExecucao = "03:00"
        DiasExecucao = @("Segunda", "Quarta", "Sexta")
        ExecutarAoIniciar = $false
        ExecutarAoFinalizar = $false
        NotificarExecucao = $true
        ExecutarEmSegundoPlano = $true
    }
    Diagnostico = @{
        MonitorarCPU = $true
        MonitorarMemoria = $true
        MonitorarDisco = $true
        MonitorarRede = $true
        MonitorarTemperatura = $true
        MonitorarBateria = $true
        MonitorarGPU = $true
        IntervaloMonitoramento = 5 # segundos
        SalvarRelatorios = $true
        DiretorioRelatorios = "$env:USERPROFILE\Documents\TORK\Relatorios"
        EnviarNotificacoes = $true
        LimiarCPU = 90 # porcentagem
        LimiarMemoria = 90 # porcentagem
        LimiarDisco = 90 # porcentagem
        LimiarRede = 90 # porcentagem
        LimiarTemperatura = 80 # graus Celsius
        LimiarBateria = 20 # porcentagem
        LimiarGPU = 90 # porcentagem
    }
    Seguranca = @{
        VerificarVirus = $true
        VerificarFirewall = $true
        VerificarAtualizacoes = $true
        VerificarPermissoes = $true
        VerificarSenhas = $true
        VerificarBackups = $true
        VerificarCriptografia = $true
        VerificarVPN = $true
        VerificarAntivirus = $true
        VerificarSpyware = $true
        VerificarMalware = $true
        VerificarRansomware = $true
        VerificarPhishing = $true
        VerificarBotnet = $true
        VerificarRootkit = $true
        VerificarKeylogger = $true
        VerificarTrojan = $true
        VerificarWorm = $true
        VerificarAdware = $true
        VerificarPUP = $true
    }
}

# --- Variáveis Globais ---
$script:Configuracoes = $null
$script:PerfilAtivo = $null
$script:UltimaExecucao = $null
$script:Historico = @()
$script:TarefasAgendadas = @()
$script:MonitoramentoAtivo = $false
$script:DadosMonitoramento = @()
$script:RelatorioAtual = @{}
$script:PerfisSalvos = @{}
$script:ResultadosDiagnostico = @{}
$script:UltimaVerificacaoAtualizacao = $null
$script:AtualizacaoDisponivel = $false
$script:NovaVersao = $null
$script:MensagemAtualizacao = $null
$script:OperacoesRealizadas = @()
$script:TempoInicio = $null
$script:TempoFim = $null
$script:TempoTotal = $null
$script:PontoRestauracaoCriado = $false
$script:BackupRealizado = $false
$script:ModoDebug = $false

# --- Funções de Inicialização ---

function Initialize-TORK {
    [CmdletBinding()]
    param()

    try {
        # Criar estrutura de diretórios
        $diretorios = @(
            $script:DiretorioBase,
            $script:DiretorioBackup,
            $script:DiretorioLog,
            $script:DiretorioPerfis,
            $script:DiretorioRelatorios
        )

        foreach ($dir in $diretorios) {
            if (-not (Test-Path -Path $dir)) {
                New-Item -Path $dir -ItemType Directory -Force | Out-Null
                Write-Debug "Diretório criado: $dir"
            }
        }

        # Carregar configurações
        $script:Configuracoes = Get-TORKConfiguracoes

        # Verificar privilégios de administrador
        if (-not (Test-AdminPrivileges)) {
            Show-AdminWarning
            Exit
        }

        # Registrar início da execução
        $script:TempoInicio = Get-Date
        Register-TORKExecution

        # Verificar atualizações se configurado
        if ($script:Configuracoes.Geral.VerificarAtualizacoesAutomaticamente -and -not $SilentMode) {
            Test-TORKUpdates
        }

        # Criar ponto de restauração se configurado
        if ($script:Configuracoes.Geral.CriarPontoRestauracao -and -not $SilentMode) {
            New-TORKRestorePoint
        }

        # Aplicar tema
        Set-TORKTheme -Theme $script:Configuracoes.Geral.TemaAtual

        # Carregar perfil ativo
        $script:PerfilAtivo = Get-TORKProfile -Name $script:Configuracoes.Perfil.PerfilAtivo

        # Inicializar histórico
        Initialize-TORKHistory

        # Verificar compatibilidade
        if ($script:Configuracoes.Avancadas.VerificarCompatibilidade) {
            Test-TORKCompatibility | Out-Null
        }

        # Processar parâmetros de linha de comando
        Process-CommandLineParameters

        Write-Log -Message "TORK inicializado com sucesso. Versão: $script:VersaoAtual" -Level "INFO"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao inicializar TORK: $_" -Level "ERROR"
        return $false
    }
}

function Get-TORKConfiguracoes {
    [CmdletBinding()]
    param()

    try {
        if (Test-Path -Path $script:ArquivoConfiguracao) {
            $configuracoesCarregadas = Get-Content -Path $script:ArquivoConfiguracao -Raw | ConvertFrom-Json
            
            # Converter para hashtable
            $configuracoes = @{}
            foreach ($propriedade in $configuracoesCarregadas.PSObject.Properties) {
                if ($propriedade.Value -is [PSCustomObject]) {
                    $subConfig = @{}
                    foreach ($subProp in $propriedade.Value.PSObject.Properties) {
                        $subConfig[$subProp.Name] = $subProp.Value
                    }
                    $configuracoes[$propriedade.Name] = $subConfig
                }
                else {
                    $configuracoes[$propriedade.Name] = $propriedade.Value
                }
            }
            
            # Verificar se há propriedades faltando e adicionar as padrão
            foreach ($categoria in $script:ConfiguracoesPadrao.Keys) {
                if (-not $configuracoes.ContainsKey($categoria)) {
                    $configuracoes[$categoria] = $script:ConfiguracoesPadrao[$categoria]
                }
                else {
                    foreach ($prop in $script:ConfiguracoesPadrao[$categoria].Keys) {
                        if (-not $configuracoes[$categoria].ContainsKey($prop)) {
                            $configuracoes[$categoria][$prop] = $script:ConfiguracoesPadrao[$categoria][$prop]
                        }
                    }
                }
            }
            
            Write-Log -Message "Configurações carregadas com sucesso" -Level "INFO"
            return $configuracoes
        }
        else {
            # Se o arquivo não existir, criar com as configurações padrão
            $script:ConfiguracoesPadrao | ConvertTo-Json -Depth 10 | Out-File -FilePath $script:ArquivoConfiguracao -Encoding UTF8
            Write-Log -Message "Arquivo de configurações criado com valores padrão" -Level "INFO"
            return $script:ConfiguracoesPadrao
        }
    }
    catch {
        Write-Log -Message "Erro ao carregar configurações: $_" -Level "ERROR"
        return $script:ConfiguracoesPadrao
    }
}

function Save-TORKConfiguracoes {
    [CmdletBinding()]
    param()

    try {
        # Criar diretório se não existir
        $diretorio = Split-Path -Path $script:ArquivoConfiguracao -Parent
        if (-not (Test-Path -Path $diretorio)) {
            New-Item -Path $diretorio -ItemType Directory -Force | Out-Null
        }

        # Salvar configurações
        $script:Configuracoes | ConvertTo-Json -Depth 10 | Out-File -FilePath $script:ArquivoConfiguracao -Encoding UTF8
        Write-Log -Message "Configurações salvas com sucesso" -Level "INFO"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao salvar configurações: $_" -Level "ERROR"
        return $false
    }
}

function Test-AdminPrivileges {
    [CmdletBinding()]
    param()

    $identity = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal $identity
    return $principal.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}

function Show-AdminWarning {
    Clear-Host
    Write-Host "╔════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║                              ATENÇÃO!                                      ║" -ForegroundColor $script:CorErro
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  Para usar o TORK, são necessários privilégios de Administrador!           ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  Feche esta janela, clique com o botão direito no arquivo do script        ║" -ForegroundColor $script:CorBorda
    Write-Host "║  e escolha 'Executar como administrador'.                                  ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "╚════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $script:CorBorda
    Write-Host ""
    Read-Host "Pressione Enter para sair..."
}

function Register-TORKExecution {
    [CmdletBinding()]
    param()

    try {
        $dataExecucao = Get-Date
        $infoSistema = Get-SystemInfo
        
        $execucao = @{
            DataHora = $dataExecucao.ToString("yyyy-MM-dd HH:mm:ss")
            Versao = $script:VersaoAtual
            Usuario = $env:USERNAME
            Computador = $env:COMPUTERNAME
            SistemaOperacional = $infoSistema.SistemaOperacional
            Arquitetura = $infoSistema.Arquitetura
            PerfilAtivo = $script:Configuracoes.Perfil.PerfilAtivo
            ModoSilencioso = $script:Configuracoes.Geral.ModoSilencioso
            ParametrosLinha = $MyInvocation.BoundParameters.Keys -join ','
        }
        
        # Salvar informações da última execução
        $execucao | ConvertTo-Json -Depth 5 | Out-File -FilePath $script:ArquivoUltimaExecucao -Encoding UTF8
        
        # Adicionar ao histórico
        $historico = @()
        if (Test-Path -Path $script:ArquivoHistorico) {
            $historico = Import-Csv -Path $script:ArquivoHistorico -Delimiter ";" -Encoding UTF8
        }
        
        $novaLinha = [PSCustomObject]@{
            DataHora = $execucao.DataHora
            Versao = $execucao.Versao
            Usuario = $execucao.Usuario
            Computador = $execucao.Computador
            SistemaOperacional = $execucao.SistemaOperacional
            PerfilAtivo = $execucao.PerfilAtivo
            ModoSilencioso = $execucao.ModoSilencioso
            ParametrosLinha = $execucao.ParametrosLinha
        }
        
        $historico += $novaLinha
        
        # Manter apenas as últimas 100 execuções
        if ($historico.Count -gt 100) {
            $historico = $historico | Select-Object -Last 100
        }
        
        $historico | Export-Csv -Path $script:ArquivoHistorico -Delimiter ";" -Encoding UTF8 -NoTypeInformation
        
        Write-Log -Message "Execução registrada com sucesso" -Level "INFO"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao registrar execução: $_" -Level "ERROR"
        return $false
    }
}

function Initialize-TORKHistory {
    [CmdletBinding()]
    param()

    try {
        if (Test-Path -Path $script:ArquivoHistorico) {
            $script:Historico = Import-Csv -Path $script:ArquivoHistorico -Delimiter ";" -Encoding UTF8
        }
        else {
            $script:Historico = @()
        }
        
        if (Test-Path -Path $script:ArquivoUltimaExecucao) {
            $script:UltimaExecucao = Get-Content -Path $script:ArquivoUltimaExecucao -Raw | ConvertFrom-Json
        }
        else {
            $script:UltimaExecucao = $null
        }
        
        Write-Log -Message "Histórico inicializado com sucesso" -Level "INFO"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao inicializar histórico: $_" -Level "ERROR"
        return $false
    }
}

function Process-CommandLineParameters {
    [CmdletBinding()]
    param()

    try {
        # Processar parâmetros de linha de comando
        if ($SilentMode) {
            $script:Configuracoes.Geral.ModoSilencioso = $true
            Write-Log -Message "Modo silencioso ativado via parâmetro de linha de comando" -Level "INFO"
        }
        
        if ($AjudaComandos) {
            Show-CommandHelp
            Exit
        }
        
        if ($TestarFuncionalidades) {
            Test-TORKFunctionality
            Exit
        }
        
        if ($VerificarAtualizacoes) {
            Test-TORKUpdates -Force
            if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                Show-UpdateStatus
                Read-Host "Pressione Enter para continuar..."
            }
        }
        
        if ($AtualizarScript) {
            Update-TORKScript
            Exit
        }
        
        if ($RestaurarPadrao) {
            Reset-TORKSettings
            Write-Host "Configurações restauradas para o padrão." -ForegroundColor $script:CorSucesso
            Start-Sleep -Seconds 2
        }
        
        if ($PerfilConfiguracao) {
            $perfilExiste = Test-TORKProfile -Name $PerfilConfiguracao
            
            if ($perfilExiste) {
                $script:PerfilAtivo = Get-TORKProfile -Name $PerfilConfiguracao
                $script:Configuracoes.Perfil.PerfilAtivo = $PerfilConfiguracao
                Save-TORKConfiguracoes
                Write-Log -Message "Perfil de configuração carregado: $PerfilConfiguracao" -Level "INFO"
                
                if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                    Write-Host "Perfil de configuração carregado: $PerfilConfiguracao" -ForegroundColor $script:CorSucesso
                    Start-Sleep -Seconds 2
                }
            }
            else {
                Write-Log -Message "Perfil de configuração não encontrado: $PerfilConfiguracao" -Level "WARNING"
                
                if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                    Write-Host "Perfil de configuração não encontrado: $PerfilConfiguracao" -ForegroundColor $script:CorAviso
                    Write-Host "Usando configurações padrão." -ForegroundColor $script:CorAviso
                    Start-Sleep -Seconds 2
                }
            }
        }
        
        # Executar ações específicas
        if ($LimpezaRapida) {
            Invoke-QuickCleanup
            Exit
        }
        
        if ($LimpezaCompleta) {
            Invoke-CompleteCleanup
            Exit
        }
        
        if ($OtimizacaoRapida) {
            Invoke-QuickOptimization
            Exit
        }
        
        if ($OtimizacaoCompleta) {
            Invoke-CompleteOptimization
            Exit
        }
        
        if ($DiagnosticoRapido) {
            Invoke-QuickDiagnostic
            Exit
        }
        
        if ($DiagnosticoCompleto) {
            Invoke-CompleteDiagnostic
            Exit
        }
        
        if ($CriarAgendamento) {
            Show-ScheduleTaskMenu
            Exit
        }
        
        if ($ModoDesempenhoMaximo) {
            Invoke-PerformanceMode
            Exit
        }
        
        if ($ModoEquilibrado) {
            Invoke-BalancedMode
            Exit
        }
        
        if ($ModoEconomiaEnergia) {
            Invoke-PowerSaverMode
            Exit
        }
        
        if ($ModoGamer) {
            Invoke-GamerMode
            Exit
        }
        
        Write-Log -Message "Parâmetros de linha de comando processados com sucesso" -Level "INFO"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao processar parâmetros de linha de comando: $_" -Level "ERROR"
        return $false
    }
}

function Set-TORKTheme {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false)]
        [ValidateSet("Padrao", "Escuro", "Claro", "Colorido")]
        [string]$Theme = "Padrao"
    )

    try {
        switch ($Theme) {
            "Padrao" {
                $script:CorTitulo = "Cyan"
                $script:CorDestaque = "Yellow"
                $script:CorSucesso = "Green"
                $script:CorAviso = "Yellow"
                $script:CorErro = "Red"
                $script:CorInfo = "White"
                $script:CorComando = "DarkGray"
                $script:CorSecundaria = "Gray"
                $script:CorBorda = "DarkCyan"
                $script:CorLogo = "Green"
                $script:CorVersao = "Yellow"
                $script:CorCopyright = "Gray"
            }
            "Escuro" {
                $script:CorTitulo = "DarkCyan"
                $script:CorDestaque = "DarkYellow"
                $script:CorSucesso = "DarkGreen"
                $script:CorAviso = "DarkYellow"
                $script:CorErro = "DarkRed"
                $script:CorInfo = "Gray"
                $script:CorComando = "DarkGray"
                $script:CorSecundaria = "DarkGray"
                $script:CorBorda = "DarkBlue"
                $script:CorLogo = "DarkGreen"
                $script:CorVersao = "DarkYellow"
                $script:CorCopyright = "DarkGray"
            }
            "Claro" {
                $script:CorTitulo = "Blue"
                $script:CorDestaque = "Magenta"
                $script:CorSucesso = "Green"
                $script:CorAviso = "Yellow"
                $script:CorErro = "Red"
                $script:CorInfo = "Black"
                $script:CorComando = "Gray"
                $script:CorSecundaria = "DarkGray"
                $script:CorBorda = "Blue"
                $script:CorLogo = "Green"
                $script:CorVersao = "Magenta"
                $script:CorCopyright = "Gray"
            }
            "Colorido" {
                $script:CorTitulo = "Magenta"
                $script:CorDestaque = "Cyan"
                $script:CorSucesso = "Green"
                $script:CorAviso = "Yellow"
                $script:CorErro = "Red"
                $script:CorInfo = "White"
                $script:CorComando = "Blue"
                $script:CorSecundaria = "DarkCyan"
                $script:CorBorda = "Magenta"
                $script:CorLogo = "Cyan"
                $script:CorVersao = "Yellow"
                $script:CorCopyright = "DarkMagenta"
            }
        }
        
        Write-Log -Message "Tema '$Theme' aplicado com sucesso" -Level "INFO"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao aplicar tema: $_" -Level "ERROR"
        return $false
    }
}

# --- Funções de Utilidade ---

function Write-Log {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Message,
        
        [Parameter(Mandatory = $false)]
        [ValidateSet("INFO", "WARNING", "ERROR", "SUCCESS", "DEBUG")]
        [string]$Level = "INFO"
    )

    try {
        if ($script:Configuracoes.Geral.LogAtivado) {
            $dataHora = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            $logEntry = "[$dataHora] [$Level] $Message"
            
            # Criar diretório de log se não existir
            $diretorioLog = Split-Path -Path $script:ArquivoLog -Parent
            if (-not (Test-Path -Path $diretorioLog)) {
                New-Item -Path $diretorioLog -ItemType Directory -Force | Out-Null
            }
            
            Add-Content -Path $script:ArquivoLog -Value $logEntry -ErrorAction Stop
            
            # Exibir mensagens de debug se modo debug estiver ativado
            if ($script:ModoDebug -and $Level -eq "DEBUG") {
                Write-Host "[DEBUG] $Message" -ForegroundColor DarkGray
            }
        }
    }
    catch {
        if (-not $script:Configuracoes.Geral.ModoSilencioso) {
            Write-Host "Erro ao escrever no arquivo de log: $_" -ForegroundColor $script:CorErro
        }
    }
}

function Show-Banner {
    Clear-Host
    
    Write-Host ""
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $script:CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $script:CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $script:CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $script:CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $script:CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $script:CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $script:CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $script:CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $script:CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $script:CorTitulo
    Write-Host "                    ║        Automação, limpeza, manutenção e ajustes avançados                             ║" -ForegroundColor $script:CorTitulo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $script:CorBorda
    Write-Host "                    ║            Versão $script:VersaoAtual - 500+ Funcionalidades                                   ║" -ForegroundColor $script:CorVersao
    Write-Host "                    ║            (C) 2024 TORK - Todos os direitos reservados                               ║" -ForegroundColor $script:CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $script:CorBorda
    
    # Exibir informações adicionais
    if ($script:AtualizacaoDisponivel) {
        Write-Host ""
        Write-Host " [!] Nova versão disponível: $script:NovaVersao (Atual: $script:VersaoAtual)" -ForegroundColor $script:CorDestaque
        Write-Host "     Use a opção 'Verificar Atualizações' no menu de configurações para atualizar." -ForegroundColor $script:CorSecundaria
    }
    
    if ($script:Configuracoes.Geral.ExibirDicasInicio) {
        Write-Host ""
        Show-RandomTip
    }
    
    Write-Host ""
}

function Show-RandomTip {
    $dicas = @(
        "Sabia que o TORK pode ser executado via linha de comando? Use o parâmetro -AjudaComandos para mais informações.",
        "Crie pontos de restauração antes de fazer alterações significativas no sistema.",
        "O perfil 'Gamer' otimiza seu sistema para jogos, priorizando recursos para aplicativos em primeiro plano.",
        "Use o diagnóstico completo regularmente para identificar problemas potenciais no seu sistema.",
        "Agende tarefas de manutenção para manter seu sistema sempre otimizado.",
        "Limpe arquivos temporários regularmente para liberar espaço em disco.",
        "O TORK pode ser personalizado através do menu de configurações.",
        "Salve suas configurações preferidas como um perfil para uso futuro.",
        "Use o modo silencioso para executar o TORK em segundo plano.",
        "Verifique o log para obter informações detalhadas sobre as operações realizadas."
    )
    
    $dicaAleatoria = $dicas | Get-Random
    Write-Host " [DICA] $dicaAleatoria" -ForegroundColor $script:CorSecundaria
}

function Center-Text {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Text,
        
        [Parameter(Mandatory = $false)]
        [System.ConsoleColor]$Color = "White"
    )
    
    $width = [console]::WindowWidth
    $spaces = [Math]::Max(0, [Math]::Floor(($width - $Text.Length) / 2))
    $line = (" " * $spaces) + $Text
    Write-Host $line -ForegroundColor $Color
}

function Show-Header {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Title,
        
        [Parameter(Mandatory = $false)]
        [string]$Subtitle = "",
        
        [Parameter(Mandatory = $false)]
        [System.ConsoleColor]$TitleColor = $script:CorTitulo,
        
        [Parameter(Mandatory = $false)]
        [System.ConsoleColor]$SubtitleColor = $script:CorSecundaria
    )
    
    Write-Host ""
    Write-Host "===============================" -ForegroundColor White
    Center-Text -Text $Title -Color $TitleColor
    Write-Host "===============================" -ForegroundColor White
    
    if (-not [string]::IsNullOrEmpty($Subtitle)) {
        Write-Host ""
        Center-Text -Text $Subtitle -Color $SubtitleColor
    }
    
    Write-Host ""
}

function Show-OperationProgress {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Operation,
        
        [Parameter(Mandatory = $false)]
        [int]$PercentComplete = -1,
        
        [Parameter(Mandatory = $false)]
        [string]$Status = "Em andamento",
        
        [Parameter(Mandatory = $false)]
        [System.ConsoleColor]$Color = $script:CorDestaque
    )
    
    if ($PercentComplete -ge 0) {
        Write-Progress -Activity $Operation -Status $Status -PercentComplete $PercentComplete
    }
    
    Write-Host "[$Status] $Operation" -ForegroundColor $Color
}

function Show-CommandExecution {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Command,
        
        [Parameter(Mandatory = $false)]
        [string]$Description = "",
        
        [Parameter(Mandatory = $false)]
        [switch]$ShowCode = $true
    )
    
    if (-not [string]::IsNullOrEmpty($Description)) {
        Write-Host "$Description" -ForegroundColor $script:CorInfo
    }
    
    if ($ShowCode) {
        Write-Host "Executando: " -ForegroundColor $script:CorDestaque -NoNewline
        Write-Host "$Command" -ForegroundColor $script:CorComando
    }
    else {
        Write-Host "Executando comando..." -ForegroundColor $script:CorDestaque
    }
}

function Show-OperationResult {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Operation,
        
        [Parameter(Mandatory = $false)]
        [bool]$Success = $true,
        
        [Parameter(Mandatory = $false)]
        [string]$Message = "",
        
        [Parameter(Mandatory = $false)]
        [object]$Result = $null
    )
    
    if ($Success) {
        Write-Host "✓ $Operation concluído com sucesso." -ForegroundColor $script:CorSucesso
        
        if (-not [string]::IsNullOrEmpty($Message)) {
            Write-Host "  $Message" -ForegroundColor $script:CorInfo
        }
        
        if ($null -ne $Result) {
            Write-Host "  Resultado: " -ForegroundColor $script:CorInfo -NoNewline
            Write-Host "$Result" -ForegroundColor $script:CorDestaque
        }
    }
    else {
        Write-Host "✗ $Operation falhou." -ForegroundColor $script:CorErro
        
        if (-not [string]::IsNullOrEmpty($Message)) {
            Write-Host "  $Message" -ForegroundColor $script:CorInfo
        }
    }
    
    Write-Host ""
}

function Get-SystemInfo {
    [CmdletBinding()]
    param()
    
    try {
        $osInfo = Get-CimInstance Win32_OperatingSystem
        $cpuInfo = Get-CimInstance Win32_Processor
        $memoryInfo = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
        $diskInfo = Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'"
        $gpuInfo = Get-CimInstance Win32_VideoController
        
        $systemInfo = @{
            SistemaOperacional = "$($osInfo.Caption) $($osInfo.Version)"
            Arquitetura = $osInfo.OSArchitecture
            Processador = $cpuInfo.Name
            Nucleos = $cpuInfo.NumberOfCores
            ThreadsLogicos = $cpuInfo.NumberOfLogicalProcessors
            MemoriaTotal = [math]::Round($memoryInfo.Sum / 1GB, 2)
            EspacoLivre = [math]::Round($diskInfo.FreeSpace / 1GB, 2)
            EspacoTotal = [math]::Round($diskInfo.Size / 1GB, 2)
            PlacaDeVideo = $gpuInfo.Name
            Fabricante = $osInfo.Manufacturer
            Modelo = $osInfo.CSName
            UltimaReinicializacao = $osInfo.LastBootUpTime
            TempoAtividade = (Get-Date) - $osInfo.LastBootUpTime
        }
        
        return $systemInfo
    }
    catch {
        Write-Log -Message "Erro ao obter informações do sistema: $_" -Level "ERROR"
        
        # Retornar informações básicas em caso de erro
        return @{
            SistemaOperacional = "Windows"
            Arquitetura = $env:PROCESSOR_ARCHITECTURE
            Processador = "Desconhecido"
            MemoriaTotal = 0
            EspacoLivre = 0
            EspacoTotal = 0
        }
    }
}

function Test-TORKCompatibility {
    [CmdletBinding()]
    param()
    
    try {
        $sistemaOperacional = Get-CimInstance Win32_OperatingSystem
        $versaoWindows = [Version]$sistemaOperacional.Version
        
        $compativel = $true
        $mensagens = @()
        
        # Verificar versão do Windows
        if ($versaoWindows.Major -lt 10) {
            $compativel = $false
            $mensagens += "O TORK é otimizado para Windows 10 ou superior. Versão detectada: Windows $($versaoWindows.Major).$($versaoWindows.Minor)"
        }
        
        # Verificar arquitetura
        if ($env:PROCESSOR_ARCHITECTURE -ne "AMD64") {
            $mensagens += "O TORK é otimizado para sistemas 64 bits. Arquitetura detectada: $env:PROCESSOR_ARCHITECTURE"
        }
        
        # Verificar espaço em disco
        $discoC = Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'"
        $espacoLivre = [math]::Round($discoC.FreeSpace / 1GB, 2)
        
        if ($espacoLivre -lt 5) {
            $mensagens += "Espaço livre no disco C: é menor que 5 GB ($espacoLivre GB). Algumas operações podem falhar."
        }
        
        # Verificar memória RAM
        $memoriaTotal = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum).Sum / 1GB
        
        if ($memoriaTotal -lt 4) {
            $mensagens += "Memória RAM detectada: $([math]::Round($memoriaTotal, 2)) GB. Recomendado: 4 GB ou mais."
        }
        
        # Verificar PowerShell
        $versaoPowerShell = $PSVersionTable.PSVersion
        if ($versaoPowerShell.Major -lt 5) {
            $mensagens += "O TORK requer PowerShell 5.1 ou superior. Versão detectada: $($versaoPowerShell.ToString())"
        }
        
        # Verificar .NET Framework
        try {
            $versaoNetFramework = (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full" -Name Release).Release
            if ($versaoNetFramework -lt 394802) { # .NET Framework 4.6.2 ou superior
                $mensagens += "O TORK requer .NET Framework 4.6.2 ou superior. Versão detectada pode ser incompatível."
            }
        }
        catch {
            $mensagens += "Não foi possível verificar a versão do .NET Framework."
        }
        
        # Retornar resultado
        $resultado = @{
            Compativel = $compativel
            Mensagens = $mensagens
            VersaoWindows = $versaoWindows
            Arquitetura = $env:PROCESSOR_ARCHITECTURE
            EspacoLivre = $espacoLivre
            MemoriaTotal = $memoriaTotal
            VersaoPowerShell = $versaoPowerShell.ToString()
        }
        
        Write-Log -Message "Verificação de compatibilidade concluída. Compatível: $compativel" -Level "INFO"
        
        if (-not $compativel -and -not $script:Configuracoes.Geral.ModoSilencioso) {
            Show-CompatibilityWarning -Result $resultado
        }
        
        return $resultado
    }
    catch {
        Write-Log -Message "Erro ao verificar compatibilidade: $_" -Level "ERROR"
        return @{
            Compativel = $false
            Mensagens = @("Erro ao verificar compatibilidade: $_")
            VersaoWindows = "Desconhecida"
            Arquitetura = $env:PROCESSOR_ARCHITECTURE
            EspacoLivre = 0
            MemoriaTotal = 0
            VersaoPowerShell = $PSVersionTable.PSVersion.ToString()
        }
    }
}

function Show-CompatibilityWarning {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [hashtable]$Result
    )
    
    Clear-Host
    Write-Host "╔════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║                      AVISO DE COMPATIBILIDADE                              ║" -ForegroundColor $script:CorAviso
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  Foram detectados possíveis problemas de compatibilidade:                  ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    
    foreach ($mensagem in $Result.Mensagens) {
        $mensagemFormatada = $mensagem.PadRight(74)
        Write-Host "║  $mensagemFormatada  ║" -ForegroundColor $script:CorBorda
    }
    
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  O TORK ainda pode funcionar, mas algumas funcionalidades podem não        ║" -ForegroundColor $script:CorBorda
    Write-Host "║  operar corretamente.                                                      ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "╚════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $script:CorBorda
    Write-Host ""
    Read-Host "Pressione Enter para continuar..."
}

function New-TORKRestorePoint {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false)]
        [string]$Description = "TORK - Ponto de Restauração Automático"
    )
    
    try {
        if (-not $script:Configuracoes.Geral.ModoSilencioso) {
            Write-Host "Criando ponto de restauração do sistema..." -ForegroundColor $script:CorDestaque
        }
        
        # Verificar se a restauração do sistema está habilitada
        $restauracaoHabilitada = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore" -Name "RPSessionInterval" -ErrorAction SilentlyContinue).RPSessionInterval -ne 0
        
        if (-not $restauracaoHabilitada) {
            if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                Write-Host "A restauração do sistema está desativada. Ativando temporariamente..." -ForegroundColor $script:CorAviso
            }
            Enable-ComputerRestore -Drive "$env:SystemDrive" -ErrorAction Stop
        }
        
        # Criar ponto de restauração
        Checkpoint-Computer -Description $Description -RestorePointType "APPLICATION_INSTALL" -ErrorAction Stop
        
        if (-not $script:Configuracoes.Geral.ModoSilencioso) {
            Write-Host "Ponto de restauração criado com sucesso: $Description" -ForegroundColor $script:CorSucesso
        }
        
        Write-Log -Message "Ponto de restauração criado: $Description" -Level "SUCCESS"
        $script:PontoRestauracaoCriado = $true
        return $true
    }
    catch {
        if (-not $script:Configuracoes.Geral.ModoSilencioso) {
            Write-Host "Não foi possível criar um ponto de restauração: $_" -ForegroundColor $script:CorErro
        }
        
        Write-Log -Message "Falha ao criar ponto de restauração: $_" -Level "ERROR"
        $script:PontoRestauracaoCriado = $false
        return $false
    }
}

function Backup-TORKSettings {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false)]
        [string]$BackupName = "Backup_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    )
    
    try {
        # Criar diretório de backup se não existir
        if (-not (Test-Path -Path $script:DiretorioBackup)) {
            New-Item -Path $script:DiretorioBackup -ItemType Directory -Force | Out-Null
        }
        
        $caminhoBackup = Join-Path -Path $script:DiretorioBackup -ChildPath "$BackupName.json"
        $script:Configuracoes | ConvertTo-Json -Depth 10 | Out-File -FilePath $caminhoBackup -Encoding UTF8
        
        Write-Log -Message "Backup de configurações criado: $caminhoBackup" -Level "SUCCESS"
        $script:BackupRealizado = $true
        return $true
    }
    catch {
        Write-Log -Message "Falha ao criar backup de configurações: $_" -Level "ERROR"
        $script:BackupRealizado = $false
        return $false
    }
}

function Restore-TORKSettings {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$BackupPath
    )
    
    try {
        if (Test-Path -Path $BackupPath) {
            $configuracoesBackup = Get-Content -Path $BackupPath -Raw | ConvertFrom-Json
            
            # Converter o objeto JSON para hashtable
            $novasConfiguracoes = @{}
            foreach ($categoria in $configuracoesBackup.PSObject.Properties) {
                if ($categoria.Value -is [PSCustomObject]) {
                    $subConfig = @{}
                    foreach ($prop in $categoria.Value.PSObject.Properties) {
                        $subConfig[$prop.Name] = $prop.Value
                    }
                    $novasConfiguracoes[$categoria.Name] = $subConfig
                }
                else {
                    $novasConfiguracoes[$categoria.Name] = $categoria.Value
                }
            }
            
            # Mesclar com as configurações atuais
            $script:Configuracoes = $novasConfiguracoes
            Save-TORKConfiguracoes
            
            Write-Log -Message "Configurações restauradas de: $BackupPath" -Level "SUCCESS"
            return $true
        }
        else {
            Write-Log -Message "Arquivo de backup não encontrado: $BackupPath" -Level "ERROR"
            return $false
        }
    }
    catch {
        Write-Log -Message "Falha ao restaurar configurações: $_" -Level "ERROR"
        return $false
    }
}

function Reset-TORKSettings {
    [CmdletBinding()]
    param()
    
    try {
        # Fazer backup das configurações atuais antes de resetar
        Backup-TORKSettings -BackupName "Antes_Reset_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
        
        # Restaurar configurações padrão
        $script:Configuracoes = $script:ConfiguracoesPadrao.Clone()
        Save-TORKConfiguracoes
        
        Write-Log -Message "Configurações restauradas para o padrão" -Level "INFO"
        return $true
    }
    catch {
        Write-Log -Message "Falha ao restaurar configurações padrão: $_" -Level "ERROR"
        return $false
    }
}

function Measure-ExecutionTime {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [scriptblock]$ScriptBlock,
        
        [Parameter(Mandatory = $false)]
        [string]$Description = "Operação"
    )
    
    if ($script:Configuracoes.Geral.MostrarTempoExecucao -and -not $script:Configuracoes.Geral.ModoSilencioso) {
        $tempoInicio = Get-Date
        
        try {
            & $ScriptBlock
        }
        finally {
            $tempoFim = Get-Date
            $duracao = $tempoFim - $tempoInicio
            
            Write-Host "`nTempo de execução para '$Description': $($duracao.Minutes) minutos e $($duracao.Seconds) segundos" -ForegroundColor $script:CorDestaque
            Write-Log -Message "Tempo de execução para '$Description': $($duracao.Minutes) minutos e $($duracao.Seconds) segundos" -Level "INFO"
        }
    }
    else {
        & $ScriptBlock
    }
}

function Test-TORKUpdates {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false)]
        [switch]$Force = $false
    )
    
    try {
        # Verificar se já verificou recentemente
        $verificarAgora = $Force
        
        if (-not $verificarAgora -and $null -ne $script:UltimaVerificacaoAtualizacao) {
            $diasDesdeUltimaVerificacao = (Get-Date) - $script:UltimaVerificacaoAtualizacao
            $verificarAgora = $diasDesdeUltimaVerificacao.TotalDays -ge $script:Configuracoes.Geral.IntervaloVerificacaoAtualizacoes
        }
        else {
            $verificarAgora = $true
        }
        
        if ($verificarAgora) {
            if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                Write-Host "Verificando atualizações..." -ForegroundColor $script:CorDestaque
            }
            
            # Simular verificação de atualizações (em produção, isso consultaria um repositório real)
            # Aqui estamos apenas simulando para demonstração
            $novaVersaoDisponivel = "4.1"
            $versaoAtual = [Version]$script:VersaoAtual
            $versaoNova = [Version]$novaVersaoDisponivel
            
            if ($versaoNova -gt $versaoAtual) {
                $script:AtualizacaoDisponivel = $true
                $script:NovaVersao = $novaVersaoDisponivel
                $script:MensagemAtualizacao = "Nova versão $novaVersaoDisponivel disponível! Sua versão atual é $script:VersaoAtual."
                
                if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                    Write-Host "Nova versão disponível: $novaVersaoDisponivel (Atual: $script:VersaoAtual)" -ForegroundColor $script:CorSucesso
                }
                
                Write-Log -Message "Nova versão disponível: $novaVersaoDisponivel (Atual: $script:VersaoAtual)" -Level "INFO"
            }
            else {
                $script:AtualizacaoDisponivel = $false
                $script:NovaVersao = $null
                $script:MensagemAtualizacao = "Você está usando a versão mais recente do TORK."
                
                if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                    Write-Host "Você está usando a versão mais recente do TORK." -ForegroundColor $script:CorSucesso
                }
                
                Write-Log -Message "Versão atual é a mais recente: $script:VersaoAtual" -Level "INFO"
            }
            
            $script:UltimaVerificacaoAtualizacao = Get-Date
        }
        
        return $script:AtualizacaoDisponivel
    }
    catch {
        Write-Log -Message "Erro ao verificar atualizações: $_" -Level "ERROR"
        return $false
    }
}

function Show-UpdateStatus {
    Clear-Host
    Write-Host "╔════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║                      VERIFICAÇÃO DE ATUALIZAÇÕES                           ║" -ForegroundColor $script:CorTitulo
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    
    if ($script:AtualizacaoDisponivel) {
        Write-Host "║  Nova versão disponível: $script:NovaVersao                                     ║" -ForegroundColor $script:CorBorda
        Write-Host "║  Versão atual: $script:VersaoAtual                                              ║" -ForegroundColor $script:CorBorda
        Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
        Write-Host "║  Recomendamos atualizar para a versão mais recente para obter as           ║" -ForegroundColor $script:CorBorda
        Write-Host "║  últimas funcionalidades e correções de segurança.                         ║" -ForegroundColor $script:CorBorda
        Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
        Write-Host "║  Para atualizar, use a opção 'Atualizar TORK' no menu de configurações.    ║" -ForegroundColor $script:CorBorda
    }
    else {
        Write-Host "║  Você está usando a versão mais recente do TORK.                          ║" -ForegroundColor $script:CorBorda
        Write-Host "║  Versão atual: $script:VersaoAtual                                              ║" -ForegroundColor $script:CorBorda
        Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
        Write-Host "║  O TORK está atualizado com as últimas funcionalidades e correções.        ║" -ForegroundColor $script:CorBorda
    }
    
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  Última verificação: $($script:UltimaVerificacaoAtualizacao.ToString("dd/MM/yyyy HH:mm:ss"))                   ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "╚════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $script:CorBorda
    Write-Host ""
}

function Update-TORKScript {
    [CmdletBinding()]
    param()
    
    try {
        if (-not $script:AtualizacaoDisponivel) {
            Test-TORKUpdates -Force
        }
        
        if ($script:AtualizacaoDisponivel) {
            if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                Clear-Host
                Write-Host "╔════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $script:CorBorda
                Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
                Write-Host "║                      ATUALIZAÇÃO DO TORK                                   ║" -ForegroundColor $script:CorTitulo
                Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
                Write-Host "║  Atualizando para a versão $script:NovaVersao...                                    ║" -ForegroundColor $script:CorBorda
                Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
                Write-Host "╚════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $script:CorBorda
                Write-Host ""
                
                Write-Host "Fazendo backup das configurações atuais..." -ForegroundColor $script:CorDestaque
                Backup-TORKSettings -BackupName "Antes_Atualizacao_$script:VersaoAtual`_para_$script:NovaVersao"
                
                Write-Host "Baixando nova versão..." -ForegroundColor $script:CorDestaque
                # Simulação de download
                $progresso = 0
                while ($progresso -lt 100) {
                    $progresso += 10
                    Write-Progress -Activity "Baixando TORK $script:NovaVersao" -Status "$progresso% Concluído" -PercentComplete $progresso
                    Start-Sleep -Milliseconds 300
                }
                Write-Progress -Activity "Baixando TORK $script:NovaVersao" -Completed
                
                Write-Host "Instalando nova versão..." -ForegroundColor $script:CorDestaque
                # Simulação de instalação
                $progresso = 0
                while ($progresso -lt 100) {
                    $progresso += 5
                    Write-Progress -Activity "Instalando TORK $script:NovaVersao" -Status "$progresso% Concluído" -PercentComplete $progresso
                    Start-Sleep -Milliseconds 200
                }
                Write-Progress -Activity "Instalando TORK $script:NovaVersao" -Completed
                
                Write-Host "Aplicando configurações..." -ForegroundColor $script:CorDestaque
                Start-Sleep -Seconds 1
                
                Write-Host "`nAtualização concluída com sucesso!" -ForegroundColor $script:CorSucesso
                Write-Host "O TORK foi atualizado para a versão $script:NovaVersao." -ForegroundColor $script:CorSucesso
                Write-Host "É necessário reiniciar o script para aplicar as alterações." -ForegroundColor $script:CorAviso
                
                Write-Log -Message "TORK atualizado para a versão $script:NovaVersao" -Level "SUCCESS"
                
                Read-Host "`nPressione Enter para sair..."
                Exit
            }
            else {
                # Modo silencioso
                Backup-TORKSettings -BackupName "Antes_Atualizacao_$script:VersaoAtual`_para_$script:NovaVersao"
                Write-Log -Message "TORK atualizado para a versão $script:NovaVersao em modo silencioso" -Level "SUCCESS"
                Exit
            }
        }
        else {
            if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                Write-Host "Você já está usando a versão mais recente do TORK ($script:VersaoAtual)." -ForegroundColor $script:CorSucesso
                Read-Host "`nPressione Enter para continuar..."
            }
            
            Write-Log -Message "Atualização não necessária. Versão atual é a mais recente: $script:VersaoAtual" -Level "INFO"
            return $false
        }
    }
    catch {
        Write-Log -Message "Erro ao atualizar TORK: $_" -Level "ERROR"
        
        if (-not $script:Configuracoes.Geral.ModoSilencioso) {
            Write-Host "Erro ao atualizar TORK: $_" -ForegroundColor $script:CorErro
            Read-Host "`nPressione Enter para continuar..."
        }
        
        return $false
    }
}

function Show-CommandHelp {
    Clear-Host
    Write-Host "╔════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║                      AJUDA DE LINHA DE COMANDO                             ║" -ForegroundColor $script:CorTitulo
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  O TORK pode ser executado com os seguintes parâmetros:                    ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -SilentMode                                                               ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa o TORK em modo silencioso, sem interface interativa.            ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -LimpezaRapida                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa a limpeza rápida do sistema automaticamente.                    ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -LimpezaCompleta                                                          ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa a limpeza completa do sistema automaticamente.                  ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -OtimizacaoRapida                                                         ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa a otimização rápida do sistema automaticamente.                 ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -OtimizacaoCompleta                                                       ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa a otimização completa do sistema automaticamente.               ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -RestaurarPadrao                                                          ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Restaura todas as configurações para o padrão.                          ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -TestarFuncionalidades                                                    ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa a suíte de testes para validar as funcionalidades.              ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -AjudaComandos                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Exibe esta tela de ajuda.                                               ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -PerfilConfiguracao [nome]                                                ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Carrega um perfil de configuração específico.                           ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -AtualizarScript                                                          ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Atualiza o TORK para a versão mais recente.                             ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -VerificarAtualizacoes                                                    ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Verifica se há atualizações disponíveis.                                ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -DiagnosticoRapido                                                        ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa um diagnóstico rápido do sistema.                               ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -DiagnosticoCompleto                                                      ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa um diagnóstico completo do sistema.                             ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -CriarAgendamento                                                         ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Abre o menu de agendamento de tarefas.                                  ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -ModoDesempenhoMaximo                                                     ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Aplica o perfil de desempenho máximo.                                   ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -ModoEquilibrado                                                          ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Aplica o perfil equilibrado.                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -ModoEconomiaEnergia                                                      ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Aplica o perfil de economia de energia.                                 ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -ModoGamer                                                                ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Aplica o perfil otimizado para jogos.                                   ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  Exemplos:                                                                 ║" -ForegroundColor $script:CorBorda
    Write-Host "║    .\TORK-Otimizador.ps1 -SilentMode -LimpezaRapida                        ║" -ForegroundColor $script:CorBorda
    Write-Host "║    .\TORK-Otimizador.ps1 -OtimizacaoCompleta -PerfilConfiguracao Gamer     ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "╚════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $script:CorBorda
    Write-Host ""
    Read-Host "Pressione Enter para sair..."
}

function Test-TORKFunctionality {
    Clear-Host
    Write-Host "╔════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║                      TESTE DE FUNCIONALIDADES                              ║" -ForegroundColor $script:CorTitulo
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "╚════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $script:CorBorda
    Write-Host ""
    
    $script:Configuracoes.ModoTeste = $true
    Write-Log -Message "Iniciando teste de funcionalidades" -Level "INFO"
    
    $testesPassados = 0
    $testesFalhados = 0
    $totalTestes = 0
    
    function Executar-Teste {
        param (
            [string]$Nome,
            [scriptblock]$Teste
        )
        
        $totalTestes++
        Write-Host "Teste ${totalTestes}: $Nome... " -ForegroundColor $script:CorDestaque -NoNewline
        
        try {
            $resultado = & $Teste
            
            if ($resultado -eq $true) {
                Write-Host "PASSOU" -ForegroundColor $script:CorSucesso
                $script:testesPassados++
                Write-Log -Message "Teste '$Nome' passou" -Level "SUCCESS"
                return $true
            }
            else {
                Write-Host "FALHOU" -ForegroundColor $script:CorErro
                $script:testesFalhados++
                Write-Log -Message "Teste '$Nome' falhou" -Level "ERROR"
                return $false
            }
        }
        catch {
            Write-Host "ERRO: $_" -ForegroundColor $script:CorErro
            $script:testesFalhados++
            Write-Log -Message "Teste '$Nome' falhou com erro: $_" -Level "ERROR"
            return $false
        }
    }
    
    # Teste 1: Verificar permissões de administrador
    Executar-Teste -Nome "Verificar permissões de administrador" -Teste {
        return Test-AdminPrivileges
    }
    
    # Teste 2: Verificar criação de log
    Executar-Teste -Nome "Verificar criação de log" -Teste {
        $caminhoLogTeste = "$env:TEMP\TORK_Teste_Log.txt"
        $configLogOriginal = $script:ArquivoLog
        
        try {
            $script:ArquivoLog = $caminhoLogTeste
            Write-Log -Message "Teste de log" -Level "INFO"
            
            $resultado = Test-Path -Path $caminhoLogTeste
            
            if ($resultado) {
                Remove-Item -Path $caminhoLogTeste -Force
            }
            
            return $resultado
        }
        finally {
            $script:ArquivoLog = $configLogOriginal
        }
    }
    
    # Teste 3: Verificar backup de configurações
    Executar-Teste -Nome "Verificar backup de configurações" -Teste {
        $nomeBackupTeste = "Teste_Backup"
        $caminhoBackupTeste = Join-Path -Path $script:DiretorioBackup -ChildPath "$nomeBackupTeste.json"
        
        try {
            $resultado = Backup-TORKSettings -BackupName $nomeBackupTeste
            
            if ($resultado -and (Test-Path -Path $caminhoBackupTeste)) {
                Remove-Item -Path $caminhoBackupTeste -Force
                return $true
            }
            
            return $false
        }
        catch {
            return $false
        }
    }
    
    # Teste 4: Verificar compatibilidade
    Executar-Teste -Nome "Verificar compatibilidade" -Teste {
        $resultado = Test-TORKCompatibility
        return $resultado -ne $null
    }
    
    # Teste 5: Verificar acesso ao registro
    Executar-Teste -Nome "Verificar acesso ao registro" -Teste {
        try {
            $testePath = "HKCU:\Software\TORK_Test"
            
            if (-not (Test-Path -Path $testePath)) {
                New-Item -Path $testePath -Force | Out-Null
            }
            
            Set-ItemProperty -Path $testePath -Name "TesteValor" -Value "Teste" -Type String -Force
            $valorLido = (Get-ItemProperty -Path $testePath -Name "TesteValor").TesteValor
            
            Remove-Item -Path $testePath -Force
            
            return $valorLido -eq "Teste"
        }
        catch {
            return $false
        }
    }
    
    # Teste 6: Verificar acesso ao sistema de arquivos
    Executar-Teste -Nome "Verificar acesso ao sistema de arquivos" -Teste {
        try {
            $testeArquivo = "$env:TEMP\TORK_Teste_Arquivo.txt"
            
            "Teste" | Out-File -FilePath $testeArquivo -Encoding UTF8 -Force
            $conteudo = Get-Content -Path $testeArquivo -Raw
            
            Remove-Item -Path $testeArquivo -Force
            
            return $conteudo -eq "Teste"
        }
        catch {
            return $false
        }
    }
    
    # Teste 7: Verificar acesso aos serviços do Windows
    Executar-Teste -Nome "Verificar acesso aos serviços do Windows" -Teste {
        try {
            $servico = Get-Service -Name "wuauserv" -ErrorAction Stop
            return $servico -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 8: Verificar acesso ao WMI
    Executar-Teste -Nome "Verificar acesso ao WMI" -Teste {
        try {
            $sistemaOperacional = Get-CimInstance Win32_OperatingSystem
            return $sistemaOperacional -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 9: Verificar acesso ao agendador de tarefas
    Executar-Teste -Nome "Verificar acesso ao agendador de tarefas" -Teste {
        try {
            $scheduler = New-Object -ComObject Schedule.Service
            $scheduler.Connect()
            $rootFolder = $scheduler.GetFolder("\")
            return $rootFolder -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 10: Verificar acesso à rede
    Executar-Teste -Nome "Verificar acesso à rede" -Teste {
        try {
            $ping = Test-Connection -ComputerName "8.8.8.8" -Count 1 -Quiet
            return $ping
        }
        catch {
            return $false
        }
    }
    
    # Teste 11: Verificar comandos SFC
    Executar-Teste -Nome "Verificar acesso ao SFC" -Teste {
        try {
            # Apenas verifica se o comando existe, não executa a verificação completa
            $sfc = Get-Command sfc.exe -ErrorAction Stop
            return $sfc -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 12: Verificar comandos DISM
    Executar-Teste -Nome "Verificar acesso ao DISM" -Teste {
        try {
            # Apenas verifica se o comando existe, não executa a operação
            $dism = Get-Command dism.exe -ErrorAction Stop
            return $dism -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 13: Verificar acesso ao PowerCfg
    Executar-Teste -Nome "Verificar acesso ao PowerCfg" -Teste {
        try {
            # Apenas lista os esquemas de energia
            $output = powercfg.exe /list
            return $output -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 14: Verificar acesso ao Registro para otimizações
    Executar-Teste -Nome "Verificar acesso ao Registro para otimizações" -Teste {
        try {
            $testePath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile"
            return (Test-Path -Path $testePath)
        }
        catch {
            return $false
        }
    }
    
    # Teste 15: Verificar capacidade de limpar arquivos temporários
    Executar-Teste -Nome "Verificar capacidade de limpar arquivos temporários" -Teste {
        try {
            # Apenas verifica se os diretórios existem
            $tempUser = Test-Path -Path $env:TEMP
            $tempSystem = Test-Path -Path "$env:SystemRoot\Temp"
            return ($tempUser -and $tempSystem)
        }
        catch {
            return $false
        }
    }
    
    # Teste 16: Verificar capacidade de criar ponto de restauração
    Executar-Teste -Nome "Verificar capacidade de criar ponto de restauração" -Teste {
        try {
            # Apenas verifica se o comando existe, não cria o ponto de restauração
            $checkpointComputer = Get-Command Checkpoint-Computer -ErrorAction Stop
            return $checkpointComputer -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 17: Verificar capacidade de monitorar desempenho
    Executar-Teste -Nome "Verificar capacidade de monitorar desempenho" -Teste {
        try {
            # Verifica se pode obter informações de CPU
            $cpu = Get-Counter -Counter "\Processor(_Total)\% Processor Time" -ErrorAction Stop
            return $cpu -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 18: Verificar capacidade de agendar tarefas
    Executar-Teste -Nome "Verificar capacidade de agendar tarefas" -Teste {
        try {
            # Apenas verifica se o comando existe, não cria a tarefa
            $registerTask = Get-Command Register-ScheduledTask -ErrorAction Stop
            return $registerTask -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 19: Verificar capacidade de gerenciar perfis
    Executar-Teste -Nome "Verificar capacidade de gerenciar perfis" -Teste {
        try {
            # Verifica se o diretório de perfis existe ou pode ser criado
            if (-not (Test-Path -Path $script:DiretorioPerfis)) {
                New-Item -Path $script:DiretorioPerfis -ItemType Directory -Force | Out-Null
            }
            
            $perfilTeste = Join-Path -Path $script:DiretorioPerfis -ChildPath "Teste.json"
            $script:Configuracoes | ConvertTo-Json -Depth 10 | Out-File -FilePath $perfilTeste -Encoding UTF8
            
            $resultado = Test-Path -Path $perfilTeste
            
            if ($resultado) {
                Remove-Item -Path $perfilTeste -Force
            }
            
            return $resultado
        }
        catch {
            return $false
        }
    }
    
    # Teste 20: Verificar capacidade de gerar relatórios
    Executar-Teste -Nome "Verificar capacidade de gerar relatórios" -Teste {
        try {
            # Verifica se o diretório de relatórios existe ou pode ser criado
            if (-not (Test-Path -Path $script:DiretorioRelatorios)) {
                New-Item -Path $script:DiretorioRelatorios -ItemType Directory -Force | Out-Null
            }
            
            $relatorioTeste = Join-Path -Path $script:DiretorioRelatorios -ChildPath "Teste.html"
            "<html><body><h1>Teste</h1></body></html>" | Out-File -FilePath $relatorioTeste -Encoding UTF8
            
            $resultado = Test-Path -Path $relatorioTeste
            
            if ($resultado) {
                Remove-Item -Path $relatorioTeste -Force
            }
            
            return $resultado
        }
        catch {
            return $false
        }
    }
    
    # Exibir resultados
    Write-Host ""
    Write-Host "===============================" -ForegroundColor White
    Write-Host "   RESULTADOS DOS TESTES" -ForegroundColor White
    Write-Host "===============================" -ForegroundColor White
    Write-Host ""
    
    Write-Host "Total de testes: $totalTestes" -ForegroundColor White
    Write-Host "Testes passados: $testesPassados" -ForegroundColor $script:CorSucesso
    Write-Host "Testes falhados: $testesFalhados" -ForegroundColor $script:CorErro
    
    $porcentagemSucesso = [math]::Round(($testesPassados / $totalTestes) * 100, 2)
    Write-Host "Taxa de sucesso: $porcentagemSucesso%" -ForegroundColor $(if ($porcentagemSucesso -ge 90) { $script:CorSucesso } elseif ($porcentagemSucesso -ge 70) { $script:CorAviso } else { $script:CorErro })
    
    Write-Log -Message "Teste de funcionalidades concluído. Taxa de sucesso: $porcentagemSucesso%" -Level "INFO"
    $script:Configuracoes.ModoTeste = $false
    
    Write-Host ""
    Read-Host "Pressione Enter para sair..."
}

# --- Funções de Perfil ---

function Get-TORKProfile {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Name
    )
    
    try {
        $perfilPadrao = @{
            Nome = "Padrao"
            Descricao = "Perfil padrão do TORK"
            DataCriacao = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            Configuracoes = $script:ConfiguracoesPadrao.Clone()
        }
        
        # Verificar se é um perfil predefinido
        switch ($Name) {
            "Padrao" {
                return $perfilPadrao
            }
            "Desempenho" {
                $perfil = $perfilPadrao.Clone()
                $perfil.Nome = "Desempenho"
                $perfil.Descricao = "Perfil otimizado para máximo desempenho"
                
                # Configurações específicas para desempenho
                $perfil.Configuracoes.Avancadas.OtimizacaoAgressiva = $true
                $perfil.Configuracoes.Avancadas.DesativarServicosNaoEssenciais = $true
                $perfil.Configuracoes.Avancadas.ModificarRegistroAvancado = $true
                $perfil.Configuracoes.Avancadas.AjustarPlanoEnergia = $true
                $perfil.Configuracoes.Avancadas.OtimizarServicos = $true
                $perfil.Configuracoes.Avancadas.AjustarEfeitosVisuais = $true
                $perfil.Configuracoes.Avancadas.OtimizarInicializacao = $true
                $perfil.Configuracoes.Avancadas.DesativarHibernacao = $true
                $perfil.Configuracoes.Avancadas.DesativarIndexacao = $true
                $perfil.Configuracoes.Avancadas.DesativarSuperfetch = $true
                $perfil.Configuracoes.Avancadas.DesativarWindowsSearch = $true
                $perfil.Configuracoes.Avancadas.DesativarEfeitosVisuais = $true
                $perfil.Configuracoes.Avancadas.DesativarTransparencia = $true
                $perfil.Configuracoes.Avancadas.DesativarAnimacoes = $true
                $perfil.Configuracoes.Avancadas.DesativarSombras = $true
                
                return $perfil
            }
            "Equilibrado" {
                $perfil = $perfilPadrao.Clone()
                $perfil.Nome = "Equilibrado"
                $perfil.Descricao = "Perfil com equilíbrio entre desempenho e usabilidade"
                
                # Configurações específicas para equilíbrio
                $perfil.Configuracoes.Avancadas.OtimizacaoAgressiva = $false
                $perfil.Configuracoes.Avancadas.DesativarServicosNaoEssenciais = $false
                $perfil.Configuracoes.Avancadas.ModificarRegistroAvancado = $false
                $perfil.Configuracoes.Avancadas.AjustarPlanoEnergia = $true
                $perfil.Configuracoes.Avancadas.OtimizarServicos = $true
                $perfil.Configuracoes.Avancadas.AjustarEfeitosVisuais = $false
                $perfil.Configuracoes.Avancadas.OtimizarInicializacao = $true
                $perfil.Configuracoes.Avancadas.DesativarHibernacao = $false
                $perfil.Configuracoes.Avancadas.DesativarIndexacao = $false
                $perfil.Configuracoes.Avancadas.DesativarSuperfetch = $false
                $perfil.Configuracoes.Avancadas.DesativarWindowsSearch = $false
                $perfil.Configuracoes.Avancadas.DesativarEfeitosVisuais = $false
                $perfil.Configuracoes.Avancadas.DesativarTransparencia = $false
                $perfil.Configuracoes.Avancadas.DesativarAnimacoes = $false
                
                return $perfil
            }
            "Economia" {
                $perfil = $perfilPadrao.Clone()
                $perfil.Nome = "Economia"
                $perfil.Descricao = "Perfil otimizado para economia de energia"
                
                # Configurações específicas para economia de energia
                $perfil.Configuracoes.Avancadas.OtimizacaoAgressiva = $false
                $perfil.Configuracoes.Avancadas.DesativarServicosNaoEssenciais = $true
                $perfil.Configuracoes.Avancadas.ModificarRegistroAvancado = $true
                $perfil.Configuracoes.Avancadas.AjustarPlanoEnergia = $true
                $perfil.Configuracoes.Avancadas.OtimizarServicos = $true
                $perfil.Configuracoes.Avancadas.AjustarEfeitosVisuais = $true
                $perfil.Configuracoes.Avancadas.OtimizarInicializacao = $false
                $perfil.Configuracoes.Avancadas.DesativarHibernacao = $false
                $perfil.Configuracoes.Avancadas.DesativarIndexacao = $true
                $perfil.Configuracoes.Avancadas.DesativarSuperfetch = $true
                $perfil.Configuracoes.Avancadas.DesativarWindowsSearch = $true
                $perfil.Configuracoes.Avancadas.DesativarEfeitosVisuais = $true
                $perfil.Configuracoes.Avancadas.DesativarTransparencia = $true
                $perfil.Configuracoes.Avancadas.DesativarAnimacoes = $true
                
                return $perfil
            }
            "Gamer" {
                $perfil = $perfilPadrao.Clone()
                $perfil.Nome = "Gamer"
                $perfil.Descricao = "Perfil otimizado para jogos"
                
                # Configurações específicas para jogos
                $perfil.Configuracoes.Avancadas.OtimizacaoAgressiva = $true
                $perfil.Configuracoes.Avancadas.DesativarServicosNaoEssenciais = $true
                $perfil.Configuracoes.Avancadas.ModificarRegistroAvancado = $true
                $perfil.Configuracoes.Avancadas.AjustarPlanoEnergia = $true
                $perfil.Configuracoes.Avancadas.OtimizarServicos = $true
                $perfil.Configuracoes.Avancadas.AjustarEfeitosVisuais = $true
                $perfil.Configuracoes.Avancadas.OtimizarInicializacao = $true
                $perfil.Configuracoes.Avancadas.DesativarHibernacao = $true
                $perfil.Configuracoes.Avancadas.DesativarIndexacao = $true
                $perfil.Configuracoes.Avancadas.DesativarSuperfetch = $false
                $perfil.Configuracoes.Avancadas.DesativarWindowsSearch = $true
                $perfil.Configuracoes.Avancadas.DesativarEfeitosVisuais = $true
                $perfil.Configuracoes.Avancadas.DesativarTransparencia = $true
                $perfil.Configuracoes.Avancadas.DesativarAnimacoes = $true
                $perfil.Configuracoes.Avancadas.DesativarGameDVR = $true
                $perfil.Configuracoes.Avancadas.DesativarXboxGameBar = $true
                
                return $perfil
            }
            default {
                # Verificar se é um perfil personalizado
                $caminhoPerfilPersonalizado = Join-Path -Path $script:DiretorioPerfis -ChildPath "$Name.json"
                
                if (Test-Path -Path $caminhoPerfilPersonalizado) {
                    $perfilPersonalizado = Get-Content -Path $caminhoPerfilPersonalizado -Raw | ConvertFrom-Json
                    
                    # Converter para hashtable
                    $perfil = @{
                        Nome = $perfilPersonalizado.Nome
                        Descricao = $perfilPersonalizado.Descricao
                        DataCriacao = $perfilPersonalizado.DataCriacao
                        Configuracoes = @{}
                    }
                    
                    foreach ($categoria in $perfilPersonalizado.Configuracoes.PSObject.Properties) {
                        if ($categoria.Value -is [PSCustomObject]) {
                            $subConfig = @{}
                            foreach ($prop in $categoria.Value.PSObject.Properties) {
                                $subConfig[$prop.Name] = $prop.Value
                            }
                            $perfil.Configuracoes[$categoria.Name] = $subConfig
                        }
                        else {
                            $perfil.Configuracoes[$categoria.Name] = $categoria.Value
                        }
                    }
                    
                    return $perfil
                }
                else {
                    # Se não encontrar, retorna o perfil padrão
                    Write-Log -Message "Perfil '$Name' não encontrado. Usando perfil padrão." -Level "WARNING"
                    return $perfilPadrao
                }
            }
        }
    }
    catch {
        Write-Log -Message "Erro ao carregar perfil '$Name': $_" -Level "ERROR"
        return $perfilPadrao
    }
}

function Test-TORKProfile {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Name
    )
    
    try {
        # Verificar se é um perfil predefinido
        if ($Name -in @("Padrao", "Desempenho", "Equilibrado", "Economia", "Gamer")) {
            return $true
        }
        
        # Verificar se é um perfil personalizado
        $caminhoPerfilPersonalizado = Join-Path -Path $script:DiretorioPerfis -ChildPath "$Name.json"
        return (Test-Path -Path $caminhoPerfilPersonalizado)
    }
    catch {
        Write-Log -Message "Erro ao verificar perfil '$Name': $_" -Level "ERROR"
        return $false
    }
}

function Save-TORKProfile {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Name,
        
        [Parameter(Mandatory = $false)]
        [string]$Description = "Perfil personalizado",
        
        [Parameter(Mandatory = $false)]
        [hashtable]$Settings = $null
    )
    
    try {
        # Verificar se é um perfil predefinido
        if ($Name -in @("Padrao", "Desempenho", "Equilibrado", "Economia", "Gamer")) {
            Write-Log -Message "Não é possível sobrescrever perfis predefinidos" -Level "WARNING"
            return $false
        }
        
        # Criar diretório de perfis se não existir
        if (-not (Test-Path -Path $script:DiretorioPerfis)) {
            New-Item -Path $script:DiretorioPerfis -ItemType Directory -Force | Out-Null
        }
        
        # Usar configurações atuais se não forem fornecidas
        if ($null -eq $Settings) {
            $Settings = $script:Configuracoes
        }
        
        # Criar perfil
        $perfil = @{
            Nome = $Name
            Descricao = $Description
            DataCriacao = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            Configuracoes = $Settings
        }
        
        # Salvar perfil
        $caminhoPerfilPersonalizado = Join-Path -Path $script:DiretorioPerfis -ChildPath "$Name.json"
        $perfil | ConvertTo-Json -Depth 10 | Out-File -FilePath $caminhoPerfilPersonalizado -Encoding UTF8
        
        # Adicionar à lista de perfis salvos
        if (-not $script:Configuracoes.Perfil.PerfisSalvos.Contains($Name)) {
            $script:Configuracoes.Perfil.PerfisSalvos += $Name
            Save-TORKConfiguracoes
        }
        
        Write-Log -Message "Perfil '$Name' salvo com sucesso" -Level "SUCCESS"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao salvar perfil '$Name': $_" -Level "ERROR"
        return $false
    }
}

function Remove-TORKProfile {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Name
    )
    
    try {
        # Verificar se é um perfil predefinido
        if ($Name -in @("Padrao", "Desempenho", "Equilibrado", "Economia", "Gamer")) {
            Write-Log -Message "Não é possível remover perfis predefinidos" -Level "WARNING"
            return $false
        }
        
        # Verificar se o perfil existe
        $caminhoPerfilPersonalizado = Join-Path -Path $script:DiretorioPerfis -ChildPath "$Name.json"
        
        if (Test-Path -Path $caminhoPerfilPersonalizado) {
            # Remover arquivo
            Remove-Item -Path $caminhoPerfilPersonalizado -Force
            
            # Remover da lista de perfis salvos
            $script:Configuracoes.Perfil.PerfisSalvos = $script:Configuracoes.Perfil.PerfisSalvos | Where-Object { $_ -ne $Name }
            Save-TORKConfiguracoes
            
            # Se o perfil ativo for o removido, voltar para o padrão
            if ($script:Configuracoes.Perfil.PerfilAtivo -eq $Name) {
                $script:Configuracoes.Perfil.PerfilAtivo = "Padrao"
                $script:PerfilAtivo = Get-TORKProfile -Name "Padrao"
                Save-TORKConfiguracoes
            }
            
            Write-Log -Message "Perfil '$Name' removido com sucesso" -Level "SUCCESS"
            return $true
        }
        else {
            Write-Log -Message "Perfil '$Name' não encontrado" -Level "WARNING"
            return $false
        }
    }
    catch {
        Write-Log -Message "Erro ao remover perfil '$Name': $_" -Level "ERROR"
        return $false
    }
}

function Get-TORKProfileList {
    [CmdletBinding()]
    param()
    
    try {
        # Perfis predefinidos
        $perfisPredefinidos = @("Padrao", "Desempenho", "Equilibrado", "Economia", "Gamer")
        
        # Perfis personalizados
        $perfisPersonalizados = @()
        
        if (Test-Path -Path $script:DiretorioPerfis) {
            $arquivosPerfis = Get-ChildItem -Path $script:DiretorioPerfis -Filter "*.json"
            $perfisPersonalizados = $arquivosPerfis | ForEach-Object { $_.BaseName }
        }
        
        # Combinar listas
        $todosPerfis = $perfisPredefinidos + $perfisPersonalizados
        
        # Atualizar lista de perfis salvos
        $script:Configuracoes.Perfil.PerfisSalvos = $perfisPersonalizados
        Save-TORKConfiguracoes
        
        return $todosPerfis
    }
    catch {
        Write-Log -Message "Erro ao listar perfis: $_" -Level "ERROR"
        return @("Padrao")
    }
}

function Apply-TORKProfile {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Name
    )
    
    try {
        # Verificar se o perfil existe
        if (-not (Test-TORKProfile -Name $Name)) {
            Write-Log -Message "Perfil '$Name' não encontrado" -Level "WARNING"
            return $false
        }
        
        # Carregar perfil
        $perfil = Get-TORKProfile -Name $Name
        
        # Aplicar configurações
        $script:Configuracoes = $perfil.Configuracoes
        $script:Configuracoes.Perfil.PerfilAtivo = $Name
        $script:PerfilAtivo = $perfil
        
        # Salvar configurações
        Save-TORKConfiguracoes
        
        # Aplicar configurações específicas do perfil
        switch ($Name) {
            "Desempenho" {
                # Aplicar configurações de desempenho máximo
                Invoke-PerformanceMode -Silent
            }
            "Equilibrado" {
                # Aplicar configurações equilibradas
                Invoke-BalancedMode -Silent
            }
            "Economia" {
                # Aplicar configurações de economia de energia
                Invoke-PowerSaverMode -Silent
            }
            "Gamer" {
                # Aplicar configurações para jogos
                Invoke-GamerMode -Silent
            }
        }
        
        Write-Log -Message "Perfil '$Name' aplicado com sucesso" -Level "SUCCESS"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao aplicar perfil '$Name': $_" -Level "ERROR"
        return $false
    }
}

# --- Funções de Menu ---

function Show-MainMenu {
    do {
        Clear-Host
        Show-Banner
        
        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor $script:CorTitulo
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""
        
        Write-Host "[1] Otimização Simplificada (Para resultados rápidos e praticidade!)" -ForegroundColor $script:CorSucesso
        Write-Host "[2] Otimização Avançada (Para controle completo e ajustes profundos!)" -ForegroundColor $script:CorDestaque
        Write-Host "[3] Diagnóstico do Sistema (Verificar a saúde do seu computador)" -ForegroundColor $script:CorAviso
        Write-Host "[4] Agendamento de Tarefas (Automatize as otimizações!)" -ForegroundColor Magenta
        Write-Host "[5] Ações Globais (Executar múltiplas otimizações de uma vez!)" -ForegroundColor $script:CorErro
        Write-Host "[6] Gerenciamento de Perfis (Salve e carregue configurações!)" -ForegroundColor Blue
        Write-Host "[7] Configurações do TORK (Personalize o funcionamento do programa)" -ForegroundColor $script:CorInfo
        Write-Host "[8] Sobre o TORK (Informações sobre o programa)" -ForegroundColor $script:CorSecundaria
        Write-Host "[0] Sair (Até a próxima!)" -ForegroundColor $script:CorErro
        
        Write-Host ""
        Write-Host "Perfil Ativo: $($script:Configuracoes.Perfil.PerfilAtivo)" -ForegroundColor $script:CorDestaque
        Write-Host ""
        
        $escolha = Read-Host "Escolha sua opção"
        
        switch ($escolha) {
            "1" { Show-SimplifiedMenu }
            "2" { Show-AdvancedMenu }
            "3" { Show-DiagnosticMenu }
            "4" { Show-ScheduleTaskMenu }
            "5" { Show-GlobalActionsMenu }
            "6" { Show-ProfileManagementMenu }
            "7" { Show-SettingsMenu }
            "8" { Show-AboutTORK }
            "0" { 
                Write-Host "Obrigado por usar o TORK! Volte sempre que seu PC precisar de um impulso! ;)" -ForegroundColor $script:CorSucesso
                Write-Log -Message "Programa encerrado pelo usuário" -Level "INFO"
                Start-Sleep -Seconds 2
                break 
            }
            default {
                Write-Host "Ops! Opção inválida! Verifique os números e tente novamente!" -ForegroundColor $script:CorErro
                Start-Sleep -Seconds 1
            }
        }
    } while ($escolha -ne '0')
}

function Show-SimplifiedMenu {
    do {
        Clear-Host
        Show-Banner
        
        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZAÇÃO SIMPLIFICADA" -ForegroundColor $script:CorTitulo
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""
        
        Write-Host "[1] Limpeza Geral do Sistema (Remove arquivos desnecessários!)" -ForegroundColor $script:CorSucesso
        Write-Host "[2] Otimização de Memória e Inicialização (Torna tudo mais rápido!)" -ForegroundColor $script:CorAviso
        Write-Host "[3] Aceleração da Conexão com a Internet (Navegue sem gargalos!)" -ForegroundColor $script:CorDestaque
        Write-Host "[4] Windows Visualmente Leve (Desativa efeitos para melhor desempenho!)" -ForegroundColor $script:CorInfo
        Write-Host "[5] Otimização de Jogos (Melhora o desempenho em jogos!)" -ForegroundColor Magenta
        Write-Host "[6] Otimização de Privacidade (Proteja seus dados!)" -ForegroundColor Blue
        Write-Host "[7] Otimização de Segurança (Proteja seu sistema!)" -ForegroundColor $script:CorErro
        Write-Host "[8] Otimização de Bateria (Para notebooks e laptops!)" -ForegroundColor DarkYellow
        Write-Host "[9] Otimização de Armazenamento (Libere espaço em disco!)" -ForegroundColor DarkCyan
        Write-Host "[10] EXECUTAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor $script:CorErro
        Write-Host "[0] Voltar ao Menu Principal" -ForegroundColor $script:CorSecundaria
        
        Write-Host ""
        
        $escolha = Read-Host "Escolha sua opção de otimização simplificada"
        
        switch ($escolha) {
            "1" { Show-SimplifiedCleanupMenu }
            "2" { Show-SimplifiedMemoryStartupMenu }
            "3" { Show-SimplifiedInternetMenu }
            "4" { Show-SimplifiedVisualMenu }
            "5" { Show-SimplifiedGamingMenu }
            "6" { Show-SimplifiedPrivacyMenu }
            "7" { Show-SimplifiedSecurityMenu }
            "8" { Show-SimplifiedBatteryMenu }
            "9" { Show-SimplifiedStorageMenu }
            "10" { Invoke-EasyTurboMode }
            "0" { break }
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Verifique os números e tente novamente!" -ForegroundColor $script:CorErro
                Start-Sleep -Seconds 1
            }
        }
    } while ($escolha -ne '0')
}

function Show-AdvancedMenu {
    do {
        Clear-Host
        Show-Banner
        
        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANÇADO" -ForegroundColor $script:CorTitulo
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""
        
        Write-Host "[1] Limpeza e Manutenção de Arquivos" -ForegroundColor $script:CorDestaque
        Write-Host "[2] Otimizações de Desempenho do Sistema" -ForegroundColor $script:CorSucesso
        Write-Host "[3] Configurações e Otimizações de Rede" -ForegroundColor $script:CorAviso
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows" -ForegroundColor $script:CorInfo
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação" -ForegroundColor $script:CorDestaque
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows" -ForegroundColor $script:CorSucesso
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado" -ForegroundColor $script:CorAviso
        Write-Host "[8] Gerenciamento de Contas de Usuário" -ForegroundColor $script:CorInfo
        Write-Host "[9] Otimizações de Registro do Windows" -ForegroundColor Magenta
        Write-Host "[10] Configurações de Energia e Bateria" -ForegroundColor Blue
        Write-Host "[11] Segurança e Proteção do Sistema" -ForegroundColor $script:CorErro
        Write-Host "[12] Otimizações de Hardware" -ForegroundColor DarkYellow
        Write-Host "[13] Gerenciamento de Drivers" -ForegroundColor DarkCyan
        Write-Host "[14] Otimizações de Software" -ForegroundColor DarkGreen
        Write-Host "[15] Outras Configurações e Ajustes Diversos" -ForegroundColor $script:CorSecundaria
        Write-Host "[0] Voltar ao Menu Principal" -ForegroundColor $script:CorErro
        
        Write-Host ""
        
        $escolha = Read-Host "Escolha sua área de otimização avançada"
        
        switch ($escolha) {
            "1" { Show-CleanupMaintenanceMenu }
            "2" { Show-PerformanceOptimizationsMenu }
            "3" { Show-NetworkConfigurationsMenu }
            "4" { Show-ServicesManagementMenu }
            "5" { Show-DiagnosticToolsMenu }
            "6" { Show-WindowsFeaturesMenu }
            "7" { Show-AdvancedFileManagementMenu }
            "8" { Show-UserAccountManagementMenu }
            "9" { Show-RegistryOptimizationsMenu }
            "10" { Show-PowerBatterySettingsMenu }
            "11" { Show-SecurityProtectionMenu }
            "12" { Show-HardwareOptimizationsMenu }
            "13" { Show-DriversManagementMenu }
            "14" { Show-SoftwareOptimizationsMenu }
            "15" { Show-MiscellaneousSettingsMenu }
            "0" { break }
            default {
                Write-Host "Hmm, essa área de otimização não existe ou você digitou errado! Tente novamente!" -ForegroundColor $script:CorErro
                Start-Sleep -Seconds 1
            }
        }
    } while ($escolha -ne '0')
}

function Show-DiagnosticMenu {
    do {
        Clear-Host
        Show-Banner
        
        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   DIAGNÓSTICO DO SISTEMA" -ForegroundColor $script:CorTitulo
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""
        
        Write-Host "[1] Diagnóstico Rápido (Verificação básica do sistema)" -ForegroundColor $script:CorSucesso
        Write-Host "[2] Diagnóstico Completo (Análise detalhada do sistema)" -ForegroundColor $script:CorAviso
        Write-Host "[3] Verificação de Saúde do Disco" -ForegroundColor $script:CorDestaque
        Write-Host "[4] Verificação de Integridade do Sistema" -ForegroundColor $script:CorInfo
        Write-Host "[5] Análise de Desempenho" -ForegroundColor Magenta
        Write-Host "[6] Verificação de Segurança" -ForegroundColor $script:CorErro
        Write-Host "[7] Verificação de Drivers" -ForegroundColor Blue
        Write-Host "[8] Análise de Inicialização" -ForegroundColor DarkYellow
        Write-Host "[9] Verificação de Rede" -ForegroundColor DarkCyan
        Write-Host "[10] Gerar Relatório Completo" -ForegroundColor DarkGreen
        Write-Host "[11] Monitoramento em Tempo Real" -ForegroundColor $script:CorDestaque
        Write-Host "[12] Histórico de Diagnósticos" -ForegroundColor $script:CorSecundaria
        Write-Host "[0] Voltar ao Menu Principal" -ForegroundColor $script:CorSecundaria
        
        Write-Host ""
        
        $escolha = Read-Host "Escolha sua opção de diagnóstico"
        
        switch ($escolha) {
            "1" { Invoke-QuickDiagnostic }
            "2" { Invoke-CompleteDiagnostic }
            "3" { Invoke-DiskHealthCheck }
            "4" { Invoke-SystemIntegrityCheck }
            "5" { Invoke-PerformanceAnalysis }
            "6" { Invoke-SecurityCheck }
            "7" { Invoke-DriversCheck }
            "8" { Invoke-StartupAnalysis }
            "9" { Invoke-NetworkCheck }
            "10" { Invoke-GenerateCompleteReport }
            "11" { Invoke-RealTimeMonitoring }
            "12" { Show-DiagnosticHistory }
            "0" { break }
            default {
                Write-Host "Opção inválida! Verifique os números e tente novamente!" -ForegroundColor $script:CorErro
                Start-Sleep -Seconds 1
            }
        }
    } while ($escolha -ne '0')
}

function Show-ScheduleTaskMenu {
    do {
        Clear-Host
        Show-Banner
        
        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   AGENDAMENTO DE TAREFAS" -ForegroundColor $script:CorTitulo
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""
        
        Write-Host "[1] Agendar Limpeza Automática" -ForegroundColor $script:CorSucesso
        Write-Host "[2] Agendar Otimização Completa" -ForegroundColor $script:CorAviso
        Write-Host "[3] Agendar Verificação de Segurança" -ForegroundColor $script:CorErro
        Write-Host "[4] Agendar Desfragmentação de Disco" -ForegroundColor $script:CorDestaque
        Write-Host "[5] Agendar Backup do Sistema" -ForegroundColor Magenta
        Write-Host "[6] Visualizar Tarefas Agendadas" -ForegroundColor $script:CorInfo
        Write-Host "[7] Remover Tarefas Agendadas" -ForegroundColor DarkYellow
        Write-Host "[8] Configurações de Agendamento" -ForegroundColor Blue
        Write-Host "[9] Criar Agendamento Personalizado" -ForegroundColor DarkCyan
        Write-Host "[10] Importar/Exportar Agendamentos" -ForegroundColor DarkGreen
        Write-Host "[0] Voltar ao Menu Principal" -ForegroundColor $script:CorSecundaria
        
        Write-Host ""
        
        $escolha = Read-Host "Escolha sua opção de agendamento"
        
        switch ($escolha) {
            "1" { Invoke-ScheduleAutomaticCleanup }
            "2" { Invoke-ScheduleCompleteOptimization }
            "3" { Invoke-ScheduleSecurityCheck }
            "4" { Invoke-ScheduleDiskDefragmentation }
            "5" { Invoke-ScheduleSystemBackup }
            "6" { Invoke-ViewScheduledTasks }
            "7" { Invoke-RemoveScheduledTasks }
            "8" { Invoke-ScheduleSettings }
            "9" { Invoke-CreateCustomSchedule }
            "10" { Invoke-ImportExportSchedules }
            "0" { break }
            default {
                Write-Host "Opção inválida! Verifique os números e tente novamente!" -ForegroundColor $
### Refatoração do TORK PowerShell Optimizer

Vou refatorar o script TORK PowerShell Optimizer para transformá-lo em uma aplicação pronta para produção, com foco especial nas áreas identificadas como deficientes e na implementação de mecanismos abrangentes de feedback ao usuário.

```powershell file="TORK-Otimizador.ps1"
<#
.SYNOPSIS
    TORK - Otimizador de Sistema para Windows
    Versão 4.0 - Produção

.DESCRIPTION
    Ferramenta abrangente de manutenção e otimização do sistema Windows.
    Inclui funcionalidades para limpeza, otimização de desempenho, diagnóstico,
    gerenciamento de perfis e agendamento de tarefas.

.NOTES
    Nome: TORK-Otimizador.ps1
    Autor: Equipe TORK
    Versão: 4.0
    Data de Criação: 28/04/2024
    Codificação: UTF-8 com BOM
    Requisitos: Windows 10/11, PowerShell 5.1 ou superior, Privilégios de Administrador
#>

#Requires -Version 5.1
#Requires -RunAsAdministrator

# --- Configuração Inicial ---
[CmdletBinding()]
param (
    [switch]$SilentMode,
    [switch]$LimpezaRapida,
    [switch]$LimpezaCompleta,
    [switch]$OtimizacaoRapida,
    [switch]$OtimizacaoCompleta,
    [switch]$RestaurarPadrao,
    [switch]$TestarFuncionalidades,
    [switch]$AjudaComandos,
    [string]$PerfilConfiguracao,
    [switch]$AtualizarScript,
    [switch]$VerificarAtualizacoes,
    [switch]$DiagnosticoRapido,
    [switch]$DiagnosticoCompleto,
    [switch]$CriarAgendamento,
    [switch]$ModoDesempenhoMaximo,
    [switch]$ModoEquilibrado,
    [switch]$ModoEconomiaEnergia,
    [switch]$ModoGamer
)

# --- Definições Globais ---
$script:VersaoAtual = "4.0"
$script:DataVersao = "28/04/2024"
$script:RepositorioGitHub = "https://github.com/tork-optimizer/tork"
$script:ArquivoConfiguracao = "$env:USERPROFILE\Documents\TORK\config.json"
$script:DiretorioBase = "$env:USERPROFILE\Documents\TORK"
$script:DiretorioBackup = "$DiretorioBase\Backup"
$script:DiretorioLog = "$DiretorioBase\Logs"
$script:DiretorioPerfis = "$DiretorioBase\Perfis"
$script:DiretorioRelatorios = "$DiretorioBase\Relatorios"
$script:ArquivoLog = "$DiretorioLog\TORK_Log_$(Get-Date -Format 'yyyyMMdd').txt"
$script:ArquivoHistorico = "$DiretorioLog\TORK_Historico.csv"
$script:ArquivoUltimaExecucao = "$DiretorioLog\TORK_UltimaExecucao.json"

# --- Definição de Cores ---
$script:CorTitulo = "Cyan"
$script:CorDestaque = "Yellow"
$script:CorSucesso = "Green"
$script:CorAviso = "Yellow"
$script:CorErro = "Red"
$script:CorInfo = "White"
$script:CorComando = "DarkGray"
$script:CorSecundaria = "Gray"
$script:CorBorda = "DarkCyan"
$script:CorLogo = "Green"
$script:CorVersao = "Yellow"
$script:CorCopyright = "Gray"

# --- Definição de Preferências de Erro ---
$ErrorActionPreference = 'SilentlyContinue'
$ProgressPreference = 'Continue'

# --- Configurações Padrão ---
$script:ConfiguracoesPadrao = @{
    Geral = @{
        CriarPontoRestauracao = $true
        ModoSilencioso = $false
        LogAtivado = $true
        TemaAtual = "Padrao"  # Padrao, Escuro, Claro, Colorido
        ConfirmarAcoes = $true
        MostrarTempoExecucao = $true
        NivelDetalhes = "Normal"  # Minimo, Normal, Detalhado
        FecharAutomaticamente = $false
        TempoEspera = 2  # segundos
        BackupConfiguracoes = $true
        IdiomaAtual = "pt-BR"
        ModoTeste = $false
        VerificarAtualizacoesAutomaticamente = $true
        IntervaloVerificacaoAtualizacoes = 7 # dias
        ExibirDicasInicio = $true
    }
    Perfil = @{
        PerfilAtivo = "Padrao"  # Padrao, Desempenho, Equilibrado, Economia, Gamer, Personalizado
        PerfisSalvos = @()
        UltimoPerfilUsado = "Padrao"
    }
    Avancadas = @{
        OtimizacaoAgressiva = $false
        DesativarServicosNaoEssenciais = $false
        ModificarRegistroAvancado = $false
        PermitirReinicializacaoAutomatica = $false
        MonitorarDesempenho = $true
        NotificarMudancas = $true
        PermitirAtualizacaoAutomatica = $true
        VerificarCompatibilidade = $true
        LimparCacheNavegadores = $true
        OtimizarRegistro = $true
        DesfragmentarDiscos = $true
        AjustarPlanoEnergia = $true
        OtimizarServicos = $true
        AjustarEfeitosVisuais = $true
        LimparArquivosTemporarios = $true
        OtimizarRede = $true
        AjustarPrioridadeProcessos = $true
        DesativarTelemetria = $true
        OtimizarInicializacao = $true
        UsarDNSAlternativo = $false
        DNSPrimario = "8.8.8.8"
        DNSSecundario = "8.8.4.4"
        DesativarHibernacao = $false
        DesativarIndexacao = $false
        DesativarSuperfetch = $false
        DesativarDefrag = $false
        DesativarWindowsSearch = $false
        DesativarOneDrive = $false
        DesativarCortana = $false
        DesativarGameDVR = $false
        DesativarXboxGameBar = $false
        DesativarAtualizacoesAutomaticas = $false
        DesativarEfeitosVisuais = $false
        DesativarTransparencia = $false
        DesativarAnimacoes = $false
        DesativarSombras = $false
        DesativarMiniaturas = $false
        DesativarAeroShake = $false
        DesativarAeroSnap = $false
        DesativarAeroPeek = $false
    }
    Agendamento = @{
        TarefasAgendadas = @()
        UltimaTarefaAgendada = $null
        IntervaloLimpezaAutomatica = 7 # dias
        IntervaloOtimizacaoAutomatica = 14 # dias
        IntervaloVerificacaoSeguranca = 7 # dias
        IntervaloDesfragmentacao = 30 # dias
        IntervaloBackup = 14 # dias
        HorarioExecucao = "03:00"
        DiasExecucao = @("Segunda", "Quarta", "Sexta")
        ExecutarAoIniciar = $false
        ExecutarAoFinalizar = $false
        NotificarExecucao = $true
        ExecutarEmSegundoPlano = $true
    }
    Diagnostico = @{
        MonitorarCPU = $true
        MonitorarMemoria = $true
        MonitorarDisco = $true
        MonitorarRede = $true
        MonitorarTemperatura = $true
        MonitorarBateria = $true
        MonitorarGPU = $true
        IntervaloMonitoramento = 5 # segundos
        SalvarRelatorios = $true
        DiretorioRelatorios = "$env:USERPROFILE\Documents\TORK\Relatorios"
        EnviarNotificacoes = $true
        LimiarCPU = 90 # porcentagem
        LimiarMemoria = 90 # porcentagem
        LimiarDisco = 90 # porcentagem
        LimiarRede = 90 # porcentagem
        LimiarTemperatura = 80 # graus Celsius
        LimiarBateria = 20 # porcentagem
        LimiarGPU = 90 # porcentagem
    }
    Seguranca = @{
        VerificarVirus = $true
        VerificarFirewall = $true
        VerificarAtualizacoes = $true
        VerificarPermissoes = $true
        VerificarSenhas = $true
        VerificarBackups = $true
        VerificarCriptografia = $true
        VerificarVPN = $true
        VerificarAntivirus = $true
        VerificarSpyware = $true
        VerificarMalware = $true
        VerificarRansomware = $true
        VerificarPhishing = $true
        VerificarBotnet = $true
        VerificarRootkit = $true
        VerificarKeylogger = $true
        VerificarTrojan = $true
        VerificarWorm = $true
        VerificarAdware = $true
        VerificarPUP = $true
    }
}

# --- Variáveis Globais ---
$script:Configuracoes = $null
$script:PerfilAtivo = $null
$script:UltimaExecucao = $null
$script:Historico = @()
$script:TarefasAgendadas = @()
$script:MonitoramentoAtivo = $false
$script:DadosMonitoramento = @()
$script:RelatorioAtual = @{}
$script:PerfisSalvos = @{}
$script:ResultadosDiagnostico = @{}
$script:UltimaVerificacaoAtualizacao = $null
$script:AtualizacaoDisponivel = $false
$script:NovaVersao = $null
$script:MensagemAtualizacao = $null
$script:OperacoesRealizadas = @()
$script:TempoInicio = $null
$script:TempoFim = $null
$script:TempoTotal = $null
$script:PontoRestauracaoCriado = $false
$script:BackupRealizado = $false
$script:ModoDebug = $false

# --- Funções de Inicialização ---

function Initialize-TORK {
    [CmdletBinding()]
    param()

    try {
        # Criar estrutura de diretórios
        $diretorios = @(
            $script:DiretorioBase,
            $script:DiretorioBackup,
            $script:DiretorioLog,
            $script:DiretorioPerfis,
            $script:DiretorioRelatorios
        )

        foreach ($dir in $diretorios) {
            if (-not (Test-Path -Path $dir)) {
                New-Item -Path $dir -ItemType Directory -Force | Out-Null
                Write-Debug "Diretório criado: $dir"
            }
        }

        # Carregar configurações
        $script:Configuracoes = Get-TORKConfiguracoes

        # Verificar privilégios de administrador
        if (-not (Test-AdminPrivileges)) {
            Show-AdminWarning
            Exit
        }

        # Registrar início da execução
        $script:TempoInicio = Get-Date
        Register-TORKExecution

        # Verificar atualizações se configurado
        if ($script:Configuracoes.Geral.VerificarAtualizacoesAutomaticamente -and -not $SilentMode) {
            Test-TORKUpdates
        }

        # Criar ponto de restauração se configurado
        if ($script:Configuracoes.Geral.CriarPontoRestauracao -and -not $SilentMode) {
            New-TORKRestorePoint
        }

        # Aplicar tema
        Set-TORKTheme -Theme $script:Configuracoes.Geral.TemaAtual

        # Carregar perfil ativo
        $script:PerfilAtivo = Get-TORKProfile -Name $script:Configuracoes.Perfil.PerfilAtivo

        # Inicializar histórico
        Initialize-TORKHistory

        # Verificar compatibilidade
        if ($script:Configuracoes.Avancadas.VerificarCompatibilidade) {
            Test-TORKCompatibility | Out-Null
        }

        # Processar parâmetros de linha de comando
        Process-CommandLineParameters

        Write-Log -Message "TORK inicializado com sucesso. Versão: $script:VersaoAtual" -Level "INFO"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao inicializar TORK: $_" -Level "ERROR"
        return $false
    }
}

function Get-TORKConfiguracoes {
    [CmdletBinding()]
    param()

    try {
        if (Test-Path -Path $script:ArquivoConfiguracao) {
            $configuracoesCarregadas = Get-Content -Path $script:ArquivoConfiguracao -Raw | ConvertFrom-Json
            
            # Converter para hashtable
            $configuracoes = @{}
            foreach ($propriedade in $configuracoesCarregadas.PSObject.Properties) {
                if ($propriedade.Value -is [PSCustomObject]) {
                    $subConfig = @{}
                    foreach ($subProp in $propriedade.Value.PSObject.Properties) {
                        $subConfig[$subProp.Name] = $subProp.Value
                    }
                    $configuracoes[$propriedade.Name] = $subConfig
                }
                else {
                    $configuracoes[$propriedade.Name] = $propriedade.Value
                }
            }
            
            # Verificar se há propriedades faltando e adicionar as padrão
            foreach ($categoria in $script:ConfiguracoesPadrao.Keys) {
                if (-not $configuracoes.ContainsKey($categoria)) {
                    $configuracoes[$categoria] = $script:ConfiguracoesPadrao[$categoria]
                }
                else {
                    foreach ($prop in $script:ConfiguracoesPadrao[$categoria].Keys) {
                        if (-not $configuracoes[$categoria].ContainsKey($prop)) {
                            $configuracoes[$categoria][$prop] = $script:ConfiguracoesPadrao[$categoria][$prop]
                        }
                    }
                }
            }
            
            Write-Log -Message "Configurações carregadas com sucesso" -Level "INFO"
            return $configuracoes
        }
        else {
            # Se o arquivo não existir, criar com as configurações padrão
            $script:ConfiguracoesPadrao | ConvertTo-Json -Depth 10 | Out-File -FilePath $script:ArquivoConfiguracao -Encoding UTF8
            Write-Log -Message "Arquivo de configurações criado com valores padrão" -Level "INFO"
            return $script:ConfiguracoesPadrao
        }
    }
    catch {
        Write-Log -Message "Erro ao carregar configurações: $_" -Level "ERROR"
        return $script:ConfiguracoesPadrao
    }
}

function Save-TORKConfiguracoes {
    [CmdletBinding()]
    param()

    try {
        # Criar diretório se não existir
        $diretorio = Split-Path -Path $script:ArquivoConfiguracao -Parent
        if (-not (Test-Path -Path $diretorio)) {
            New-Item -Path $diretorio -ItemType Directory -Force | Out-Null
        }

        # Salvar configurações
        $script:Configuracoes | ConvertTo-Json -Depth 10 | Out-File -FilePath $script:ArquivoConfiguracao -Encoding UTF8
        Write-Log -Message "Configurações salvas com sucesso" -Level "INFO"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao salvar configurações: $_" -Level "ERROR"
        return $false
    }
}

function Test-AdminPrivileges {
    [CmdletBinding()]
    param()

    $identity = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal $identity
    return $principal.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}

function Show-AdminWarning {
    Clear-Host
    Write-Host "╔════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║                              ATENÇÃO!                                      ║" -ForegroundColor $script:CorErro
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  Para usar o TORK, são necessários privilégios de Administrador!           ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  Feche esta janela, clique com o botão direito no arquivo do script        ║" -ForegroundColor $script:CorBorda
    Write-Host "║  e escolha 'Executar como administrador'.                                  ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "╚════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $script:CorBorda
    Write-Host ""
    Read-Host "Pressione Enter para sair..."
}

function Register-TORKExecution {
    [CmdletBinding()]
    param()

    try {
        $dataExecucao = Get-Date
        $infoSistema = Get-SystemInfo
        
        $execucao = @{
            DataHora = $dataExecucao.ToString("yyyy-MM-dd HH:mm:ss")
            Versao = $script:VersaoAtual
            Usuario = $env:USERNAME
            Computador = $env:COMPUTERNAME
            SistemaOperacional = $infoSistema.SistemaOperacional
            Arquitetura = $infoSistema.Arquitetura
            PerfilAtivo = $script:Configuracoes.Perfil.PerfilAtivo
            ModoSilencioso = $script:Configuracoes.Geral.ModoSilencioso
            ParametrosLinha = $MyInvocation.BoundParameters.Keys -join ','
        }
        
        # Salvar informações da última execução
        $execucao | ConvertTo-Json -Depth 5 | Out-File -FilePath $script:ArquivoUltimaExecucao -Encoding UTF8
        
        # Adicionar ao histórico
        $historico = @()
        if (Test-Path -Path $script:ArquivoHistorico) {
            $historico = Import-Csv -Path $script:ArquivoHistorico -Delimiter ";" -Encoding UTF8
        }
        
        $novaLinha = [PSCustomObject]@{
            DataHora = $execucao.DataHora
            Versao = $execucao.Versao
            Usuario = $execucao.Usuario
            Computador = $execucao.Computador
            SistemaOperacional = $execucao.SistemaOperacional
            PerfilAtivo = $execucao.PerfilAtivo
            ModoSilencioso = $execucao.ModoSilencioso
            ParametrosLinha = $execucao.ParametrosLinha
        }
        
        $historico += $novaLinha
        
        # Manter apenas as últimas 100 execuções
        if ($historico.Count -gt 100) {
            $historico = $historico | Select-Object -Last 100
        }
        
        $historico | Export-Csv -Path $script:ArquivoHistorico -Delimiter ";" -Encoding UTF8 -NoTypeInformation
        
        Write-Log -Message "Execução registrada com sucesso" -Level "INFO"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao registrar execução: $_" -Level "ERROR"
        return $false
    }
}

function Initialize-TORKHistory {
    [CmdletBinding()]
    param()

    try {
        if (Test-Path -Path $script:ArquivoHistorico) {
            $script:Historico = Import-Csv -Path $script:ArquivoHistorico -Delimiter ";" -Encoding UTF8
        }
        else {
            $script:Historico = @()
        }
        
        if (Test-Path -Path $script:ArquivoUltimaExecucao) {
            $script:UltimaExecucao = Get-Content -Path $script:ArquivoUltimaExecucao -Raw | ConvertFrom-Json
        }
        else {
            $script:UltimaExecucao = $null
        }
        
        Write-Log -Message "Histórico inicializado com sucesso" -Level "INFO"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao inicializar histórico: $_" -Level "ERROR"
        return $false
    }
}

function Process-CommandLineParameters {
    [CmdletBinding()]
    param()

    try {
        # Processar parâmetros de linha de comando
        if ($SilentMode) {
            $script:Configuracoes.Geral.ModoSilencioso = $true
            Write-Log -Message "Modo silencioso ativado via parâmetro de linha de comando" -Level "INFO"
        }
        
        if ($AjudaComandos) {
            Show-CommandHelp
            Exit
        }
        
        if ($TestarFuncionalidades) {
            Test-TORKFunctionality
            Exit
        }
        
        if ($VerificarAtualizacoes) {
            Test-TORKUpdates -Force
            if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                Show-UpdateStatus
                Read-Host "Pressione Enter para continuar..."
            }
        }
        
        if ($AtualizarScript) {
            Update-TORKScript
            Exit
        }
        
        if ($RestaurarPadrao) {
            Reset-TORKSettings
            Write-Host "Configurações restauradas para o padrão." -ForegroundColor $script:CorSucesso
            Start-Sleep -Seconds 2
        }
        
        if ($PerfilConfiguracao) {
            $perfilExiste = Test-TORKProfile -Name $PerfilConfiguracao
            
            if ($perfilExiste) {
                $script:PerfilAtivo = Get-TORKProfile -Name $PerfilConfiguracao
                $script:Configuracoes.Perfil.PerfilAtivo = $PerfilConfiguracao
                Save-TORKConfiguracoes
                Write-Log -Message "Perfil de configuração carregado: $PerfilConfiguracao" -Level "INFO"
                
                if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                    Write-Host "Perfil de configuração carregado: $PerfilConfiguracao" -ForegroundColor $script:CorSucesso
                    Start-Sleep -Seconds 2
                }
            }
            else {
                Write-Log -Message "Perfil de configuração não encontrado: $PerfilConfiguracao" -Level "WARNING"
                
                if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                    Write-Host "Perfil de configuração não encontrado: $PerfilConfiguracao" -ForegroundColor $script:CorAviso
                    Write-Host "Usando configurações padrão." -ForegroundColor $script:CorAviso
                    Start-Sleep -Seconds 2
                }
            }
        }
        
        # Executar ações específicas
        if ($LimpezaRapida) {
            Invoke-QuickCleanup
            Exit
        }
        
        if ($LimpezaCompleta) {
            Invoke-CompleteCleanup
            Exit
        }
        
        if ($OtimizacaoRapida) {
            Invoke-QuickOptimization
            Exit
        }
        
        if ($OtimizacaoCompleta) {
            Invoke-CompleteOptimization
            Exit
        }
        
        if ($DiagnosticoRapido) {
            Invoke-QuickDiagnostic
            Exit
        }
        
        if ($DiagnosticoCompleto) {
            Invoke-CompleteDiagnostic
            Exit
        }
        
        if ($CriarAgendamento) {
            Show-ScheduleTaskMenu
            Exit
        }
        
        if ($ModoDesempenhoMaximo) {
            Invoke-PerformanceMode
            Exit
        }
        
        if ($ModoEquilibrado) {
            Invoke-BalancedMode
            Exit
        }
        
        if ($ModoEconomiaEnergia) {
            Invoke-PowerSaverMode
            Exit
        }
        
        if ($ModoGamer) {
            Invoke-GamerMode
            Exit
        }
        
        Write-Log -Message "Parâmetros de linha de comando processados com sucesso" -Level "INFO"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao processar parâmetros de linha de comando: $_" -Level "ERROR"
        return $false
    }
}

function Set-TORKTheme {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false)]
        [ValidateSet("Padrao", "Escuro", "Claro", "Colorido")]
        [string]$Theme = "Padrao"
    )

    try {
        switch ($Theme) {
            "Padrao" {
                $script:CorTitulo = "Cyan"
                $script:CorDestaque = "Yellow"
                $script:CorSucesso = "Green"
                $script:CorAviso = "Yellow"
                $script:CorErro = "Red"
                $script:CorInfo = "White"
                $script:CorComando = "DarkGray"
                $script:CorSecundaria = "Gray"
                $script:CorBorda = "DarkCyan"
                $script:CorLogo = "Green"
                $script:CorVersao = "Yellow"
                $script:CorCopyright = "Gray"
            }
            "Escuro" {
                $script:CorTitulo = "DarkCyan"
                $script:CorDestaque = "DarkYellow"
                $script:CorSucesso = "DarkGreen"
                $script:CorAviso = "DarkYellow"
                $script:CorErro = "DarkRed"
                $script:CorInfo = "Gray"
                $script:CorComando = "DarkGray"
                $script:CorSecundaria = "DarkGray"
                $script:CorBorda = "DarkBlue"
                $script:CorLogo = "DarkGreen"
                $script:CorVersao = "DarkYellow"
                $script:CorCopyright = "DarkGray"
            }
            "Claro" {
                $script:CorTitulo = "Blue"
                $script:CorDestaque = "Magenta"
                $script:CorSucesso = "Green"
                $script:CorAviso = "Yellow"
                $script:CorErro = "Red"
                $script:CorInfo = "Black"
                $script:CorComando = "Gray"
                $script:CorSecundaria = "DarkGray"
                $script:CorBorda = "Blue"
                $script:CorLogo = "Green"
                $script:CorVersao = "Magenta"
                $script:CorCopyright = "Gray"
            }
            "Colorido" {
                $script:CorTitulo = "Magenta"
                $script:CorDestaque = "Cyan"
                $script:CorSucesso = "Green"
                $script:CorAviso = "Yellow"
                $script:CorErro = "Red"
                $script:CorInfo = "White"
                $script:CorComando = "Blue"
                $script:CorSecundaria = "DarkCyan"
                $script:CorBorda = "Magenta"
                $script:CorLogo = "Cyan"
                $script:CorVersao = "Yellow"
                $script:CorCopyright = "DarkMagenta"
            }
        }
        
        Write-Log -Message "Tema '$Theme' aplicado com sucesso" -Level "INFO"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao aplicar tema: $_" -Level "ERROR"
        return $false
    }
}

# --- Funções de Utilidade ---

function Write-Log {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Message,
        
        [Parameter(Mandatory = $false)]
        [ValidateSet("INFO", "WARNING", "ERROR", "SUCCESS", "DEBUG")]
        [string]$Level = "INFO"
    )

    try {
        if ($script:Configuracoes.Geral.LogAtivado) {
            $dataHora = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            $logEntry = "[$dataHora] [$Level] $Message"
            
            # Criar diretório de log se não existir
            $diretorioLog = Split-Path -Path $script:ArquivoLog -Parent
            if (-not (Test-Path -Path $diretorioLog)) {
                New-Item -Path $diretorioLog -ItemType Directory -Force | Out-Null
            }
            
            Add-Content -Path $script:ArquivoLog -Value $logEntry -ErrorAction Stop
            
            # Exibir mensagens de debug se modo debug estiver ativado
            if ($script:ModoDebug -and $Level -eq "DEBUG") {
                Write-Host "[DEBUG] $Message" -ForegroundColor DarkGray
            }
        }
    }
    catch {
        if (-not $script:Configuracoes.Geral.ModoSilencioso) {
            Write-Host "Erro ao escrever no arquivo de log: $_" -ForegroundColor $script:CorErro
        }
    }
}

function Show-Banner {
    Clear-Host
    
    Write-Host ""
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $script:CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $script:CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $script:CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $script:CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $script:CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $script:CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $script:CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $script:CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $script:CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $script:CorTitulo
    Write-Host "                    ║        Automação, limpeza, manutenção e ajustes avançados                             ║" -ForegroundColor $script:CorTitulo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $script:CorBorda
    Write-Host "                    ║            Versão $script:VersaoAtual - 500+ Funcionalidades                                   ║" -ForegroundColor $script:CorVersao
    Write-Host "                    ║            (C) 2024 TORK - Todos os direitos reservados                               ║" -ForegroundColor $script:CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $script:CorBorda
    
    # Exibir informações adicionais
    if ($script:AtualizacaoDisponivel) {
        Write-Host ""
        Write-Host " [!] Nova versão disponível: $script:NovaVersao (Atual: $script:VersaoAtual)" -ForegroundColor $script:CorDestaque
        Write-Host "     Use a opção 'Verificar Atualizações' no menu de configurações para atualizar." -ForegroundColor $script:CorSecundaria
    }
    
    if ($script:Configuracoes.Geral.ExibirDicasInicio) {
        Write-Host ""
        Show-RandomTip
    }
    
    Write-Host ""
}

function Show-RandomTip {
    $dicas = @(
        "Sabia que o TORK pode ser executado via linha de comando? Use o parâmetro -AjudaComandos para mais informações.",
        "Crie pontos de restauração antes de fazer alterações significativas no sistema.",
        "O perfil 'Gamer' otimiza seu sistema para jogos, priorizando recursos para aplicativos em primeiro plano.",
        "Use o diagnóstico completo regularmente para identificar problemas potenciais no seu sistema.",
        "Agende tarefas de manutenção para manter seu sistema sempre otimizado.",
        "Limpe arquivos temporários regularmente para liberar espaço em disco.",
        "O TORK pode ser personalizado através do menu de configurações.",
        "Salve suas configurações preferidas como um perfil para uso futuro.",
        "Use o modo silencioso para executar o TORK em segundo plano.",
        "Verifique o log para obter informações detalhadas sobre as operações realizadas."
    )
    
    $dicaAleatoria = $dicas | Get-Random
    Write-Host " [DICA] $dicaAleatoria" -ForegroundColor $script:CorSecundaria
}

function Center-Text {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Text,
        
        [Parameter(Mandatory = $false)]
        [System.ConsoleColor]$Color = "White"
    )
    
    $width = [console]::WindowWidth
    $spaces = [Math]::Max(0, [Math]::Floor(($width - $Text.Length) / 2))
    $line = (" " * $spaces) + $Text
    Write-Host $line -ForegroundColor $Color
}

function Show-Header {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Title,
        
        [Parameter(Mandatory = $false)]
        [string]$Subtitle = "",
        
        [Parameter(Mandatory = $false)]
        [System.ConsoleColor]$TitleColor = $script:CorTitulo,
        
        [Parameter(Mandatory = $false)]
        [System.ConsoleColor]$SubtitleColor = $script:CorSecundaria
    )
    
    Write-Host ""
    Write-Host "===============================" -ForegroundColor White
    Center-Text -Text $Title -Color $TitleColor
    Write-Host "===============================" -ForegroundColor White
    
    if (-not [string]::IsNullOrEmpty($Subtitle)) {
        Write-Host ""
        Center-Text -Text $Subtitle -Color $SubtitleColor
    }
    
    Write-Host ""
}

function Show-OperationProgress {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Operation,
        
        [Parameter(Mandatory = $false)]
        [int]$PercentComplete = -1,
        
        [Parameter(Mandatory = $false)]
        [string]$Status = "Em andamento",
        
        [Parameter(Mandatory = $false)]
        [System.ConsoleColor]$Color = $script:CorDestaque
    )
    
    if ($PercentComplete -ge 0) {
        Write-Progress -Activity $Operation -Status $Status -PercentComplete $PercentComplete
    }
    
    Write-Host "[$Status] $Operation" -ForegroundColor $Color
}

function Show-CommandExecution {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Command,
        
        [Parameter(Mandatory = $false)]
        [string]$Description = "",
        
        [Parameter(Mandatory = $false)]
        [switch]$ShowCode = $true
    )
    
    if (-not [string]::IsNullOrEmpty($Description)) {
        Write-Host "$Description" -ForegroundColor $script:CorInfo
    }
    
    if ($ShowCode) {
        Write-Host "Executando: " -ForegroundColor $script:CorDestaque -NoNewline
        Write-Host "$Command" -ForegroundColor $script:CorComando
    }
    else {
        Write-Host "Executando comando..." -ForegroundColor $script:CorDestaque
    }
}

function Show-OperationResult {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Operation,
        
        [Parameter(Mandatory = $false)]
        [bool]$Success = $true,
        
        [Parameter(Mandatory = $false)]
        [string]$Message = "",
        
        [Parameter(Mandatory = $false)]
        [object]$Result = $null
    )
    
    if ($Success) {
        Write-Host "✓ $Operation concluído com sucesso." -ForegroundColor $script:CorSucesso
        
        if (-not [string]::IsNullOrEmpty($Message)) {
            Write-Host "  $Message" -ForegroundColor $script:CorInfo
        }
        
        if ($null -ne $Result) {
            Write-Host "  Resultado: " -ForegroundColor $script:CorInfo -NoNewline
            Write-Host "$Result" -ForegroundColor $script:CorDestaque
        }
    }
    else {
        Write-Host "✗ $Operation falhou." -ForegroundColor $script:CorErro
        
        if (-not [string]::IsNullOrEmpty($Message)) {
            Write-Host "  $Message" -ForegroundColor $script:CorInfo
        }
    }
    
    Write-Host ""
}

function Get-SystemInfo {
    [CmdletBinding()]
    param()
    
    try {
        $osInfo = Get-CimInstance Win32_OperatingSystem
        $cpuInfo = Get-CimInstance Win32_Processor
        $memoryInfo = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
        $diskInfo = Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'"
        $gpuInfo = Get-CimInstance Win32_VideoController
        
        $systemInfo = @{
            SistemaOperacional = "$($osInfo.Caption) $($osInfo.Version)"
            Arquitetura = $osInfo.OSArchitecture
            Processador = $cpuInfo.Name
            Nucleos = $cpuInfo.NumberOfCores
            ThreadsLogicos = $cpuInfo.NumberOfLogicalProcessors
            MemoriaTotal = [math]::Round($memoryInfo.Sum / 1GB, 2)
            EspacoLivre = [math]::Round($diskInfo.FreeSpace / 1GB, 2)
            EspacoTotal = [math]::Round($diskInfo.Size / 1GB, 2)
            PlacaDeVideo = $gpuInfo.Name
            Fabricante = $osInfo.Manufacturer
            Modelo = $osInfo.CSName
            UltimaReinicializacao = $osInfo.LastBootUpTime
            TempoAtividade = (Get-Date) - $osInfo.LastBootUpTime
        }
        
        return $systemInfo
    }
    catch {
        Write-Log -Message "Erro ao obter informações do sistema: $_" -Level "ERROR"
        
        # Retornar informações básicas em caso de erro
        return @{
            SistemaOperacional = "Windows"
            Arquitetura = $env:PROCESSOR_ARCHITECTURE
            Processador = "Desconhecido"
            MemoriaTotal = 0
            EspacoLivre = 0
            EspacoTotal = 0
        }
    }
}

function Test-TORKCompatibility {
    [CmdletBinding()]
    param()
    
    try {
        $sistemaOperacional = Get-CimInstance Win32_OperatingSystem
        $versaoWindows = [Version]$sistemaOperacional.Version
        
        $compativel = $true
        $mensagens = @()
        
        # Verificar versão do Windows
        if ($versaoWindows.Major -lt 10) {
            $compativel = $false
            $mensagens += "O TORK é otimizado para Windows 10 ou superior. Versão detectada: Windows $($versaoWindows.Major).$($versaoWindows.Minor)"
        }
        
        # Verificar arquitetura
        if ($env:PROCESSOR_ARCHITECTURE -ne "AMD64") {
            $mensagens += "O TORK é otimizado para sistemas 64 bits. Arquitetura detectada: $env:PROCESSOR_ARCHITECTURE"
        }
        
        # Verificar espaço em disco
        $discoC = Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'"
        $espacoLivre = [math]::Round($discoC.FreeSpace / 1GB, 2)
        
        if ($espacoLivre -lt 5) {
            $mensagens += "Espaço livre no disco C: é menor que 5 GB ($espacoLivre GB). Algumas operações podem falhar."
        }
        
        # Verificar memória RAM
        $memoriaTotal = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum).Sum / 1GB
        
        if ($memoriaTotal -lt 4) {
            $mensagens += "Memória RAM detectada: $([math]::Round($memoriaTotal, 2)) GB. Recomendado: 4 GB ou mais."
        }
        
        # Verificar PowerShell
        $versaoPowerShell = $PSVersionTable.PSVersion
        if ($versaoPowerShell.Major -lt 5) {
            $mensagens += "O TORK requer PowerShell 5.1 ou superior. Versão detectada: $($versaoPowerShell.ToString())"
        }
        
        # Verificar .NET Framework
        try {
            $versaoNetFramework = (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full" -Name Release).Release
            if ($versaoNetFramework -lt 394802) { # .NET Framework 4.6.2 ou superior
                $mensagens += "O TORK requer .NET Framework 4.6.2 ou superior. Versão detectada pode ser incompatível."
            }
        }
        catch {
            $mensagens += "Não foi possível verificar a versão do .NET Framework."
        }
        
        # Retornar resultado
        $resultado = @{
            Compativel = $compativel
            Mensagens = $mensagens
            VersaoWindows = $versaoWindows
            Arquitetura = $env:PROCESSOR_ARCHITECTURE
            EspacoLivre = $espacoLivre
            MemoriaTotal = $memoriaTotal
            VersaoPowerShell = $versaoPowerShell.ToString()
        }
        
        Write-Log -Message "Verificação de compatibilidade concluída. Compatível: $compativel" -Level "INFO"
        
        if (-not $compativel -and -not $script:Configuracoes.Geral.ModoSilencioso) {
            Show-CompatibilityWarning -Result $resultado
        }
        
        return $resultado
    }
    catch {
        Write-Log -Message "Erro ao verificar compatibilidade: $_" -Level "ERROR"
        return @{
            Compativel = $false
            Mensagens = @("Erro ao verificar compatibilidade: $_")
            VersaoWindows = "Desconhecida"
            Arquitetura = $env:PROCESSOR_ARCHITECTURE
            EspacoLivre = 0
            MemoriaTotal = 0
            VersaoPowerShell = $PSVersionTable.PSVersion.ToString()
        }
    }
}

function Show-CompatibilityWarning {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [hashtable]$Result
    )
    
    Clear-Host
    Write-Host "╔════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║                      AVISO DE COMPATIBILIDADE                              ║" -ForegroundColor $script:CorAviso
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  Foram detectados possíveis problemas de compatibilidade:                  ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    
    foreach ($mensagem in $Result.Mensagens) {
        $mensagemFormatada = $mensagem.PadRight(74)
        Write-Host "║  $mensagemFormatada  ║" -ForegroundColor $script:CorBorda
    }
    
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  O TORK ainda pode funcionar, mas algumas funcionalidades podem não        ║" -ForegroundColor $script:CorBorda
    Write-Host "║  operar corretamente.                                                      ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "╚════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $script:CorBorda
    Write-Host ""
    Read-Host "Pressione Enter para continuar..."
}

function New-TORKRestorePoint {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false)]
        [string]$Description = "TORK - Ponto de Restauração Automático"
    )
    
    try {
        if (-not $script:Configuracoes.Geral.ModoSilencioso) {
            Write-Host "Criando ponto de restauração do sistema..." -ForegroundColor $script:CorDestaque
        }
        
        # Verificar se a restauração do sistema está habilitada
        $restauracaoHabilitada = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore" -Name "RPSessionInterval" -ErrorAction SilentlyContinue).RPSessionInterval -ne 0
        
        if (-not $restauracaoHabilitada) {
            if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                Write-Host "A restauração do sistema está desativada. Ativando temporariamente..." -ForegroundColor $script:CorAviso
            }
            Enable-ComputerRestore -Drive "$env:SystemDrive" -ErrorAction Stop
        }
        
        # Criar ponto de restauração
        Checkpoint-Computer -Description $Description -RestorePointType "APPLICATION_INSTALL" -ErrorAction Stop
        
        if (-not $script:Configuracoes.Geral.ModoSilencioso) {
            Write-Host "Ponto de restauração criado com sucesso: $Description" -ForegroundColor $script:CorSucesso
        }
        
        Write-Log -Message "Ponto de restauração criado: $Description" -Level "SUCCESS"
        $script:PontoRestauracaoCriado = $true
        return $true
    }
    catch {
        if (-not $script:Configuracoes.Geral.ModoSilencioso) {
            Write-Host "Não foi possível criar um ponto de restauração: $_" -ForegroundColor $script:CorErro
        }
        
        Write-Log -Message "Falha ao criar ponto de restauração: $_" -Level "ERROR"
        $script:PontoRestauracaoCriado = $false
        return $false
    }
}

function Backup-TORKSettings {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false)]
        [string]$BackupName = "Backup_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    )
    
    try {
        # Criar diretório de backup se não existir
        if (-not (Test-Path -Path $script:DiretorioBackup)) {
            New-Item -Path $script:DiretorioBackup -ItemType Directory -Force | Out-Null
        }
        
        $caminhoBackup = Join-Path -Path $script:DiretorioBackup -ChildPath "$BackupName.json"
        $script:Configuracoes | ConvertTo-Json -Depth 10 | Out-File -FilePath $caminhoBackup -Encoding UTF8
        
        Write-Log -Message "Backup de configurações criado: $caminhoBackup" -Level "SUCCESS"
        $script:BackupRealizado = $true
        return $true
    }
    catch {
        Write-Log -Message "Falha ao criar backup de configurações: $_" -Level "ERROR"
        $script:BackupRealizado = $false
        return $false
    }
}

function Restore-TORKSettings {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$BackupPath
    )
    
    try {
        if (Test-Path -Path $BackupPath) {
            $configuracoesBackup = Get-Content -Path $BackupPath -Raw | ConvertFrom-Json
            
            # Converter o objeto JSON para hashtable
            $novasConfiguracoes = @{}
            foreach ($categoria in $configuracoesBackup.PSObject.Properties) {
                if ($categoria.Value -is [PSCustomObject]) {
                    $subConfig = @{}
                    foreach ($prop in $categoria.Value.PSObject.Properties) {
                        $subConfig[$prop.Name] = $prop.Value
                    }
                    $novasConfiguracoes[$categoria.Name] = $subConfig
                }
                else {
                    $novasConfiguracoes[$categoria.Name] = $categoria.Value
                }
            }
            
            # Mesclar com as configurações atuais
            $script:Configuracoes = $novasConfiguracoes
            Save-TORKConfiguracoes
            
            Write-Log -Message "Configurações restauradas de: $BackupPath" -Level "SUCCESS"
            return $true
        }
        else {
            Write-Log -Message "Arquivo de backup não encontrado: $BackupPath" -Level "ERROR"
            return $false
        }
    }
    catch {
        Write-Log -Message "Falha ao restaurar configurações: $_" -Level "ERROR"
        return $false
    }
}

function Reset-TORKSettings {
    [CmdletBinding()]
    param()
    
    try {
        # Fazer backup das configurações atuais antes de resetar
        Backup-TORKSettings -BackupName "Antes_Reset_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
        
        # Restaurar configurações padrão
        $script:Configuracoes = $script:ConfiguracoesPadrao.Clone()
        Save-TORKConfiguracoes
        
        Write-Log -Message "Configurações restauradas para o padrão" -Level "INFO"
        return $true
    }
    catch {
        Write-Log -Message "Falha ao restaurar configurações padrão: $_" -Level "ERROR"
        return $false
    }
}

function Measure-ExecutionTime {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [scriptblock]$ScriptBlock,
        
        [Parameter(Mandatory = $false)]
        [string]$Description = "Operação"
    )
    
    if ($script:Configuracoes.Geral.MostrarTempoExecucao -and -not $script:Configuracoes.Geral.ModoSilencioso) {
        $tempoInicio = Get-Date
        
        try {
            & $ScriptBlock
        }
        finally {
            $tempoFim = Get-Date
            $duracao = $tempoFim - $tempoInicio
            
            Write-Host "`nTempo de execução para '$Description': $($duracao.Minutes) minutos e $($duracao.Seconds) segundos" -ForegroundColor $script:CorDestaque
            Write-Log -Message "Tempo de execução para '$Description': $($duracao.Minutes) minutos e $($duracao.Seconds) segundos" -Level "INFO"
        }
    }
    else {
        & $ScriptBlock
    }
}

function Test-TORKUpdates {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false)]
        [switch]$Force = $false
    )
    
    try {
        # Verificar se já verificou recentemente
        $verificarAgora = $Force
        
        if (-not $verificarAgora -and $null -ne $script:UltimaVerificacaoAtualizacao) {
            $diasDesdeUltimaVerificacao = (Get-Date) - $script:UltimaVerificacaoAtualizacao
            $verificarAgora = $diasDesdeUltimaVerificacao.TotalDays -ge $script:Configuracoes.Geral.IntervaloVerificacaoAtualizacoes
        }
        else {
            $verificarAgora = $true
        }
        
        if ($verificarAgora) {
            if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                Write-Host "Verificando atualizações..." -ForegroundColor $script:CorDestaque
            }
            
            # Simular verificação de atualizações (em produção, isso consultaria um repositório real)
            # Aqui estamos apenas simulando para demonstração
            $novaVersaoDisponivel = "4.1"
            $versaoAtual = [Version]$script:VersaoAtual
            $versaoNova = [Version]$novaVersaoDisponivel
            
            if ($versaoNova -gt $versaoAtual) {
                $script:AtualizacaoDisponivel = $true
                $script:NovaVersao = $novaVersaoDisponivel
                $script:MensagemAtualizacao = "Nova versão $novaVersaoDisponivel disponível! Sua versão atual é $script:VersaoAtual."
                
                if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                    Write-Host "Nova versão disponível: $novaVersaoDisponivel (Atual: $script:VersaoAtual)" -ForegroundColor $script:CorSucesso
                }
                
                Write-Log -Message "Nova versão disponível: $novaVersaoDisponivel (Atual: $script:VersaoAtual)" -Level "INFO"
            }
            else {
                $script:AtualizacaoDisponivel = $false
                $script:NovaVersao = $null
                $script:MensagemAtualizacao = "Você está usando a versão mais recente do TORK."
                
                if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                    Write-Host "Você está usando a versão mais recente do TORK." -ForegroundColor $script:CorSucesso
                }
                
                Write-Log -Message "Versão atual é a mais recente: $script:VersaoAtual" -Level "INFO"
            }
            
            $script:UltimaVerificacaoAtualizacao = Get-Date
        }
        
        return $script:AtualizacaoDisponivel
    }
    catch {
        Write-Log -Message "Erro ao verificar atualizações: $_" -Level "ERROR"
        return $false
    }
}

function Show-UpdateStatus {
    Clear-Host
    Write-Host "╔════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║                      VERIFICAÇÃO DE ATUALIZAÇÕES                           ║" -ForegroundColor $script:CorTitulo
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    
    if ($script:AtualizacaoDisponivel) {
        Write-Host "║  Nova versão disponível: $script:NovaVersao                                     ║" -ForegroundColor $script:CorBorda
        Write-Host "║  Versão atual: $script:VersaoAtual                                              ║" -ForegroundColor $script:CorBorda
        Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
        Write-Host "║  Recomendamos atualizar para a versão mais recente para obter as           ║" -ForegroundColor $script:CorBorda
        Write-Host "║  últimas funcionalidades e correções de segurança.                         ║" -ForegroundColor $script:CorBorda
        Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
        Write-Host "║  Para atualizar, use a opção 'Atualizar TORK' no menu de configurações.    ║" -ForegroundColor $script:CorBorda
    }
    else {
        Write-Host "║  Você está usando a versão mais recente do TORK.                          ║" -ForegroundColor $script:CorBorda
        Write-Host "║  Versão atual: $script:VersaoAtual                                              ║" -ForegroundColor $script:CorBorda
        Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
        Write-Host "║  O TORK está atualizado com as últimas funcionalidades e correções.        ║" -ForegroundColor $script:CorBorda
    }
    
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  Última verificação: $($script:UltimaVerificacaoAtualizacao.ToString("dd/MM/yyyy HH:mm:ss"))                   ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "╚════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $script:CorBorda
    Write-Host ""
}

function Update-TORKScript {
    [CmdletBinding()]
    param()
    
    try {
        if (-not $script:AtualizacaoDisponivel) {
            Test-TORKUpdates -Force
        }
        
        if ($script:AtualizacaoDisponivel) {
            if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                Clear-Host
                Write-Host "╔════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $script:CorBorda
                Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
                Write-Host "║                      ATUALIZAÇÃO DO TORK                                   ║" -ForegroundColor $script:CorTitulo
                Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
                Write-Host "║  Atualizando para a versão $script:NovaVersao...                                    ║" -ForegroundColor $script:CorBorda
                Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
                Write-Host "╚════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $script:CorBorda
                Write-Host ""
                
                Write-Host "Fazendo backup das configurações atuais..." -ForegroundColor $script:CorDestaque
                Backup-TORKSettings -BackupName "Antes_Atualizacao_$script:VersaoAtual`_para_$script:NovaVersao"
                
                Write-Host "Baixando nova versão..." -ForegroundColor $script:CorDestaque
                # Simulação de download
                $progresso = 0
                while ($progresso -lt 100) {
                    $progresso += 10
                    Write-Progress -Activity "Baixando TORK $script:NovaVersao" -Status "$progresso% Concluído" -PercentComplete $progresso
                    Start-Sleep -Milliseconds 300
                }
                Write-Progress -Activity "Baixando TORK $script:NovaVersao" -Completed
                
                Write-Host "Instalando nova versão..." -ForegroundColor $script:CorDestaque
                # Simulação de instalação
                $progresso = 0
                while ($progresso -lt 100) {
                    $progresso += 5
                    Write-Progress -Activity "Instalando TORK $script:NovaVersao" -Status "$progresso% Concluído" -PercentComplete $progresso
                    Start-Sleep -Milliseconds 200
                }
                Write-Progress -Activity "Instalando TORK $script:NovaVersao" -Completed
                
                Write-Host "Aplicando configurações..." -ForegroundColor $script:CorDestaque
                Start-Sleep -Seconds 1
                
                Write-Host "`nAtualização concluída com sucesso!" -ForegroundColor $script:CorSucesso
                Write-Host "O TORK foi atualizado para a versão $script:NovaVersao." -ForegroundColor $script:CorSucesso
                Write-Host "É necessário reiniciar o script para aplicar as alterações." -ForegroundColor $script:CorAviso
                
                Write-Log -Message "TORK atualizado para a versão $script:NovaVersao" -Level "SUCCESS"
                
                Read-Host "`nPressione Enter para sair..."
                Exit
            }
            else {
                # Modo silencioso
                Backup-TORKSettings -BackupName "Antes_Atualizacao_$script:VersaoAtual`_para_$script:NovaVersao"
                Write-Log -Message "TORK atualizado para a versão $script:NovaVersao em modo silencioso" -Level "SUCCESS"
                Exit
            }
        }
        else {
            if (-not $script:Configuracoes.Geral.ModoSilencioso) {
                Write-Host "Você já está usando a versão mais recente do TORK ($script:VersaoAtual)." -ForegroundColor $script:CorSucesso
                Read-Host "`nPressione Enter para continuar..."
            }
            
            Write-Log -Message "Atualização não necessária. Versão atual é a mais recente: $script:VersaoAtual" -Level "INFO"
            return $false
        }
    }
    catch {
        Write-Log -Message "Erro ao atualizar TORK: $_" -Level "ERROR"
        
        if (-not $script:Configuracoes.Geral.ModoSilencioso) {
            Write-Host "Erro ao atualizar TORK: $_" -ForegroundColor $script:CorErro
            Read-Host "`nPressione Enter para continuar..."
        }
        
        return $false
    }
}

function Show-CommandHelp {
    Clear-Host
    Write-Host "╔════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║                      AJUDA DE LINHA DE COMANDO                             ║" -ForegroundColor $script:CorTitulo
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  O TORK pode ser executado com os seguintes parâmetros:                    ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -SilentMode                                                               ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa o TORK em modo silencioso, sem interface interativa.            ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -LimpezaRapida                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa a limpeza rápida do sistema automaticamente.                    ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -LimpezaCompleta                                                          ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa a limpeza completa do sistema automaticamente.                  ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -OtimizacaoRapida                                                         ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa a otimização rápida do sistema automaticamente.                 ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -OtimizacaoCompleta                                                       ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa a otimização completa do sistema automaticamente.               ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -RestaurarPadrao                                                          ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Restaura todas as configurações para o padrão.                          ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -TestarFuncionalidades                                                    ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa a suíte de testes para validar as funcionalidades.              ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -AjudaComandos                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Exibe esta tela de ajuda.                                               ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -PerfilConfiguracao [nome]                                                ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Carrega um perfil de configuração específico.                           ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -AtualizarScript                                                          ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Atualiza o TORK para a versão mais recente.                             ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -VerificarAtualizacoes                                                    ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Verifica se há atualizações disponíveis.                                ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -DiagnosticoRapido                                                        ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa um diagnóstico rápido do sistema.                               ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -DiagnosticoCompleto                                                      ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Executa um diagnóstico completo do sistema.                             ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -CriarAgendamento                                                         ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Abre o menu de agendamento de tarefas.                                  ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -ModoDesempenhoMaximo                                                     ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Aplica o perfil de desempenho máximo.                                   ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -ModoEquilibrado                                                          ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Aplica o perfil equilibrado.                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -ModoEconomiaEnergia                                                      ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Aplica o perfil de economia de energia.                                 ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  -ModoGamer                                                                ║" -ForegroundColor $script:CorBorda
    Write-Host "║    Aplica o perfil otimizado para jogos.                                   ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║  Exemplos:                                                                 ║" -ForegroundColor $script:CorBorda
    Write-Host "║    .\TORK-Otimizador.ps1 -SilentMode -LimpezaRapida                        ║" -ForegroundColor $script:CorBorda
    Write-Host "║    .\TORK-Otimizador.ps1 -OtimizacaoCompleta -PerfilConfiguracao Gamer     ║" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "╚════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $script:CorBorda
    Write-Host ""
    Read-Host "Pressione Enter para sair..."
}

function Test-TORKFunctionality {
    Clear-Host
    Write-Host "╔════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $script:CorBorda
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "║                      TESTE DE FUNCIONALIDADES                              ║" -ForegroundColor $script:CorTitulo
    Write-Host "║                                                                            ║" -ForegroundColor $script:CorBorda
    Write-Host "╚════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $script:CorBorda
    Write-Host ""
    
    $script:Configuracoes.ModoTeste = $true
    Write-Log -Message "Iniciando teste de funcionalidades" -Level "INFO"
    
    $testesPassados = 0
    $testesFalhados = 0
    $totalTestes = 0
    
    function Executar-Teste {
        param (
            [string]$Nome,
            [scriptblock]$Teste
        )
        
        $totalTestes++
        Write-Host "Teste ${totalTestes}: $Nome... " -ForegroundColor $script:CorDestaque -NoNewline
        
        try {
            $resultado = & $Teste
            
            if ($resultado -eq $true) {
                Write-Host "PASSOU" -ForegroundColor $script:CorSucesso
                $script:testesPassados++
                Write-Log -Message "Teste '$Nome' passou" -Level "SUCCESS"
                return $true
            }
            else {
                Write-Host "FALHOU" -ForegroundColor $script:CorErro
                $script:testesFalhados++
                Write-Log -Message "Teste '$Nome' falhou" -Level "ERROR"
                return $false
            }
        }
        catch {
            Write-Host "ERRO: $_" -ForegroundColor $script:CorErro
            $script:testesFalhados++
            Write-Log -Message "Teste '$Nome' falhou com erro: $_" -Level "ERROR"
            return $false
        }
    }
    
    # Teste 1: Verificar permissões de administrador
    Executar-Teste -Nome "Verificar permissões de administrador" -Teste {
        return Test-AdminPrivileges
    }
    
    # Teste 2: Verificar criação de log
    Executar-Teste -Nome "Verificar criação de log" -Teste {
        $caminhoLogTeste = "$env:TEMP\TORK_Teste_Log.txt"
        $configLogOriginal = $script:ArquivoLog
        
        try {
            $script:ArquivoLog = $caminhoLogTeste
            Write-Log -Message "Teste de log" -Level "INFO"
            
            $resultado = Test-Path -Path $caminhoLogTeste
            
            if ($resultado) {
                Remove-Item -Path $caminhoLogTeste -Force
            }
            
            return $resultado
        }
        finally {
            $script:ArquivoLog = $configLogOriginal
        }
    }
    
    # Teste 3: Verificar backup de configurações
    Executar-Teste -Nome "Verificar backup de configurações" -Teste {
        $nomeBackupTeste = "Teste_Backup"
        $caminhoBackupTeste = Join-Path -Path $script:DiretorioBackup -ChildPath "$nomeBackupTeste.json"
        
        try {
            $resultado = Backup-TORKSettings -BackupName $nomeBackupTeste
            
            if ($resultado -and (Test-Path -Path $caminhoBackupTeste)) {
                Remove-Item -Path $caminhoBackupTeste -Force
                return $true
            }
            
            return $false
        }
        catch {
            return $false
        }
    }
    
    # Teste 4: Verificar compatibilidade
    Executar-Teste -Nome "Verificar compatibilidade" -Teste {
        $resultado = Test-TORKCompatibility
        return $resultado -ne $null
    }
    
    # Teste 5: Verificar acesso ao registro
    Executar-Teste -Nome "Verificar acesso ao registro" -Teste {
        try {
            $testePath = "HKCU:\Software\TORK_Test"
            
            if (-not (Test-Path -Path $testePath)) {
                New-Item -Path $testePath -Force | Out-Null
            }
            
            Set-ItemProperty -Path $testePath -Name "TesteValor" -Value "Teste" -Type String -Force
            $valorLido = (Get-ItemProperty -Path $testePath -Name "TesteValor").TesteValor
            
            Remove-Item -Path $testePath -Force
            
            return $valorLido -eq "Teste"
        }
        catch {
            return $false
        }
    }
    
    # Teste 6: Verificar acesso ao sistema de arquivos
    Executar-Teste -Nome "Verificar acesso ao sistema de arquivos" -Teste {
        try {
            $testeArquivo = "$env:TEMP\TORK_Teste_Arquivo.txt"
            
            "Teste" | Out-File -FilePath $testeArquivo -Encoding UTF8 -Force
            $conteudo = Get-Content -Path $testeArquivo -Raw
            
            Remove-Item -Path $testeArquivo -Force
            
            return $conteudo -eq "Teste"
        }
        catch {
            return $false
        }
    }
    
    # Teste 7: Verificar acesso aos serviços do Windows
    Executar-Teste -Nome "Verificar acesso aos serviços do Windows" -Teste {
        try {
            $servico = Get-Service -Name "wuauserv" -ErrorAction Stop
            return $servico -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 8: Verificar acesso ao WMI
    Executar-Teste -Nome "Verificar acesso ao WMI" -Teste {
        try {
            $sistemaOperacional = Get-CimInstance Win32_OperatingSystem
            return $sistemaOperacional -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 9: Verificar acesso ao agendador de tarefas
    Executar-Teste -Nome "Verificar acesso ao agendador de tarefas" -Teste {
        try {
            $scheduler = New-Object -ComObject Schedule.Service
            $scheduler.Connect()
            $rootFolder = $scheduler.GetFolder("\")
            return $rootFolder -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 10: Verificar acesso à rede
    Executar-Teste -Nome "Verificar acesso à rede" -Teste {
        try {
            $ping = Test-Connection -ComputerName "8.8.8.8" -Count 1 -Quiet
            return $ping
        }
        catch {
            return $false
        }
    }
    
    # Teste 11: Verificar comandos SFC
    Executar-Teste -Nome "Verificar acesso ao SFC" -Teste {
        try {
            # Apenas verifica se o comando existe, não executa a verificação completa
            $sfc = Get-Command sfc.exe -ErrorAction Stop
            return $sfc -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 12: Verificar comandos DISM
    Executar-Teste -Nome "Verificar acesso ao DISM" -Teste {
        try {
            # Apenas verifica se o comando existe, não executa a operação
            $dism = Get-Command dism.exe -ErrorAction Stop
            return $dism -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 13: Verificar acesso ao PowerCfg
    Executar-Teste -Nome "Verificar acesso ao PowerCfg" -Teste {
        try {
            # Apenas lista os esquemas de energia
            $output = powercfg.exe /list
            return $output -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 14: Verificar acesso ao Registro para otimizações
    Executar-Teste -Nome "Verificar acesso ao Registro para otimizações" -Teste {
        try {
            $testePath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile"
            return (Test-Path -Path $testePath)
        }
        catch {
            return $false
        }
    }
    
    # Teste 15: Verificar capacidade de limpar arquivos temporários
    Executar-Teste -Nome "Verificar capacidade de limpar arquivos temporários" -Teste {
        try {
            # Apenas verifica se os diretórios existem
            $tempUser = Test-Path -Path $env:TEMP
            $tempSystem = Test-Path -Path "$env:SystemRoot\Temp"
            return ($tempUser -and $tempSystem)
        }
        catch {
            return $false
        }
    }
    
    # Teste 16: Verificar capacidade de criar ponto de restauração
    Executar-Teste -Nome "Verificar capacidade de criar ponto de restauração" -Teste {
        try {
            # Apenas verifica se o comando existe, não cria o ponto de restauração
            $checkpointComputer = Get-Command Checkpoint-Computer -ErrorAction Stop
            return $checkpointComputer -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 17: Verificar capacidade de monitorar desempenho
    Executar-Teste -Nome "Verificar capacidade de monitorar desempenho" -Teste {
        try {
            # Verifica se pode obter informações de CPU
            $cpu = Get-Counter -Counter "\Processor(_Total)\% Processor Time" -ErrorAction Stop
            return $cpu -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 18: Verificar capacidade de agendar tarefas
    Executar-Teste -Nome "Verificar capacidade de agendar tarefas" -Teste {
        try {
            # Apenas verifica se o comando existe, não cria a tarefa
            $registerTask = Get-Command Register-ScheduledTask -ErrorAction Stop
            return $registerTask -ne $null
        }
        catch {
            return $false
        }
    }
    
    # Teste 19: Verificar capacidade de gerenciar perfis
    Executar-Teste -Nome "Verificar capacidade de gerenciar perfis" -Teste {
        try {
            # Verifica se o diretório de perfis existe ou pode ser criado
            if (-not (Test-Path -Path $script:DiretorioPerfis)) {
                New-Item -Path $script:DiretorioPerfis -ItemType Directory -Force | Out-Null
            }
            
            $perfilTeste = Join-Path -Path $script:DiretorioPerfis -ChildPath "Teste.json"
            $script:Configuracoes | ConvertTo-Json -Depth 10 | Out-File -FilePath $perfilTeste -Encoding UTF8
            
            $resultado = Test-Path -Path $perfilTeste
            
            if ($resultado) {
                Remove-Item -Path $perfilTeste -Force
            }
            
            return $resultado
        }
        catch {
            return $false
        }
    }
    
    # Teste 20: Verificar capacidade de gerar relatórios
    Executar-Teste -Nome "Verificar capacidade de gerar relatórios" -Teste {
        try {
            # Verifica se o diretório de relatórios existe ou pode ser criado
            if (-not (Test-Path -Path $script:DiretorioRelatorios)) {
                New-Item -Path $script:DiretorioRelatorios -ItemType Directory -Force | Out-Null
            }
            
            $relatorioTeste = Join-Path -Path $script:DiretorioRelatorios -ChildPath "Teste.html"
            "<html><body><h1>Teste</h1></body></html>" | Out-File -FilePath $relatorioTeste -Encoding UTF8
            
            $resultado = Test-Path -Path $relatorioTeste
            
            if ($resultado) {
                Remove-Item -Path $relatorioTeste -Force
            }
            
            return $resultado
        }
        catch {
            return $false
        }
    }
    
    # Exibir resultados
    Write-Host ""
    Write-Host "===============================" -ForegroundColor White
    Write-Host "   RESULTADOS DOS TESTES" -ForegroundColor White
    Write-Host "===============================" -ForegroundColor White
    Write-Host ""
    
    Write-Host "Total de testes: $totalTestes" -ForegroundColor White
    Write-Host "Testes passados: $testesPassados" -ForegroundColor $script:CorSucesso
    Write-Host "Testes falhados: $testesFalhados" -ForegroundColor $script:CorErro
    
    $porcentagemSucesso = [math]::Round(($testesPassados / $totalTestes) * 100, 2)
    Write-Host "Taxa de sucesso: $porcentagemSucesso%" -ForegroundColor $(if ($porcentagemSucesso -ge 90) { $script:CorSucesso } elseif ($porcentagemSucesso -ge 70) { $script:CorAviso } else { $script:CorErro })
    
    Write-Log -Message "Teste de funcionalidades concluído. Taxa de sucesso: $porcentagemSucesso%" -Level "INFO"
    $script:Configuracoes.ModoTeste = $false
    
    Write-Host ""
    Read-Host "Pressione Enter para sair..."
}

# --- Funções de Perfil ---

function Get-TORKProfile {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Name
    )
    
    try {
        $perfilPadrao = @{
            Nome = "Padrao"
            Descricao = "Perfil padrão do TORK"
            DataCriacao = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            Configuracoes = $script:ConfiguracoesPadrao.Clone()
        }
        
        # Verificar se é um perfil predefinido
        switch ($Name) {
            "Padrao" {
                return $perfilPadrao
            }
            "Desempenho" {
                $perfil = $perfilPadrao.Clone()
                $perfil.Nome = "Desempenho"
                $perfil.Descricao = "Perfil otimizado para máximo desempenho"
                
                # Configurações específicas para desempenho
                $perfil.Configuracoes.Avancadas.OtimizacaoAgressiva = $true
                $perfil.Configuracoes.Avancadas.DesativarServicosNaoEssenciais = $true
                $perfil.Configuracoes.Avancadas.ModificarRegistroAvancado = $true
                $perfil.Configuracoes.Avancadas.AjustarPlanoEnergia = $true
                $perfil.Configuracoes.Avancadas.OtimizarServicos = $true
                $perfil.Configuracoes.Avancadas.AjustarEfeitosVisuais = $true
                $perfil.Configuracoes.Avancadas.OtimizarInicializacao = $true
                $perfil.Configuracoes.Avancadas.DesativarHibernacao = $true
                $perfil.Configuracoes.Avancadas.DesativarIndexacao = $true
                $perfil.Configuracoes.Avancadas.DesativarSuperfetch = $true
                $perfil.Configuracoes.Avancadas.DesativarWindowsSearch = $true
                $perfil.Configuracoes.Avancadas.DesativarEfeitosVisuais = $true
                $perfil.Configuracoes.Avancadas.DesativarTransparencia = $true
                $perfil.Configuracoes.Avancadas.DesativarAnimacoes = $true
                $perfil.Configuracoes.Avancadas.DesativarSombras = $true
                
                return $perfil
            }
            "Equilibrado" {
                $perfil = $perfilPadrao.Clone()
                $perfil.Nome = "Equilibrado"
                $perfil.Descricao = "Perfil com equilíbrio entre desempenho e usabilidade"
                
                # Configurações específicas para equilíbrio
                $perfil.Configuracoes.Avancadas.OtimizacaoAgressiva = $false
                $perfil.Configuracoes.Avancadas.DesativarServicosNaoEssenciais = $false
                $perfil.Configuracoes.Avancadas.ModificarRegistroAvancado = $false
                $perfil.Configuracoes.Avancadas.AjustarPlanoEnergia = $true
                $perfil.Configuracoes.Avancadas.OtimizarServicos = $true
                $perfil.Configuracoes.Avancadas.AjustarEfeitosVisuais = $false
                $perfil.Configuracoes.Avancadas.OtimizarInicializacao = $true
                $perfil.Configuracoes.Avancadas.DesativarHibernacao = $false
                $perfil.Configuracoes.Avancadas.DesativarIndexacao = $false
                $perfil.Configuracoes.Avancadas.DesativarSuperfetch = $false
                $perfil.Configuracoes.Avancadas.DesativarWindowsSearch = $false
                $perfil.Configuracoes.Avancadas.DesativarEfeitosVisuais = $false
                $perfil.Configuracoes.Avancadas.DesativarTransparencia = $false
                $perfil.Configuracoes.Avancadas.DesativarAnimacoes = $false
                
                return $perfil
            }
            "Economia" {
                $perfil = $perfilPadrao.Clone()
                $perfil.Nome = "Economia"
                $perfil.Descricao = "Perfil otimizado para economia de energia"
                
                # Configurações específicas para economia de energia
                $perfil.Configuracoes.Avancadas.OtimizacaoAgressiva = $false
                $perfil.Configuracoes.Avancadas.DesativarServicosNaoEssenciais = $true
                $perfil.Configuracoes.Avancadas.ModificarRegistroAvancado = $true
                $perfil.Configuracoes.Avancadas.AjustarPlanoEnergia = $true
                $perfil.Configuracoes.Avancadas.OtimizarServicos = $true
                $perfil.Configuracoes.Avancadas.AjustarEfeitosVisuais = $true
                $perfil.Configuracoes.Avancadas.OtimizarInicializacao = $false
                $perfil.Configuracoes.Avancadas.DesativarHibernacao = $false
                $perfil.Configuracoes.Avancadas.DesativarIndexacao = $true
                $perfil.Configuracoes.Avancadas.DesativarSuperfetch = $true
                $perfil.Configuracoes.Avancadas.DesativarWindowsSearch = $true
                $perfil.Configuracoes.Avancadas.DesativarEfeitosVisuais = $true
                $perfil.Configuracoes.Avancadas.DesativarTransparencia = $true
                $perfil.Configuracoes.Avancadas.DesativarAnimacoes = $true
                
                return $perfil
            }
            "Gamer" {
                $perfil = $perfilPadrao.Clone()
                $perfil.Nome = "Gamer"
                $perfil.Descricao = "Perfil otimizado para jogos"
                
                # Configurações específicas para jogos
                $perfil.Configuracoes.Avancadas.OtimizacaoAgressiva = $true
                $perfil.Configuracoes.Avancadas.DesativarServicosNaoEssenciais = $true
                $perfil.Configuracoes.Avancadas.ModificarRegistroAvancado = $true
                $perfil.Configuracoes.Avancadas.AjustarPlanoEnergia = $true
                $perfil.Configuracoes.Avancadas.OtimizarServicos = $true
                $perfil.Configuracoes.Avancadas.AjustarEfeitosVisuais = $true
                $perfil.Configuracoes.Avancadas.OtimizarInicializacao = $true
                $perfil.Configuracoes.Avancadas.DesativarHibernacao = $true
                $perfil.Configuracoes.Avancadas.DesativarIndexacao = $true
                $perfil.Configuracoes.Avancadas.DesativarSuperfetch = $false
                $perfil.Configuracoes.Avancadas.DesativarWindowsSearch = $true
                $perfil.Configuracoes.Avancadas.DesativarEfeitosVisuais = $true
                $perfil.Configuracoes.Avancadas.DesativarTransparencia = $true
                $perfil.Configuracoes.Avancadas.DesativarAnimacoes = $true
                $perfil.Configuracoes.Avancadas.DesativarGameDVR = $true
                $perfil.Configuracoes.Avancadas.DesativarXboxGameBar = $true
                
                return $perfil
            }
            default {
                # Verificar se é um perfil personalizado
                $caminhoPerfilPersonalizado = Join-Path -Path $script:DiretorioPerfis -ChildPath "$Name.json"
                
                if (Test-Path -Path $caminhoPerfilPersonalizado) {
                    $perfilPersonalizado = Get-Content -Path $caminhoPerfilPersonalizado -Raw | ConvertFrom-Json
                    
                    # Converter para hashtable
                    $perfil = @{
                        Nome = $perfilPersonalizado.Nome
                        Descricao = $perfilPersonalizado.Descricao
                        DataCriacao = $perfilPersonalizado.DataCriacao
                        Configuracoes = @{}
                    }
                    
                    foreach ($categoria in $perfilPersonalizado.Configuracoes.PSObject.Properties) {
                        if ($categoria.Value -is [PSCustomObject]) {
                            $subConfig = @{}
                            foreach ($prop in $categoria.Value.PSObject.Properties) {
                                $subConfig[$prop.Name] = $prop.Value
                            }
                            $perfil.Configuracoes[$categoria.Name] = $subConfig
                        }
                        else {
                            $perfil.Configuracoes[$categoria.Name] = $categoria.Value
                        }
                    }
                    
                    return $perfil
                }
                else {
                    # Se não encontrar, retorna o perfil padrão
                    Write-Log -Message "Perfil '$Name' não encontrado. Usando perfil padrão." -Level "WARNING"
                    return $perfilPadrao
                }
            }
        }
    }
    catch {
        Write-Log -Message "Erro ao carregar perfil '$Name': $_" -Level "ERROR"
        return $perfilPadrao
    }
}

function Test-TORKProfile {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Name
    )
    
    try {
        # Verificar se é um perfil predefinido
        if ($Name -in @("Padrao", "Desempenho", "Equilibrado", "Economia", "Gamer")) {
            return $true
        }
        
        # Verificar se é um perfil personalizado
        $caminhoPerfilPersonalizado = Join-Path -Path $script:DiretorioPerfis -ChildPath "$Name.json"
        return (Test-Path -Path $caminhoPerfilPersonalizado)
    }
    catch {
        Write-Log -Message "Erro ao verificar perfil '$Name': $_" -Level "ERROR"
        return $false
    }
}

function Save-TORKProfile {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Name,
        
        [Parameter(Mandatory = $false)]
        [string]$Description = "Perfil personalizado",
        
        [Parameter(Mandatory = $false)]
        [hashtable]$Settings = $null
    )
    
    try {
        # Verificar se é um perfil predefinido
        if ($Name -in @("Padrao", "Desempenho", "Equilibrado", "Economia", "Gamer")) {
            Write-Log -Message "Não é possível sobrescrever perfis predefinidos" -Level "WARNING"
            return $false
        }
        
        # Criar diretório de perfis se não existir
        if (-not (Test-Path -Path $script:DiretorioPerfis)) {
            New-Item -Path $script:DiretorioPerfis -ItemType Directory -Force | Out-Null
        }
        
        # Usar configurações atuais se não forem fornecidas
        if ($null -eq $Settings) {
            $Settings = $script:Configuracoes
        }
        
        # Criar perfil
        $perfil = @{
            Nome = $Name
            Descricao = $Description
            DataCriacao = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            Configuracoes = $Settings
        }
        
        # Salvar perfil
        $caminhoPerfilPersonalizado = Join-Path -Path $script:DiretorioPerfis -ChildPath "$Name.json"
        $perfil | ConvertTo-Json -Depth 10 | Out-File -FilePath $caminhoPerfilPersonalizado -Encoding UTF8
        
        # Adicionar à lista de perfis salvos
        if (-not $script:Configuracoes.Perfil.PerfisSalvos.Contains($Name)) {
            $script:Configuracoes.Perfil.PerfisSalvos += $Name
            Save-TORKConfiguracoes
        }
        
        Write-Log -Message "Perfil '$Name' salvo com sucesso" -Level "SUCCESS"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao salvar perfil '$Name': $_" -Level "ERROR"
        return $false
    }
}

function Remove-TORKProfile {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Name
    )
    
    try {
        # Verificar se é um perfil predefinido
        if ($Name -in @("Padrao", "Desempenho", "Equilibrado", "Economia", "Gamer")) {
            Write-Log -Message "Não é possível remover perfis predefinidos" -Level "WARNING"
            return $false
        }
        
        # Verificar se o perfil existe
        $caminhoPerfilPersonalizado = Join-Path -Path $script:DiretorioPerfis -ChildPath "$Name.json"
        
        if (Test-Path -Path $caminhoPerfilPersonalizado) {
            # Remover arquivo
            Remove-Item -Path $caminhoPerfilPersonalizado -Force
            
            # Remover da lista de perfis salvos
            $script:Configuracoes.Perfil.PerfisSalvos = $script:Configuracoes.Perfil.PerfisSalvos | Where-Object { $_ -ne $Name }
            Save-TORKConfiguracoes
            
            # Se o perfil ativo for o removido, voltar para o padrão
            if ($script:Configuracoes.Perfil.PerfilAtivo -eq $Name) {
                $script:Configuracoes.Perfil.PerfilAtivo = "Padrao"
                $script:PerfilAtivo = Get-TORKProfile -Name "Padrao"
                Save-TORKConfiguracoes
            }
            
            Write-Log -Message "Perfil '$Name' removido com sucesso" -Level "SUCCESS"
            return $true
        }
        else {
            Write-Log -Message "Perfil '$Name' não encontrado" -Level "WARNING"
            return $false
        }
    }
    catch {
        Write-Log -Message "Erro ao remover perfil '$Name': $_" -Level "ERROR"
        return $false
    }
}

function Get-TORKProfileList {
    [CmdletBinding()]
    param()
    
    try {
        # Perfis predefinidos
        $perfisPredefinidos = @("Padrao", "Desempenho", "Equilibrado", "Economia", "Gamer")
        
        # Perfis personalizados
        $perfisPersonalizados = @()
        
        if (Test-Path -Path $script:DiretorioPerfis) {
            $arquivosPerfis = Get-ChildItem -Path $script:DiretorioPerfis -Filter "*.json"
            $perfisPersonalizados = $arquivosPerfis | ForEach-Object { $_.BaseName }
        }
        
        # Combinar listas
        $todosPerfis = $perfisPredefinidos + $perfisPersonalizados
        
        # Atualizar lista de perfis salvos
        $script:Configuracoes.Perfil.PerfisSalvos = $perfisPersonalizados
        Save-TORKConfiguracoes
        
        return $todosPerfis
    }
    catch {
        Write-Log -Message "Erro ao listar perfis: $_" -Level "ERROR"
        return @("Padrao")
    }
}

function Apply-TORKProfile {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Name
    )
    
    try {
        # Verificar se o perfil existe
        if (-not (Test-TORKProfile -Name $Name)) {
            Write-Log -Message "Perfil '$Name' não encontrado" -Level "WARNING"
            return $false
        }
        
        # Carregar perfil
        $perfil = Get-TORKProfile -Name $Name
        
        # Aplicar configurações
        $script:Configuracoes = $perfil.Configuracoes
        $script:Configuracoes.Perfil.PerfilAtivo = $Name
        $script:PerfilAtivo = $perfil
        
        # Salvar configurações
        Save-TORKConfiguracoes
        
        # Aplicar configurações específicas do perfil
        switch ($Name) {
            "Desempenho" {
                # Aplicar configurações de desempenho máximo
                Invoke-PerformanceMode -Silent
            }
            "Equilibrado" {
                # Aplicar configurações equilibradas
                Invoke-BalancedMode -Silent
            }
            "Economia" {
                # Aplicar configurações de economia de energia
                Invoke-PowerSaverMode -Silent
            }
            "Gamer" {
                # Aplicar configurações para jogos
                Invoke-GamerMode -Silent
            }
        }
        
        Write-Log -Message "Perfil '$Name' aplicado com sucesso" -Level "SUCCESS"
        return $true
    }
    catch {
        Write-Log -Message "Erro ao aplicar perfil '$Name': $_" -Level "ERROR"
        return $false
    }
}

# --- Funções de Menu ---

function Show-MainMenu {
    do {
        Clear-Host
        Show-Banner
        
        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor $script:CorTitulo
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""
        
        Write-Host "[1] Otimização Simplificada (Para resultados rápidos e praticidade!)" -ForegroundColor $script:CorSucesso
        Write-Host "[2] Otimização Avançada (Para controle completo e ajustes profundos!)" -ForegroundColor $script:CorDestaque
        Write-Host "[3] Diagnóstico do Sistema (Verificar a saúde do seu computador)" -ForegroundColor $script:CorAviso
        Write-Host "[4] Agendamento de Tarefas (Automatize as otimizações!)" -ForegroundColor Magenta
        Write-Host "[5] Ações Globais (Executar múltiplas otimizações de uma vez!)" -ForegroundColor $script:CorErro
        Write-Host "[6] Gerenciamento de Perfis (Salve e carregue configurações!)" -ForegroundColor Blue
        Write-Host "[7] Configurações do TORK (Personalize o funcionamento do programa)" -ForegroundColor $script:CorInfo
        Write-Host "[8] Sobre o TORK (Informações sobre o programa)" -ForegroundColor $script:CorSecundaria
        Write-Host "[0] Sair (Até a próxima!)" -ForegroundColor $script:CorErro
        
        Write-Host ""
        Write-Host "Perfil Ativo: $($script:Configuracoes.Perfil.PerfilAtivo)" -ForegroundColor $script:CorDestaque
        Write-Host ""
        
        $escolha = Read-Host "Escolha sua opção"
        
        switch ($escolha) {
            "1" { Show-SimplifiedMenu }
            "2" { Show-AdvancedMenu }
            "3" { Show-DiagnosticMenu }
            "4" { Show-ScheduleTaskMenu }
            "5" { Show-GlobalActionsMenu }
            "6" { Show-ProfileManagementMenu }
            "7" { Show-SettingsMenu }
            "8" { Show-AboutTORK }
            "0" { 
                Write-Host "Obrigado por usar o TORK! Volte sempre que seu PC precisar de um impulso! ;)" -ForegroundColor $script:CorSucesso
                Write-Log -Message "Programa encerrado pelo usuário" -Level "INFO"
                Start-Sleep -Seconds 2
                break 
            }
            default {
                Write-Host "Ops! Opção inválida! Verifique os números e tente novamente!" -ForegroundColor $script:CorErro
                Start-Sleep -Seconds 1
            }
        }
    } while ($escolha -ne '0')
}

function Show-SimplifiedMenu {
    do {
        Clear-Host
        Show-Banner
        
        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZAÇÃO SIMPLIFICADA" -ForegroundColor $script:CorTitulo
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""
        
        Write-Host "[1] Limpeza Geral do Sistema (Remove arquivos desnecessários!)" -ForegroundColor $script:CorSucesso
        Write-Host "[2] Otimização de Memória e Inicialização (Torna tudo mais rápido!)" -ForegroundColor $script:CorAviso
        Write-Host "[3] Aceleração da Conexão com a Internet (Navegue sem gargalos!)" -ForegroundColor $script:CorDestaque
        Write-Host "[4] Windows Visualmente Leve (Desativa efeitos para melhor desempenho!)" -ForegroundColor $script:CorInfo
        Write-Host "[5] Otimização de Jogos (Melhora o desempenho em jogos!)" -ForegroundColor Magenta
        Write-Host "[6] Otimização de Privacidade (Proteja seus dados!)" -ForegroundColor Blue
        Write-Host "[7] Otimização de Segurança (Proteja seu sistema!)" -ForegroundColor $script:CorErro
        Write-Host "[8] Otimização de Bateria (Para notebooks e laptops!)" -ForegroundColor DarkYellow
        Write-Host "[9] Otimização de Armazenamento (Libere espaço em disco!)" -ForegroundColor DarkCyan
        Write-Host "[10] EXECUTAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor $script:CorErro
        Write-Host "[0] Voltar ao Menu Principal" -ForegroundColor $script:CorSecundaria
        
        Write-Host ""
        
        $escolha = Read-Host "Escolha sua opção de otimização simplificada"
        
        switch ($escolha) {
            "1" { Show-SimplifiedCleanupMenu }
            "2" { Show-SimplifiedMemoryStartupMenu }
            "3" { Show-SimplifiedInternetMenu }
            "4" { Show-SimplifiedVisualMenu }
            "5" { Show-SimplifiedGamingMenu }
            "6" { Show-SimplifiedPrivacyMenu }
            "7" { Show-SimplifiedSecurityMenu }
            "8" { Show-SimplifiedBatteryMenu }
            "9" { Show-SimplifiedStorageMenu }
            "10" { Invoke-EasyTurboMode }
            "0" { break }
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Verifique os números e tente novamente!" -ForegroundColor $script:CorErro
                Start-Sleep -Seconds 1
            }
        }
    } while ($escolha -ne '0')
}

function Show-AdvancedMenu {
    do {
        Clear-Host
        Show-Banner
        
        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANÇADO" -ForegroundColor $script:CorTitulo
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""
        
        Write-Host "[1] Limpeza e Manutenção de Arquivos" -ForegroundColor $script:CorDestaque
        Write-Host "[2] Otimizações de Desempenho do Sistema" -ForegroundColor $script:CorSucesso
        Write-Host "[3] Configurações e Otimizações de Rede" -ForegroundColor $script:CorAviso
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows" -ForegroundColor $script:CorInfo
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação" -ForegroundColor $script:CorDestaque
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows" -ForegroundColor $script:CorSucesso
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado" -ForegroundColor $script:CorAviso
        Write-Host "[8] Gerenciamento de Contas de Usuário" -ForegroundColor $script:CorInfo
        Write-Host "[9] Otimizações de Registro do Windows" -ForegroundColor Magenta
        Write-Host "[10] Configurações de Energia e Bateria" -ForegroundColor Blue
        Write-Host "[11] Segurança e Proteção do Sistema" -ForegroundColor $script:CorErro
        Write-Host "[12] Otimizações de Hardware" -ForegroundColor DarkYellow
        Write-Host "[13] Gerenciamento de Drivers" -ForegroundColor DarkCyan
        Write-Host "[14] Otimizações de Software" -ForegroundColor DarkGreen
        Write-Host "[15] Outras Configurações e Ajustes Diversos" -ForegroundColor $script:CorSecundaria
        Write-Host "[0] Voltar ao Menu Principal" -ForegroundColor $script:CorErro
        
        Write-Host ""
        
        $escolha = Read-Host "Escolha sua área de otimização avançada"
        
        switch ($escolha) {
            "1" { Show-CleanupMaintenanceMenu }
            "2" { Show-PerformanceOptimizationsMenu }
            "3" { Show-NetworkConfigurationsMenu }
            "4" { Show-ServicesManagementMenu }
            "5" { Show-DiagnosticToolsMenu }
            "6" { Show-WindowsFeaturesMenu }
            "7" { Show-AdvancedFileManagementMenu }
            "8" { Show-UserAccountManagementMenu }
            "9" { Show-RegistryOptimizationsMenu }
            "10" { Show-PowerBatterySettingsMenu }
            "11" { Show-SecurityProtectionMenu }
            "12" { Show-HardwareOptimizationsMenu }
            "13" { Show-DriversManagementMenu }
            "14" { Show-SoftwareOptimizationsMenu }
            "15" { Show-MiscellaneousSettingsMenu }
            "0" { break }
            default {
                Write-Host "Hmm, essa área de otimização não existe ou você digitou errado! Tente novamente!" -ForegroundColor $script:CorErro
                Start-Sleep -Seconds 1
            }
        }
    } while ($escolha -ne '0')
}

function Show-DiagnosticMenu {
    do {
        Clear-Host
        Show-Banner
        
        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   DIAGNÓSTICO DO SISTEMA" -ForegroundColor $script:CorTitulo
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""
        
        Write-Host "[1] Diagnóstico Rápido (Verificação básica do sistema)" -ForegroundColor $script:CorSucesso
        Write-Host "[2] Diagnóstico Completo (Análise detalhada do sistema)" -ForegroundColor $script:CorAviso
        Write-Host "[3] Verificação de Saúde do Disco" -ForegroundColor $script:CorDestaque
        Write-Host "[4] Verificação de Integridade do Sistema" -ForegroundColor $script:CorInfo
        Write-Host "[5] Análise de Desempenho" -ForegroundColor Magenta
        Write-Host "[6] Verificação de Segurança" -ForegroundColor $script:CorErro
        Write-Host "[7] Verificação de Drivers" -ForegroundColor Blue
        Write-Host "[8] Análise de Inicialização" -ForegroundColor DarkYellow
        Write-Host "[9] Verificação de Rede" -ForegroundColor DarkCyan
        Write-Host "[10] Gerar Relatório Completo" -ForegroundColor DarkGreen
        Write-Host "[11] Monitoramento em Tempo Real" -ForegroundColor $script:CorDestaque
        Write-Host "[12] Histórico de Diagnósticos" -ForegroundColor $script:CorSecundaria
        Write-Host "[0] Voltar ao Menu Principal" -ForegroundColor $script:CorSecundaria
        
        Write-Host ""
        
        $escolha = Read-Host "Escolha sua opção de diagnóstico"
        
        switch ($escolha) {
            "1" { Invoke-QuickDiagnostic }
            "2" { Invoke-CompleteDiagnostic }
            "3" { Invoke-DiskHealthCheck }
            "4" { Invoke-SystemIntegrityCheck }
            "5" { Invoke-PerformanceAnalysis }
            "6" { Invoke-SecurityCheck }
            "7" { Invoke-DriversCheck }
            "8" { Invoke-StartupAnalysis }
            "9" { Invoke-NetworkCheck }
            "10" { Invoke-GenerateCompleteReport }
            "11" { Invoke-RealTimeMonitoring }
            "12" { Show-DiagnosticHistory }
            "0" { break }
            default {
                Write-Host "Opção inválida! Verifique os números e tente novamente!" -ForegroundColor $script:CorErro
                Start-Sleep -Seconds 1
            }
        }
    } while ($escolha -ne '0')
}

function Show-ScheduleTaskMenu {
    do {
        Clear-Host
        Show-Banner
        
        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   AGENDAMENTO DE TAREFAS" -ForegroundColor $script:CorTitulo
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""
        
        Write-Host "[1] Agendar Limpeza Automática" -ForegroundColor $script:CorSucesso
        Write-Host "[2] Agendar Otimização Completa" -ForegroundColor $script:CorAviso
        Write-Host "[3] Agendar Verificação de Segurança" -ForegroundColor $script:CorErro
        Write-Host "[4] Agendar Desfragmentação de Disco" -ForegroundColor $script:CorDestaque
        Write-Host "[5] Agendar Backup do Sistema" -ForegroundColor Magenta
        Write-Host "[6] Visualizar Tarefas Agendadas" -ForegroundColor $script:CorInfo
        Write-Host "[7] Remover Tarefas Agendadas" -ForegroundColor DarkYellow
        Write-Host "[8] Configurações de Agendamento" -ForegroundColor Blue
        Write-Host "[9] Criar Agendamento Personalizado" -ForegroundColor DarkCyan
        Write-Host "[10] Importar/Exportar Agendamentos" -ForegroundColor DarkGreen
        Write-Host "[0] Voltar ao Menu Principal" -ForegroundColor $script:CorSecundaria
        
        Write-Host ""
        
        $escolha = Read-Host "Escolha sua opção de agendamento"
        
        switch ($escolha) {
            "1" { Invoke-ScheduleAutomaticCleanup }
            "2" { Invoke-ScheduleCompleteOptimization }
            "3" { Invoke-ScheduleSecurityCheck }
            "4" { Invoke-ScheduleDiskDefragmentation }
            "5" { Invoke-ScheduleSystemBackup }
            "6" { Invoke-ViewScheduledTasks }
            "7" { Invoke-RemoveScheduledTasks }
            "8" { Invoke-ScheduleSettings }
            "9" { Invoke-CreateCustomSchedule }
            "10" { Invoke-ImportExportSchedules }
            "0" { break }
            default {
                Write-Host "Opção inválida! Verifique os números e tente novamente!" -ForegroundColor $


```powershell file="modulos/ConfiguracoesTORK.ps1"
# Módulo de Configurações do TORK
# Este módulo contém funções para gerenciar as configurações do TORK

# --- Função para Configurações Gerais ---
function Executar-ConfiguracoesGerais {
    Clear-Host
    Banner-TORK
    
    Write-Host ""
    Write-Host "===============================" -ForegroundColor White
    Write-Host "   CONFIGURAÇÕES GERAIS" -ForegroundColor White
    Write-Host "===============================" -ForegroundColor White
    Write-Host ""
    
    Write-Host "Esta seção permite personalizar as configurações gerais do TORK." -ForegroundColor Gray
    Write-Host "Você pode ajustar como o programa se comporta e interage com o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "[1] Perfil de Desempenho do Sistema" -ForegroundColor Green
    Write-Host "[2] Configurações de Ponto de Restauração" -ForegroundColor Yellow
    Write-Host "[3] Configurações de Confirmação de Ações" -ForegroundColor Cyan
    Write-Host "[4] Configurações de Idioma" -ForegroundColor Magenta
    Write-Host "[5] Verificar Atualizações do TORK" -ForegroundColor Blue
    Write-Host "[6] Configurações de Tempo de Espera" -ForegroundColor White
    Write-Host "[0] Voltar ao Menu de Configurações" -ForegroundColor Gray
    
    Write-Host ""
    
    $escolha = Read-Host "Escolha uma opção"
    
    switch ($escolha) {
        "1" { Configurar-PerfilDesempenho }
        "2" { Configurar-PontoRestauracao }
        "3" { Configurar-ConfirmacaoAcoes }
        "4" { Configurar-Idioma }
        "5" { Verificar-AtualizacoesTORK }
        "6" { Configurar-TempoEspera }
        "0" { return }
        default {
            Write-Host "Opção inválida! Verifique os números e tente novamente!" -ForegroundColor Red
            Start-Sleep -Seconds 1
            Executar-ConfiguracoesGerais
        }
    }
}

# --- Função para Configurar Perfil de Desempenho ---
function Configurar-PerfilDesempenho {
    Clear-Host
    Banner-TORK
    
    Write-Host ""
    Write-Host "===============================" -ForegroundColor White
    Write-Host "   PERFIL DE DESEMPENHO" -ForegroundColor White
    Write-Host "===============================" -ForegroundColor White
    Write-Host ""
    
    Write-Host "Selecione o perfil de desempenho do sistema que melhor atende às suas necessidades." -ForegroundColor Gray
    Write-Host "Cada perfil ajusta automaticamente várias configurações do sistema para otimizar para um caso de uso específico." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "Perfil atual: $($global:ConfiguracoesTORK.PerfilAtivo)" -ForegroundColor Cyan
    Write-Host ""
    
    Write-Host "[1] Perfil Padrão" -ForegroundColor White
    Write-Host "    Configurações equilibradas para uso geral do sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "[2] Perfil de Desempenho" -ForegroundColor Green
    Write-Host "    Prioriza velocidade e responsividade, ideal para computadores potentes." -ForegroundColor Gray
    Write-Host "    • Desativa efeitos visuais" -ForegroundColor DarkGray
    Write-Host "    • Otimiza serviços do sistema" -ForegroundColor DarkGray
    Write-Host "    • Ajusta configurações de registro para máximo desempenho" -ForegroundColor DarkGray
    Write-Host "    • Configura plano de energia para Alto Desempenho" -ForegroundColor DarkGray
    Write-Host ""
    
    Write-Host "[3] Perfil Equilibrado" -ForegroundColor Yellow
    Write-Host "    Balanceia desempenho e usabilidade, bom para uso diário." -ForegroundColor Gray
    Write-Host "    • Mantém efeitos visuais essenciais" -ForegroundColor DarkGray
    Write-Host "    • Otimiza serviços não essenciais" -ForegroundColor DarkGray
    Write-Host "    • Ajusta configurações de registro para equilíbrio" -ForegroundColor DarkGray
    Write-Host "    • Configura plano de energia Equilibrado" -ForegroundColor DarkGray
    Write-Host ""
    
    Write-Host "[4] Perfil de Economia" -ForegroundColor Blue
    Write-Host "    Prioriza duração da bateria, ideal para laptops e dispositivos móveis." -ForegroundColor Gray
    Write-Host "    • Reduz efeitos visuais" -ForegroundColor DarkGray
    Write-Host "    • Otimiza serviços para economia de energia" -ForegroundColor DarkGray
    Write-Host "    • Ajusta configurações de registro para economia" -ForegroundColor DarkGray
    Write-Host "    • Configura plano de energia para Economia" -ForegroundColor DarkGray
    Write-Host ""
    
    Write-Host "[5] Perfil Gamer" -ForegroundColor Red
    Write-Host "    Otimizado para jogos, priorizando GPU e CPU para melhor desempenho em jogos." -ForegroundColor Gray
    Write-Host "    • Desativa serviços não essenciais" -ForegroundColor DarkGray
    Write-Host "    • Ajusta prioridades de processos" -ForegroundColor DarkGray
    Write-Host "    • Otimiza configurações de rede" -ForegroundColor DarkGray
    Write-Host "    • Configura plano de energia para Desempenho Máximo" -ForegroundColor DarkGray
    Write-Host ""
    
    Write-Host "[0] Voltar" -ForegroundColor Gray
    
    Write-Host ""
    
    $escolha = Read-Host "Escolha um perfil de desempenho"
    
    switch ($escolha) {
        "1" {
            $global:ConfiguracoesTORK.PerfilAtivo = "Padrao"
            
            # Configurações padrão
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.OtimizacaoAgressiva = $false
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.DesativarServicosNaoEssenciais = $false
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.ModificarRegistroAvancado = $false
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.AjustarEfeitosVisuais = $false
            
            # Aplicar plano de energia Equilibrado
            powercfg.exe /setactive 381b4222-f694-41f0-9685-ff5bb260df2e
            
            Write-Host "Perfil Padrão aplicado com sucesso!" -ForegroundColor Green
            Registrar-Log -Mensagem "Perfil de desempenho alterado para: Padrao" -Tipo "INFO"
        }
        "2" {
            $global:ConfiguracoesTORK.PerfilAtivo = "Desempenho"
            
            # Configurações de desempenho
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.OtimizacaoAgressiva = $true
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.DesativarServicosNaoEssenciais = $true
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.ModificarRegistroAvancado = $true
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.AjustarEfeitosVisuais = $true
            
            # Aplicar plano de energia Alto Desempenho
            powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
            
            # Se o plano Alto Desempenho não existir, criar um
            if ($LASTEXITCODE -ne 0) {
                powercfg.exe -duplicatescheme 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
                powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
            }
            
            # Desativar efeitos visuais
            Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
            
            Write-Host "Perfil de Desempenho aplicado com sucesso!" -ForegroundColor Green
            Registrar-Log -Mensagem "Perfil de desempenho alterado para: Desempenho" -Tipo "INFO"
        }
        "3" {
            $global:ConfiguracoesTORK.PerfilAtivo = "Equilibrado"
            
            # Configurações equilibradas
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.OtimizacaoAgressiva = $false
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.DesativarServicosNaoEssenciais = $false
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.ModificarRegistroAvancado = $false
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.AjustarEfeitosVisuais = $false
            
            # Aplicar plano de energia Equilibrado
            powercfg.exe /setactive 381b4222-f694-41f0-9685-ff5bb260df2e
            
            Write-Host "Perfil Equilibrado aplicado com sucesso!" -ForegroundColor Green
            Registrar-Log -Mensagem "Perfil de desempenho alterado para: Equilibrado" -Tipo "INFO"
        }
        "4" {
            $global:ConfiguracoesTORK.PerfilAtivo = "Economia"
            
            # Configurações de economia
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.OtimizacaoAgressiva = $false
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.DesativarServicosNaoEssenciais = $true
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.ModificarRegistroAvancado = $false
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.AjustarEfeitosVisuais = $true
            
            # Aplicar plano de energia Economia
            powercfg.exe /setactive a1841308-3541-4fab-bc81-f71556f20b4a
            
            # Se o plano Economia não existir, criar um
            if ($LASTEXITCODE -ne 0) {
                powercfg.exe -duplicatescheme a1841308-3541-4fab-bc81-f71556f20b4a
                powercfg.exe /setactive a1841308-3541-4fab-bc81-f71556f20b4a
            }
            
            Write-Host "Perfil de Economia aplicado com sucesso!" -ForegroundColor Green
            Registrar-Log -Mensagem "Perfil de desempenho alterado para: Economia" -Tipo "INFO"
        }
        "5" {
            $global:ConfiguracoesTORK.PerfilAtivo = "Gamer"
            
            # Configurações para jogos
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.OtimizacaoAgressiva = $true
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.DesativarServicosNaoEssenciais = $true
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.ModificarRegistroAvancado = $true
            $global:ConfiguracoesTORK.ConfiguracoesAvancadas.AjustarEfeitosVisuais = $true
            
            # Aplicar plano de energia Alto Desempenho
            powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
            
            # Se o plano Alto Desempenho não existir, criar um
            if ($LASTEXITCODE -ne 0) {
                powercfg.exe -duplicatescheme 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
                powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
            }
            
            # Otimizar para jogos no registro
            if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
                New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
            }
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Value 8 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Value 6 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Value "High" -Type String -Force -ErrorAction SilentlyContinue
            
            Write-Host "Perfil Gamer aplicado com sucesso!" -ForegroundColor Green
            Registrar-Log -Mensagem "Perfil de desempenho alterado para: Gamer" -Tipo "INFO"
        }
        "0" {
            Executar-ConfiguracoesGerais
            return
        }
        default {
            Write-Host "Opção inválida! Verifique os números e tente novamente!" -ForegroundColor Red
            Start-Sleep -Seconds 1
            Configurar-PerfilDesempenho
        }
    }
    
    # Salvar configurações
    Backup-Configuracoes -NomeBackup "Configuracoes_Perfil_$($global:ConfiguracoesTORK.PerfilAtivo)"
    
    Write-Host ""
    Read-Host "Pressione Enter para voltar às Configurações Gerais..."
    Executar-ConfiguracoesGerais
}

# --- Função para Configurar Ponto de Restauração ---
function Configurar-PontoRestauracao {
    Clear-Host
    Banner-TORK
    
    Write-Host ""
    Write-Host "===============================" -ForegroundColor White
    Write-Host "   CONFIGURAÇÕES DE PONTO DE RESTAURAÇÃO" -ForegroundColor White
    Write-Host "===============================" -ForegroundColor White
    Write-Host ""
    
    Write-Host "Esta seção permite configurar como o TORK gerencia os pontos de restauração do sistema." -ForegroundColor Gray
    Write-Host "Os pontos de restauração permitem reverter o sistema para um estado anterior caso ocorra algum problema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "Configuração atual: " -NoNewline
    if ($global:ConfiguracoesTORK.CriarPontoRestauracao) {
        Write-Host "ATIVADO" -ForegroundColor Green
    } else {
        Write-Host "DESATIVADO" -ForegroundColor Red
    }
    Write-Host ""
    
    Write-Host "[1] Ativar criação automática de pontos de restauração" -ForegroundColor Green
    Write-Host "    O TORK criará um ponto de restauração antes de realizar alterações significativas no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "[2] Desativar criação automática de pontos de restauração" -ForegroundColor Red
    Write-Host "    O TORK não criará pontos de restauração automaticamente (não recomendado)." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "[3] Criar ponto de restauração agora" -ForegroundColor Yellow
    Write-Host "    Cria um ponto de restauração manual neste momento." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "[4] Verificar status da Restauração do Sistema" -ForegroundColor Cyan
    Write-Host "    Verifica se a Restauração do Sistema está ativada no Windows." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "[0] Voltar" -ForegroundColor Gray
    
    Write-Host ""
    
    $escolha = Read-Host "Escolha uma opção"
    
    switch ($escolha) {
        "1" {
            $global:ConfiguracoesTORK.CriarPontoRestauracao = $true
            Write-Host "Criação automática de pontos de restauração ATIVADA!" -ForegroundColor Green
            Registrar-Log -Mensagem "Criação automática de pontos de restauração ativada" -Tipo "INFO"
        }
        "2" {
            if ($global:ConfiguracoesTORK.ConfirmarAcoes) {
                Write-Host "ATENÇÃO: Desativar a criação automática de pontos de restauração pode impedir a recuperação do sistema em caso de problemas." -ForegroundColor Yellow
                $confirmacao = Read-Host "Tem certeza que deseja desativar? (S/N)"
                if ($confirmacao -eq "S" -or $confirmacao -eq "s") {
                    $global:ConfiguracoesTORK.CriarPontoRestauracao = $false
                    Write-Host "Criação automática de pontos de restauração DESATIVADA!" -ForegroundColor Red
                    Registrar-Log -Mensagem "Criação automática de pontos de restauração desativada" -Tipo "AVISO"
                } else {
                    Write-Host "Operação cancelada. A configuração permanece inalterada." -ForegroundColor Yellow
                }
            } else {
                $global:ConfiguracoesTORK.CriarPontoRestauracao = $false
                Write-Host "Criação automática de pontos de restauração DESATIVADA!" -ForegroundColor Red
                Registrar-Log -Mensagem "Criação automática de pontos de restauração desativada" -Tipo "AVISO"
            }
        }
        "3" {
            $descricao = Read-Host "Digite uma descrição para o ponto de restauração (ou deixe em branco para usar o padrão)"
            if ([string]::IsNullOrWhiteSpace($descricao)) {
                $descricao = "TORK - Ponto de Restauração Manual"
            }
            
            $resultado = Criar-PontoRestauracao -Descricao $descricao
            
            if ($resultado) {
                Write-Host "Ponto de restauração criado com sucesso!" -ForegroundColor Green
            } else {
                Write-Host "Falha ao criar ponto de restauração. Verifique o arquivo de log para mais detalhes." -ForegroundColor Red
            }
        }
        "4" {
            Write-Host "Verificando status da Restauração do Sistema..." -ForegroundColor Yellow
            
            try {
                $restauracaoHabilitada = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore" -Name "RPSessionInterval" -ErrorAction Stop).RPSessionInterval -ne 0
                
                if ($restauracaoHabilitada) {
                    Write-Host "A Restauração do Sistema está ATIVADA no Windows." -ForegroundColor Green
                } else {
                    Write-Host "A Restauração do Sistema está DESATIVADA no Windows." -ForegroundColor Red
                    Write-Host "Deseja ativar a Restauração do Sistema? (S/N)" -ForegroundColor Yellow
                    $ativar = Read-Host
                    
                    if ($ativar -eq "S" -or $ativar -eq "s") {
                        Enable-ComputerRestore -Drive "$env:SystemDrive"
                        Write-Host "Restauração do Sistema ativada com sucesso!" -ForegroundColor Green
                        Registrar-Log -Mensagem "Restauração do Sistema ativada pelo usuário" -Tipo "INFO"
                    }
                }
            } catch {
                Write-Host "Não foi possível verificar o status da Restauração do Sistema: $_" -ForegroundColor Red
            }
        }
        "0" {
            Executar-ConfiguracoesGerais
            return
        }
        default {
            Write-Host "Opção inválida! Verifique os números e tente novamente!" -ForegroundColor Red
            Start-Sleep -Seconds 1
            Configurar-PontoRestauracao
        }
    }
    
    # Salvar configurações
    Backup-Configuracoes -NomeBackup "Configuracoes_PontoRestauracao"
    
    Write-Host ""
    Read-Host "Pressione Enter para voltar às Configurações Gerais..."
    Configurar-PontoRestauracao
}

# --- Função para Configurar Confirmação de Ações ---
function Configurar-ConfirmacaoAcoes {
    Clear-Host
    Banner-TORK
    
    Write-Host ""
    Write-Host "===============================" -ForegroundColor White
    Write-Host "   CONFIGURAÇÕES DE CONFIRMAÇÃO DE AÇÕES" -ForegroundColor White
    Write-Host "===============================" -ForegroundColor White
    Write-Host ""
    
    Write-Host "Esta seção permite configurar se o TORK deve solicitar confirmação antes de realizar ações importantes." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "Configuração atual: " -NoNewline
    if ($global:ConfiguracoesTORK.ConfirmarAcoes) {
        Write-Host "ATIVADO" -ForegroundColor Green
    } else {
        Write-Host "DESATIVADO" -ForegroundColor Red
    }
    Write-Host ""
    
    Write-Host "[1] Ativar confirmação de ações" -ForegroundColor Green
    Write-Host "    O TORK solicitará confirmação antes de realizar ações importantes." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "[2] Desativar confirmação de ações" -ForegroundColor Red
    Write-Host "    O TORK realizará ações sem solicitar confirmação (use com cuidado)." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "[0] Voltar" -ForegroundColor Gray
    
    Write-Host ""
    
    $escolha = Read-Host "Escolha uma opção"
    
    switch ($escolha) {
        "1" {
            $global:ConfiguracoesTORK.ConfirmarAcoes = $true
            Write-Host "Confirmação de ações ATIVADA!" -ForegroundColor Green
            Registrar-Log -Mensagem "Confirmação de ações ativada" -Tipo "INFO"
        }
        "2" {
            Write-Host "ATENÇÃO: Desativar a confirmação de ações pode resultar em alterações não intencionais no sistema." -ForegroundColor Yellow
            $confirmacao = Read-Host "Tem certeza que deseja desativar? (S/N)"
            if ($confirmacao -eq "S" -or $confirmacao -eq "s") {
                $global:ConfiguracoesTORK.ConfirmarAcoes = $false
                Write-Host "Confirmação de ações DESATIVADA!" -ForegroundColor Red
                Registrar-Log -Mensagem "Confirmação de ações desativada" -Tipo "AVISO"
            } else {
                Write-Host "Operação cancelada. A configuração permanece inalterada." -ForegroundColor Yellow
            }
        }
        "0" {
            Executar-ConfiguracoesGerais
            return
        }
        default {
            Write-Host "Opção inválida! Verifique os números e tente novamente!" -ForegroundColor Red
            Start-Sleep -Seconds 1
            Configurar-ConfirmacaoAcoes
        }
    }
    
    # Salvar configurações
    Backup-Configuracoes -NomeBackup "Configuracoes_ConfirmacaoAcoes"
    
    Write-Host ""
    Read-Host "Pressione Enter para voltar às Configurações Gerais..."
    Configurar-ConfirmacaoAcoes
}

# --- Função para Configurar Idioma ---
function Configurar-Idioma {
    Clear-Host
    Banner-TORK
    
    Write-Host ""
    Write-Host "===============================" -ForegroundColor White
    Write-Host "   CONFIGURAÇÕES DE IDIOMA" -ForegroundColor White
    Write-Host "===============================" -ForegroundColor White
    Write-Host ""
    
    Write-Host "Esta seção permite configurar o idioma do TORK." -ForegroundColor Gray
    Write-Host "Atualmente, apenas o Português do Brasil está totalmente implementado." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "Idioma atual: $($global:ConfiguracoesTORK.IdiomaAtual)" -ForegroundColor Cyan
    Write-Host ""
    
    Write-Host "[1] Português do Brasil (pt-BR)" -ForegroundColor Green
    Write-Host "    Idioma padrão do TORK, totalmente implementado." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "[2] Inglês (en-US) - EM DESENVOLVIMENTO" -ForegroundColor Yellow
    Write-Host "    Tradução em andamento, algumas partes podem não estar traduzidas." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "[0] Voltar" -ForegroundColor Gray
    
    Write-Host ""
    
    $escolha = Read-Host "Escolha um idioma"
    
    switch ($escolha) {
        "1" {
            $global:ConfiguracoesTORK.IdiomaAtual = "pt-BR"
            Write-Host "Idioma alterado para Português do Brasil!" -ForegroundColor Green
            Registrar-Log -Mensagem "Idioma alterado para pt-BR" -Tipo "INFO"
        }
        "2" {
            Write-Host "ATENÇÃO: A tradução para o inglês está em desenvolvimento e pode estar incompleta." -ForegroundColor Yellow
            $confirmacao = Read-Host "Deseja continuar? (S/N)"
            if ($confirmacao -eq "S" -or $confirmacao -eq "s") {
                $global:ConfiguracoesTORK.IdiomaAtual = "en-US"
                Write-Host "Idioma alterado para Inglês (parcial)!" -ForegroundColor Yellow
                Registrar-Log -Mensagem "Idioma alterado para en-US (parcial)" -Tipo "AVISO"
            } else {
                Write-Host "Operação cancelada. O idioma permanece inalterado." -ForegroundColor Yellow
            }
        }
        "0" {
            Executar-ConfiguracoesGerais
            return
        }
        default {
            Write-Host "Opção inválida! Verifique os números e tente novamente!" -ForegroundColor Red
            Start-Sleep -Seconds 1
            Configurar-Idioma
        }
    }
    
    # Salvar configurações
    Backup-Configuracoes -NomeBackup "Configuracoes_Idioma"
    
    Write-Host ""
    Read-Host "Pressione Enter para voltar às Configurações Gerais..."
    Configurar-Idioma
}

# --- Função para Verificar Atualizações do TORK ---
function Verificar-AtualizacoesTORK {
    Clear-Host
    Banner-TORK
    
    Write-Host ""
    Write-Host "===============================" -ForegroundColor White
    Write-Host "   VERIFICAR ATUALIZAÇÕES" -ForegroundColor White
    Write-Host "===============================" -ForegroundColor White
    Write-Host ""
    
    Write-Host "Esta seção permite verificar e instalar atualizações do TORK." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "Versão atual: $($global:ConfiguracoesTORK.VersaoAtual)" -ForegroundColor Cyan
    Write-Host ""
    
    Write-Host "Verificando atualizações disponíveis..." -ForegroundColor Yellow
    
    # Simulação de verificação de atualizações
    Start-Sleep -Seconds 2
    
    # Aqui você implementaria a lógica real para verificar atualizações
    # Por exemplo, fazendo uma requisição a um servidor para obter a versão mais recente
    
    # Para fins de demonstração, vamos simular que a versão atual é a mais recente
    $versaoMaisRecente = "3.5"
    $notas = "- Melhorias de desempenho`n- Correções de bugs`n- Novos recursos de diagnóstico"
    
    if ([version]$versaoMaisRecente -gt [version]$global:ConfiguracoesTORK.VersaoAtual) {
        Write-Host "Nova versão disponível: $versaoMaisRecente" -ForegroundColor Green
        Write-Host ""
        Write-Host "Notas da versão:" -ForegroundColor Yellow
        Write-Host $notas -ForegroundColor Gray
        Write-Host ""
        
        $instalar = Read-Host "Deseja instalar a atualização agora? (S/N)"
        if ($instalar -eq "S" -or $instalar -eq "s") {
            Write-Host "Baixando atualização..." -ForegroundColor Yellow
            
            # Simulação de download
            $total = 100
            for ($i = 1; $i -le $total; $i++) {
                Write-Progress -Activity "Baixando atualização" -Status "$i% Completo:" -PercentComplete $i
                Start-Sleep -Milliseconds 50
            }
            
            Write-Host "Instalan


```powershell file="modulos/AgendamentoTarefas.ps1"
... This file was left out for brevity. Assume it is correct and does not need any modifications. ...
