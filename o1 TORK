# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total### Enhanced TORK Optimizer

I'll enhance the TORK optimizer with more comprehensive functionality across all features, starting with an expanded Simple Cleanup function and then improving all other options.

```powershell type="code"
# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total = ($eventLogs | Measure-Object -Property FileSize -Sum).Sum / 1MB
    
    Write-Host "Encontrados $totalLogCount logs de eventos ocupando aproximadamente $([math]::Round($total, 2)) MB." -ForegroundColor White
    
    # Limpar os logs principais
    Write-Host "Limpando logs principais do sistema..." -ForegroundColor Yellow
    
    $mainLogs = @("Application", "System", "Security")
    foreach ($log in $mainLogs) {
        try {
            $logSize = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).FileSize / 1MB
            $logRecords = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).RecordCount
            
            Write-Host "Log $log: $([math]::Round($logSize, 2)) MB com $logRecords registros" -ForegroundColor DarkGray
            wevtutil cl $log
            Write-Host "Log $log limpo com sucesso!" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível limpar o log $log." -ForegroundColor Red
        }
    }
    
    # Perguntar se deseja limpar todos os outros logs
    $confirmAllLogs = Read-Host "Deseja limpar todos os outros logs do sistema? (s/n)"
    
    if ($confirmAllLogs -eq 's') {
        Write-Host "Limpando todos os logs do sistema... (isso pode levar algum tempo)" -ForegroundColor Yellow
        
        $otherLogs = $eventLogs | Where-Object { $_.LogName -notin $mainLogs }
        foreach ($log in $otherLogs) {
            try {
                wevtutil cl $log.LogName
            } catch {
                # Ignorar erros silenciosamente
            }
        }
        
        Write-Host "Todos os logs do sistema foram limpos!" -ForegroundColor Green
    } else {
        Write-Host "Apenas os logs principais foram limpos." -ForegroundColor Green
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWindowsUpdateCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Atualizações do Windows ---" -ForegroundColor Yellow
    Write-Host "Limpa os arquivos temporários de atualizações do Windows para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando cache de atualizações do Windows..." -ForegroundColor Yellow
    
    # Verificar tamanho da pasta SoftwareDistribution antes da limpeza
    $updateCachePath = "$env:SystemRoot\SoftwareDistribution\Download"
    $updateCacheFiles = Get-ChildItem -Path $updateCachePath -Recurse -ErrorAction SilentlyContinue
    $updateCacheSize = ($updateCacheFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "O cache de atualizações do Windows está ocupando aproximadamente $([math]::Round($updateCacheSize, 2)) MB." -ForegroundColor White
    
    # Parar o serviço Windows Update
    Write-Host "Parando o serviço Windows Update..." -ForegroundColor DarkGray
    Stop-Service -Name wuauserv -Force -ErrorAction SilentlyContinue
    
    # Limpar o cache de atualizações
    Write-Host "Limpando o cache de atualizações do Windows..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    
    # Iniciar o serviço Windows Update novamente
    Write-Host "Iniciando o serviço Windows Update..." -ForegroundColor DarkGray
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    
    Write-Host "Cache de atualizações do Windows limpo com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de atualizações:" -ForegroundColor Cyan
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray
    Write-Host "- Resolução de problemas com atualizações do Windows" -ForegroundColor DarkGray
    Write-Host "- Melhoria no desempenho do sistema" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanHibernationFile {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos de Hibernação ---" -ForegroundColor White
    Write-Host "Gerencia o arquivo de hibernação (hiberfil.sys) para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar status atual da hibernação
    Write-Host "Verificando status atual da hibernação..." -ForegroundColor Yellow
    $hibernationStatus = powercfg.exe /availablesleepstates | Select-String -Pattern "Hibernação"
    
    if ($hibernationStatus -match "Hibernação está desativada") {
        $currentStatus = "desativada"
    } else {
        $currentStatus = "ativada"
    }
    
    Write-Host "Status atual da hibernação: $currentStatus" -ForegroundColor White
    
    # Verificar tamanho do arquivo de hibernação (se existir)
    $systemDrive = $env:SystemDrive
    $hiberfilPath = "$systemDrive\hiberfil.sys"
    
    if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
        try {
            $hiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
            Write-Host "Tamanho do arquivo de hibernação: $([math]::Round($hiberfilSize, 2)) GB" -ForegroundColor White
        } catch {
            Write-Host "Não foi possível determinar o tamanho do arquivo de hibernação." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Arquivo de hibernação não encontrado (já está desativado)." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja desativar ou ativar a hibernação
    if ($currentStatus -eq "ativada") {
        $confirmHibernation = Read-Host "Deseja desativar a hibernação para liberar espaço em disco? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Desativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate off
            Write-Host "Hibernação desativada com sucesso! O arquivo hiberfil.sys foi removido." -ForegroundColor Green
        } else {
            Write-Host "Hibernação mantida ativada." -ForegroundColor Green
        }
    } else {
        $confirmHibernation = Read-Host "Deseja ativar a hibernação? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Ativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate on
            Write-Host "Hibernação ativada com sucesso! O arquivo hiberfil.sys foi criado." -ForegroundColor Green
            
            # Verificar novo tamanho do arquivo de hibernação
            if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
                try {
                    $newHiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
                    Write-Host "Tamanho do novo arquivo de hibernação: $([math]::Round($newHiberfilSize, 2)) GB" -ForegroundColor White
                } catch {
                    Write-Host "Não foi possível determinar o tamanho do novo arquivo de hibernação." -ForegroundColor DarkGray
                }
            }
        } else {
            Write-Host "Hibernação mantida desativada." -ForegroundColor Green
        }
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço foi afetado:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a hibernação:" -ForegroundColor Cyan
    Write-Host "- O arquivo de hibernação (hiberfil.sys) geralmente ocupa espaço equivalente a 75% da RAM instalada" -ForegroundColor DarkGray
    Write-Host "- Desativar a hibernação libera esse espaço, mas você não poderá usar o modo de hibernação" -ForegroundColor DarkGray
    Write-Host "- A hibernação é útil para laptops, pois salva o estado do sistema no disco antes de desligar" -ForegroundColor DarkGray
    Write-Host "- Para desktops, a hibernação geralmente é menos necessária" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWinSxS {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Pasta WinSxS ---" -ForegroundColor Magenta
    Write-Host "Limpa componentes não utilizados da pasta WinSxS para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "A pasta WinSxS (Windows Side-by-Side) armazena componentes do sistema e pode ocupar muito espaço." -ForegroundColor White
    Write-Host "Esta limpeza é segura e usa ferramentas oficiais do Windows para remover componentes não utilizados." -ForegroundColor White
    Write-Host ""
    
    # Verificar tamanho da pasta WinSxS antes da limpeza
    Write-Host "Verificando tamanho da pasta WinSxS (isso pode levar algum tempo)..." -ForegroundColor Yellow
    
    try {
        $winSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
        Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($winSxSSize, 2)) GB" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível determinar o tamanho da pasta WinSxS." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja prosseguir com a limpeza
    $confirmCleanup = Read-Host "Deseja prosseguir com a limpeza da pasta WinSxS? (s/n)"
    
    if ($confirmCleanup -eq 's') {
        Write-Host "Executando limpeza de componentes não utilizados (isso pode levar vários minutos)..." -ForegroundColor Yellow
        
        # Executar limpeza de componentes
        Write-Host "Etapa 1: Limpeza de componentes..." -ForegroundColor DarkGray
        Dism.exe /Online /Cleanup-Image /StartComponentCleanup
        
        # Perguntar se deseja executar limpeza mais agressiva (com reset base)
        $confirmResetBase = Read-Host "Deseja executar uma limpeza mais profunda? (remove a capacidade de desinstalar atualizações) (s/n)"
        
        if ($confirmResetBase -eq 's') {
            Write-Host "Etapa 2: Executando limpeza profunda (isso pode levar muito tempo)..." -ForegroundColor DarkGray
            Dism.exe /Online /Cleanup-Image /StartComponentCleanup /ResetBase
            Write-Host "Limpeza profunda concluída!" -ForegroundColor Green
        }
        
        Write-Host "Limpeza da pasta WinSxS concluída com sucesso!" -ForegroundColor Green
        
        # Verificar tamanho da pasta WinSxS após a limpeza
        try {
            $newWinSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
            $savedSpace = $winSxSSize - $newWinSxSSize
            
            Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($newWinSxSSize, 2)) GB" -ForegroundColor White
            Write-Host "Espaço liberado: $([math]::Round($savedSpace, 2)) GB" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível determinar o novo tamanho da pasta WinSxS." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Limpeza da pasta WinSxS cancelada." -ForegroundColor Yellow
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a pasta WinSxS:" -ForegroundColor Cyan
    Write-Host "- A pasta WinSxS armazena componentes do sistema Windows e atualizações" -ForegroundColor DarkGray
    Write-Host "- Não é recomendado excluir esta pasta manualmente" -ForegroundColor DarkGray
    Write-Host "- A limpeza realizada é segura e usa ferramentas oficiais do Windows" -ForegroundColor DarkGray
    Write-Host "- Após a limpeza profunda, não será possível desinstalar algumas atualizações" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - REDE (Expandidas) ---
function Invoke-NetworkFlushDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Limpar Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkChangeDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Mudar Servidor DNS ---" -ForegroundColor Cyan
    Write-Host "Permite definir servidores DNS personalizados para suas conexões de rede." -ForegroundColor DarkGray
    Write-Host ""

    # Listar adaptadores de rede ativos
    Write-Host "Listando adaptadores de rede ativos..." -ForegroundColor Yellow
    $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
    
    if ($networkAdapters.Count -eq 0) {
        Write-Host "Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host "Adaptadores de rede ativos:" -ForegroundColor White
    $index = 1
    foreach ($adapter in $networkAdapters) {
        Write-Host "[$index] $($adapter.Name) - $($adapter.InterfaceDescription)" -ForegroundColor White
        $index++
    }
    Write-Host ""
    
    # Selecionar adaptador de rede
    $adapterChoice = Read-Host "Selecione o número do adaptador que deseja configurar (ou 0 para voltar)"
    
    if ($adapterChoice -eq "0" -or $adapterChoice -eq "") {
        Write-Host "Operação cancelada." -ForegroundColor Yellow
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $adapterIndex = [int]$adapterChoice - 1
    if ($adapterIndex -lt 0 -or $adapterIndex -ge $networkAdapters.Count) {
        Write-Host "Seleção inválida." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $selectedAdapter = $networkAdapters[$adapterIndex]
    
    # Mostrar configuração DNS atual
    Write-Host "Configuração DNS atual para $($selectedAdapter.Name):" -ForegroundColor Yellow
    $currentDns = Get-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -AddressFamily IPv4 | Select-Object -ExpandProperty ServerAddresses
    
    if ($currentDns.Count -eq 0) {
        Write-Host "Nenhum servidor DNS configurado manualmente (usando DHCP)." -ForegroundColor DarkGray
    } else {
        foreach ($dns in $currentDns) {
            Write-Host $dns -ForegroundColor White
        }
    }
    Write-Host ""
    
    # Opções de DNS
    Write-Host "Opções de DNS:" -ForegroundColor Yellow
    Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
    Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
    Write-Host "[3] OpenDNS (208.67.222.222, 208.67.220.220)" -ForegroundColor White
    Write-Host "[4] Quad9 (9.9.9.9, 149.112.112.112)" -ForegroundColor White
    Write-Host "[5] AdGuard DNS (94.140.14.14, 94.140.15.15)" -ForegroundColor White
    Write-Host "[6] Inserir DNS personalizado" -ForegroundColor White
    Write-Host "[7] Usar DNS automático (DHCP)" -ForegroundColor White
    Write-Host "[0] Cancelar" -ForegroundColor White
    Write-Host ""
    
    $dnsChoice = Read-Host "Selecione uma opção"
    
    switch ($dnsChoice) {
        "1" {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            $dnsName = "Google DNS"
        }
        "2" {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            $dnsName = "Cloudflare DNS"
        }
        "3" {
            $primaryDns = "208.67.222.222"
            $secondaryDns = "208.67.220.220"
            $dnsName = "OpenDNS"
        }
        "4" {
            $primaryDns = "9.9.9.9"
            $secondaryDns = "149.112.112.112"
            $dnsName = "Quad9"
        }
        "5" {
            $primaryDns = "94.140.14.14"
            $secondaryDns = "94.140.15.15"
            $dnsName = "AdGuard DNS"
        }
        "6" {
            $primaryDns = Read-Host "Digite o endereço do DNS primário"
            $secondaryDns = Read-Host "Digite o endereço do DNS secundário (ou deixe em branco)"
            $dnsName = "DNS Personalizado"
        }
        "7" {
            Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ResetServerAddresses
            Write-Host "Configuração de DNS definida para automática (DHCP)." -ForegroundColor Green
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
    }
    
    # Aplicar configuração de DNS
    if ($secondaryDns -eq "") {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns
    } else {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns, $secondaryDns
    }
    
    Write-Host "Configuração de DNS alterada para $dnsName." -ForegroundColor Green
    Write-Host "DNS Primário: $primaryDns" -ForegroundColor White
    if ($secondaryDns -ne "") {
        Write-Host "DNS Secundário: $secondaryDns" -ForegroundColor White
    }
    
    # Limpar cache DNS após a mudança
    Write-Host "Limpando cache DNS para aplicar as alterações..." -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo." -ForegroundColor Green
    
    Write-Host "`nBenefícios de usar servidores DNS alternativos:" -ForegroundColor Cyan
    Write-Host "- Maior velocidade de resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Melhor confiabilidade e disponibilidade" -ForegroundColor DarkGray
    Write-Host "- Alguns servidores oferecem proteção adicional contra malware e phishing" -ForegroundColor DarkGray
    Write-Host "- Possibilidade de contornar bloqueios de conteúdo baseados em DNS" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkReset {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Resetar Configurações de Rede ---" -ForegroundColor White
    Write-Host "Reinicia os componentes de rede. Use como último recurso para solucionar problemas de conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "!!! ATENÇÃO: ESTE COMANDO VAI REINICIAR SUAS CONFIGURAÇÕES DE REDE !!!" -ForegroundColor Red
    Write-Host "Sua conexão será interrompida temporariamente e todas as configurações de rede personalizadas serão redefinidas." -ForegroundColor Yellow
    Write-Host "Isso inclui adaptadores de rede, configurações de DNS, configurações de proxy, etc." -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "Esta operação pode ajudar a resolver os seguintes problemas:" -ForegroundColor Cyan
    Write-Host "- Conexões de rede instáveis ou intermitentes" -ForegroundColor DarkGray
    Write-Host "- Problemas de DNS ou resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Problemas de conectividade após instalação de software ou atualizações" -ForegroundColor DarkGray
    Write-Host "- Erros de rede persistentes que não são resolvidos por outros métodos" -ForegroundColor DarkGray
    Write-Host ""
    
    $confirm = Read-Host "Tem certeza que deseja resetar as configurações de rede? (digite 'sim' para confirmar)"
    
    if ($confirm -eq 'sim') {
        Write-Host "Iniciando reset de configurações de rede..." -ForegroundColor Yellow
        
        # Etapa 1: Resetar pilha TCP/IP
        Write-Host "Etapa 1: Resetando pilha TCP/IP..." -ForegroundColor DarkGray
        netsh int ip reset
        
        # Etapa 2: Resetar catálogo Winsock
        Write-Host "Etapa 2: Resetando catálogo Winsock..." -ForegroundColor DarkGray
        netsh winsock reset
        
        # Etapa 3: Limpar cache DNS
        Write-Host "Etapa 3: Limpando cache DNS..." -ForegroundColor DarkGray
        ipconfig /flushdns
        
        # Etapa 4: Renovar configurações DHCP
        Write-Host "Etapa 4: Renovando configurações DHCP..." -ForegroundColor DarkGray
        ipconfig /release
        ipconfig /renew
        
        # Etapa 5: Reiniciar adaptadores de rede
        Write-Host "Etapa 5: Reiniciando adaptadores de rede..." -ForegroundColor DarkGray
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        
        Write-Host "Reset de configurações de rede concluído!" -ForegroundColor Green
        Write-Host "Recomenda-se reiniciar o computador para aplicar todas as alterações." -ForegroundColor Yellow
        
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        } else {
            Write-Host "Reinício cancelado. Algumas alterações podem não ter efeito até que o computador seja reiniciado." -ForegroundColor Yellow
        }
    } else {
        Write-Host "Reset de configurações de rede cancelado." -ForegroundColor Green
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-OptimizeTcpIp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Otimizar Configurações TCP/IP ---" -ForegroundColor Green
    Write-Host "Ajusta configurações avançadas do TCP/IP para melhorar o desempenho da conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função otimiza vários parâmetros TCP/IP para melhorar a velocidade e estabilidade da conexão." -ForegroundColor White
    Write-Host "As otimizações são seguras e podem ser revertidas se necessário." -ForegroundColor White
    Write-Host ""
    
    Write-Host "Configurações atuais:" -ForegroundColor Yellow
    
    # Mostrar configurações atuais
    Write-Host "Auto-Tuning Level:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Auto-Tuning Level"
    
    Write-Host "Congestion Provider:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Congestion Control Provider"
    
    Write-Host "ECN Capability:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "ECN Capability"
    
    Write-Host "Receive-Side Scaling (RSS):" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Receive-Side Scaling State"
    
    Write-Host ""
    $confirm = Read-Host "Deseja aplicar otimizações TCP/IP recomendadas? (s/n)"
    
    if ($confirm -eq 's') {
        Write-Host "Aplicando otimizações TCP/IP..." -ForegroundColor Yellow
        
        # Otimização 1: Habilitar TCP Window Auto-Tuning
        Write-Host "Configurando TCP Auto-Tuning para 'normal'..." -ForegroundColor DarkGray
        netsh int tcp set global### Enhanced TORK Optimizer

I'll enhance the TORK optimizer with more comprehensive functionality across all features, starting with an expanded Simple Cleanup function and then improving all other options.

```powershell type="code"
# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total### Enhanced TORK Optimizer

I'll enhance the TORK optimizer with more comprehensive functionality across all features, starting with an expanded Simple Cleanup function and then improving all other options.

```powershell type="code"
# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total = ($eventLogs | Measure-Object -Property FileSize -Sum).Sum / 1MB
    
    Write-Host "Encontrados $totalLogCount logs de eventos ocupando aproximadamente $([math]::Round($total, 2)) MB." -ForegroundColor White
    
    # Limpar os logs principais
    Write-Host "Limpando logs principais do sistema..." -ForegroundColor Yellow
    
    $mainLogs = @("Application", "System", "Security")
    foreach ($log in $mainLogs) {
        try {
            $logSize = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).FileSize / 1MB
            $logRecords = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).RecordCount
            
            Write-Host "Log $log: $([math]::Round($logSize, 2)) MB com $logRecords registros" -ForegroundColor DarkGray
            wevtutil cl $log
            Write-Host "Log $log limpo com sucesso!" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível limpar o log $log." -ForegroundColor Red
        }
    }
    
    # Perguntar se deseja limpar todos os outros logs
    $confirmAllLogs = Read-Host "Deseja limpar todos os outros logs do sistema? (s/n)"
    
    if ($confirmAllLogs -eq 's') {
        Write-Host "Limpando todos os logs do sistema... (isso pode levar algum tempo)" -ForegroundColor Yellow
        
        $otherLogs = $eventLogs | Where-Object { $_.LogName -notin $mainLogs }
        foreach ($log in $otherLogs) {
            try {
                wevtutil cl $log.LogName
            } catch {
                # Ignorar erros silenciosamente
            }
        }
        
        Write-Host "Todos os logs do sistema foram limpos!" -ForegroundColor Green
    } else {
        Write-Host "Apenas os logs principais foram limpos." -ForegroundColor Green
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWindowsUpdateCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Atualizações do Windows ---" -ForegroundColor Yellow
    Write-Host "Limpa os arquivos temporários de atualizações do Windows para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando cache de atualizações do Windows..." -ForegroundColor Yellow
    
    # Verificar tamanho da pasta SoftwareDistribution antes da limpeza
    $updateCachePath = "$env:SystemRoot\SoftwareDistribution\Download"
    $updateCacheFiles = Get-ChildItem -Path $updateCachePath -Recurse -ErrorAction SilentlyContinue
    $updateCacheSize = ($updateCacheFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "O cache de atualizações do Windows está ocupando aproximadamente $([math]::Round($updateCacheSize, 2)) MB." -ForegroundColor White
    
    # Parar o serviço Windows Update
    Write-Host "Parando o serviço Windows Update..." -ForegroundColor DarkGray
    Stop-Service -Name wuauserv -Force -ErrorAction SilentlyContinue
    
    # Limpar o cache de atualizações
    Write-Host "Limpando o cache de atualizações do Windows..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    
    # Iniciar o serviço Windows Update novamente
    Write-Host "Iniciando o serviço Windows Update..." -ForegroundColor DarkGray
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    
    Write-Host "Cache de atualizações do Windows limpo com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de atualizações:" -ForegroundColor Cyan
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray
    Write-Host "- Resolução de problemas com atualizações do Windows" -ForegroundColor DarkGray
    Write-Host "- Melhoria no desempenho do sistema" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanHibernationFile {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos de Hibernação ---" -ForegroundColor White
    Write-Host "Gerencia o arquivo de hibernação (hiberfil.sys) para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar status atual da hibernação
    Write-Host "Verificando status atual da hibernação..." -ForegroundColor Yellow
    $hibernationStatus = powercfg.exe /availablesleepstates | Select-String -Pattern "Hibernação"
    
    if ($hibernationStatus -match "Hibernação está desativada") {
        $currentStatus = "desativada"
    } else {
        $currentStatus = "ativada"
    }
    
    Write-Host "Status atual da hibernação: $currentStatus" -ForegroundColor White
    
    # Verificar tamanho do arquivo de hibernação (se existir)
    $systemDrive = $env:SystemDrive
    $hiberfilPath = "$systemDrive\hiberfil.sys"
    
    if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
        try {
            $hiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
            Write-Host "Tamanho do arquivo de hibernação: $([math]::Round($hiberfilSize, 2)) GB" -ForegroundColor White
        } catch {
            Write-Host "Não foi possível determinar o tamanho do arquivo de hibernação." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Arquivo de hibernação não encontrado (já está desativado)." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja desativar ou ativar a hibernação
    if ($currentStatus -eq "ativada") {
        $confirmHibernation = Read-Host "Deseja desativar a hibernação para liberar espaço em disco? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Desativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate off
            Write-Host "Hibernação desativada com sucesso! O arquivo hiberfil.sys foi removido." -ForegroundColor Green
        } else {
            Write-Host "Hibernação mantida ativada." -ForegroundColor Green
        }
    } else {
        $confirmHibernation = Read-Host "Deseja ativar a hibernação? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Ativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate on
            Write-Host "Hibernação ativada com sucesso! O arquivo hiberfil.sys foi criado." -ForegroundColor Green
            
            # Verificar novo tamanho do arquivo de hibernação
            if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
                try {
                    $newHiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
                    Write-Host "Tamanho do novo arquivo de hibernação: $([math]::Round($newHiberfilSize, 2)) GB" -ForegroundColor White
                } catch {
                    Write-Host "Não foi possível determinar o tamanho do novo arquivo de hibernação." -ForegroundColor DarkGray
                }
            }
        } else {
            Write-Host "Hibernação mantida desativada." -ForegroundColor Green
        }
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço foi afetado:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a hibernação:" -ForegroundColor Cyan
    Write-Host "- O arquivo de hibernação (hiberfil.sys) geralmente ocupa espaço equivalente a 75% da RAM instalada" -ForegroundColor DarkGray
    Write-Host "- Desativar a hibernação libera esse espaço, mas você não poderá usar o modo de hibernação" -ForegroundColor DarkGray
    Write-Host "- A hibernação é útil para laptops, pois salva o estado do sistema no disco antes de desligar" -ForegroundColor DarkGray
    Write-Host "- Para desktops, a hibernação geralmente é menos necessária" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWinSxS {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Pasta WinSxS ---" -ForegroundColor Magenta
    Write-Host "Limpa componentes não utilizados da pasta WinSxS para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "A pasta WinSxS (Windows Side-by-Side) armazena componentes do sistema e pode ocupar muito espaço." -ForegroundColor White
    Write-Host "Esta limpeza é segura e usa ferramentas oficiais do Windows para remover componentes não utilizados." -ForegroundColor White
    Write-Host ""
    
    # Verificar tamanho da pasta WinSxS antes da limpeza
    Write-Host "Verificando tamanho da pasta WinSxS (isso pode levar algum tempo)..." -ForegroundColor Yellow
    
    try {
        $winSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
        Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($winSxSSize, 2)) GB" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível determinar o tamanho da pasta WinSxS." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja prosseguir com a limpeza
    $confirmCleanup = Read-Host "Deseja prosseguir com a limpeza da pasta WinSxS? (s/n)"
    
    if ($confirmCleanup -eq 's') {
        Write-Host "Executando limpeza de componentes não utilizados (isso pode levar vários minutos)..." -ForegroundColor Yellow
        
        # Executar limpeza de componentes
        Write-Host "Etapa 1: Limpeza de componentes..." -ForegroundColor DarkGray
        Dism.exe /Online /Cleanup-Image /StartComponentCleanup
        
        # Perguntar se deseja executar limpeza mais agressiva (com reset base)
        $confirmResetBase = Read-Host "Deseja executar uma limpeza mais profunda? (remove a capacidade de desinstalar atualizações) (s/n)"
        
        if ($confirmResetBase -eq 's') {
            Write-Host "Etapa 2: Executando limpeza profunda (isso pode levar muito tempo)..." -ForegroundColor DarkGray
            Dism.exe /Online /Cleanup-Image /StartComponentCleanup /ResetBase
            Write-Host "Limpeza profunda concluída!" -ForegroundColor Green
        }
        
        Write-Host "Limpeza da pasta WinSxS concluída com sucesso!" -ForegroundColor Green
        
        # Verificar tamanho da pasta WinSxS após a limpeza
        try {
            $newWinSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
            $savedSpace = $winSxSSize - $newWinSxSSize
            
            Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($newWinSxSSize, 2)) GB" -ForegroundColor White
            Write-Host "Espaço liberado: $([math]::Round($savedSpace, 2)) GB" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível determinar o novo tamanho da pasta WinSxS." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Limpeza da pasta WinSxS cancelada." -ForegroundColor Yellow
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a pasta WinSxS:" -ForegroundColor Cyan
    Write-Host "- A pasta WinSxS armazena componentes do sistema Windows e atualizações" -ForegroundColor DarkGray
    Write-Host "- Não é recomendado excluir esta pasta manualmente" -ForegroundColor DarkGray
    Write-Host "- A limpeza realizada é segura e usa ferramentas oficiais do Windows" -ForegroundColor DarkGray
    Write-Host "- Após a limpeza profunda, não será possível desinstalar algumas atualizações" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - REDE (Expandidas) ---
function Invoke-NetworkFlushDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Limpar Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkChangeDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Mudar Servidor DNS ---" -ForegroundColor Cyan
    Write-Host "Permite definir servidores DNS personalizados para suas conexões de rede." -ForegroundColor DarkGray
    Write-Host ""

    # Listar adaptadores de rede ativos
    Write-Host "Listando adaptadores de rede ativos..." -ForegroundColor Yellow
    $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
    
    if ($networkAdapters.Count -eq 0) {
        Write-Host "Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host "Adaptadores de rede ativos:" -ForegroundColor White
    $index = 1
    foreach ($adapter in $networkAdapters) {
        Write-Host "[$index] $($adapter.Name) - $($adapter.InterfaceDescription)" -ForegroundColor White
        $index++
    }
    Write-Host ""
    
    # Selecionar adaptador de rede
    $adapterChoice = Read-Host "Selecione o número do adaptador que deseja configurar (ou 0 para voltar)"
    
    if ($adapterChoice -eq "0" -or $adapterChoice -eq "") {
        Write-Host "Operação cancelada." -ForegroundColor Yellow
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $adapterIndex = [int]$adapterChoice - 1
    if ($adapterIndex -lt 0 -or $adapterIndex -ge $networkAdapters.Count) {
        Write-Host "Seleção inválida." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $selectedAdapter = $networkAdapters[$adapterIndex]
    
    # Mostrar configuração DNS atual
    Write-Host "Configuração DNS atual para $($selectedAdapter.Name):" -ForegroundColor Yellow
    $currentDns = Get-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -AddressFamily IPv4 | Select-Object -ExpandProperty ServerAddresses
    
    if ($currentDns.Count -eq 0) {
        Write-Host "Nenhum servidor DNS configurado manualmente (usando DHCP)." -ForegroundColor DarkGray
    } else {
        foreach ($dns in $currentDns) {
            Write-Host $dns -ForegroundColor White
        }
    }
    Write-Host ""
    
    # Opções de DNS
    Write-Host "Opções de DNS:" -ForegroundColor Yellow
    Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
    Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
    Write-Host "[3] OpenDNS (208.67.222.222, 208.67.220.220)" -ForegroundColor White
    Write-Host "[4] Quad9 (9.9.9.9, 149.112.112.112)" -ForegroundColor White
    Write-Host "[5] AdGuard DNS (94.140.14.14, 94.140.15.15)" -ForegroundColor White
    Write-Host "[6] Inserir DNS personalizado" -ForegroundColor White
    Write-Host "[7] Usar DNS automático (DHCP)" -ForegroundColor White
    Write-Host "[0] Cancelar" -ForegroundColor White
    Write-Host ""
    
    $dnsChoice = Read-Host "Selecione uma opção"
    
    switch ($dnsChoice) {
        "1" {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            $dnsName = "Google DNS"
        }
        "2" {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            $dnsName = "Cloudflare DNS"
        }
        "3" {
            $primaryDns = "208.67.222.222"
            $secondaryDns = "208.67.220.220"
            $dnsName = "OpenDNS"
        }
        "4" {
            $primaryDns = "9.9.9.9"
            $secondaryDns = "149.112.112.112"
            $dnsName = "Quad9"
        }
        "5" {
            $primaryDns = "94.140.14.14"
            $secondaryDns = "94.140.15.15"
            $dnsName = "AdGuard DNS"
        }
        "6" {
            $primaryDns = Read-Host "Digite o endereço do DNS primário"
            $secondaryDns = Read-Host "Digite o endereço do DNS secundário (ou deixe em branco)"
            $dnsName = "DNS Personalizado"
        }
        "7" {
            Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ResetServerAddresses
            Write-Host "Configuração de DNS definida para automática (DHCP)." -ForegroundColor Green
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
    }
    
    # Aplicar configuração de DNS
    if ($secondaryDns -eq "") {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns
    } else {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns, $secondaryDns
    }
    
    Write-Host "Configuração de DNS alterada para $dnsName." -ForegroundColor Green
    Write-Host "DNS Primário: $primaryDns" -ForegroundColor White
    if ($secondaryDns -ne "") {
        Write-Host "DNS Secundário: $secondaryDns" -ForegroundColor White
    }
    
    # Limpar cache DNS após a mudança
    Write-Host "Limpando cache DNS para aplicar as alterações..." -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo." -ForegroundColor Green
    
    Write-Host "`nBenefícios de usar servidores DNS alternativos:" -ForegroundColor Cyan
    Write-Host "- Maior velocidade de resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Melhor confiabilidade e disponibilidade" -ForegroundColor DarkGray
    Write-Host "- Alguns servidores oferecem proteção adicional contra malware e phishing" -ForegroundColor DarkGray
    Write-Host "- Possibilidade de contornar bloqueios de conteúdo baseados em DNS" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkReset {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Resetar Configurações de Rede ---" -ForegroundColor White
    Write-Host "Reinicia os componentes de rede. Use como último recurso para solucionar problemas de conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "!!! ATENÇÃO: ESTE COMANDO VAI REINICIAR SUAS CONFIGURAÇÕES DE REDE !!!" -ForegroundColor Red
    Write-Host "Sua conexão será interrompida temporariamente e todas as configurações de rede personalizadas serão redefinidas." -ForegroundColor Yellow
    Write-Host "Isso inclui adaptadores de rede, configurações de DNS, configurações de proxy, etc." -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "Esta operação pode ajudar a resolver os seguintes problemas:" -ForegroundColor Cyan
    Write-Host "- Conexões de rede instáveis ou intermitentes" -ForegroundColor DarkGray
    Write-Host "- Problemas de DNS ou resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Problemas de conectividade após instalação de software ou atualizações" -ForegroundColor DarkGray
    Write-Host "- Erros de rede persistentes que não são resolvidos por outros métodos" -ForegroundColor DarkGray
    Write-Host ""
    
    $confirm = Read-Host "Tem certeza que deseja resetar as configurações de rede? (digite 'sim' para confirmar)"
    
    if ($confirm -eq 'sim') {
        Write-Host "Iniciando reset de configurações de rede..." -ForegroundColor Yellow
        
        # Etapa 1: Resetar pilha TCP/IP
        Write-Host "Etapa 1: Resetando pilha TCP/IP..." -ForegroundColor DarkGray
        netsh int ip reset
        
        # Etapa 2: Resetar catálogo Winsock
        Write-Host "Etapa 2: Resetando catálogo Winsock..." -ForegroundColor DarkGray
        netsh winsock reset
        
        # Etapa 3: Limpar cache DNS
        Write-Host "Etapa 3: Limpando cache DNS..." -ForegroundColor DarkGray
        ipconfig /flushdns
        
        # Etapa 4: Renovar configurações DHCP
        Write-Host "Etapa 4: Renovando configurações DHCP..." -ForegroundColor DarkGray
        ipconfig /release
        ipconfig /renew
        
        # Etapa 5: Reiniciar adaptadores de rede
        Write-Host "Etapa 5: Reiniciando adaptadores de rede..." -ForegroundColor DarkGray
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        
        Write-Host "Reset de configurações de rede concluído!" -ForegroundColor Green
        Write-Host "Recomenda-se reiniciar o computador para aplicar todas as alterações." -ForegroundColor Yellow
        
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        } else {
            Write-Host "Reinício cancelado. Algumas alterações podem não ter efeito até que o computador seja reiniciado." -ForegroundColor Yellow
        }
    } else {
        Write-Host "Reset de configurações de rede cancelado." -ForegroundColor Green
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-OptimizeTcpIp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Otimizar Configurações TCP/IP ---" -ForegroundColor Green
    Write-Host "Ajusta configurações avançadas do TCP/IP para melhorar o desempenho da conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função otimiza vários parâmetros TCP/IP para melhorar a velocidade e estabilidade da conexão." -ForegroundColor White
    Write-Host "As otimizações são seguras e podem ser revertidas se necessário." -ForegroundColor White
    Write-Host ""
    
    Write-Host "Configurações atuais:" -ForegroundColor Yellow
    
    # Mostrar configurações atuais
    Write-Host "Auto-Tuning Level:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Auto-Tuning Level"
    
    Write-Host "Congestion Provider:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Congestion Control Provider"
    
    Write-Host "ECN Capability:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "ECN Capability"
    
    Write-Host "Receive-Side Scaling (RSS):" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Receive-Side Scaling State"
    
    Write-Host ""
    $confirm = Read-Host "Deseja aplicar otimizações TCP/IP recomendadas? (s/n)"
    
    if ($confirm -eq 's') {
        Write-Host "Aplicando otimizações TCP/IP..." -ForegroundColor Yellow
        
        # Otimização 1: Habilitar TCP Window Auto-Tuning
        Write-Host "Configurando TCP Auto-Tuning para 'normal'..." -ForegroundColor DarkGray
        netsh int tcp set global autotuninglevel=normal
        
        # Otimização 2: Habilitar Receive-Side Scaling (RSS)
        Write-Host "Habilitando Receive-Side Scaling (RSS)..." -ForegroundColor DarkGray
        netsh int tcp set global rss=enabled
        
        # Otimização 3: Configurar Congestion Provider para CTCP
        Write-Host "Configurando Congestion Provider para 'ctcp'..." -ForegroundColor DarkGray
        netsh int tcp set global congestionprovider=ctcp
        
        # Otimização 4: Habilitar ECN Capability
        Write-Host "Habilitando ECN Capability..." -ForegroundColor DarkGray
        netsh int tcp set global ecncapability=enabled
        
        # Otimização 5: Configurar NetDMA (se disponível)
        Write-Host "Tentando configurar NetDMA..." -ForegroundColor DarkGray
        netsh int tcp set global netdma=enabled
        
        # Otimização 6: Configurar tamanho de buffer TCP
        Write-Host "Configurando tamanho de buffer TCP..." -ForegroundColor DarkGray
        netsh int tcp set global chimney=enabled
        
        # Otimização 7: Configurar QoS
        Write-Host "Configurando QoS..." -ForegroundColor DarkGray
        netsh int tcp set global timestamps=disabled
        
        Write-Host "Otimizações TCP/IP aplicadas com sucesso!" -ForegroundColor Green
        
        Write-Host "`nNovas configurações:" -ForegroundColor Yellow
        
        # Mostrar novas configurações
        Write-Host "Auto-Tuning Level:" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "Auto-Tuning Level"
        
        Write-Host "Congestion Provider:" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "Congestion Control Provider"
        
        Write-Host "ECN Capability:" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "ECN Capability"
        
        Write-Host "Receive-Side Scaling (RSS):" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "Receive-Side Scaling State"
        
        Write-Host "`nBenefícios das otimizações TCP/IP:" -ForegroundColor Cyan
        Write-Host "- Melhor aproveitamento da largura de banda disponível" -ForegroundColor DarkGray
        Write-Host "- Redução da latência em conexões de internet" -ForegroundColor DarkGray
        Write-Host "- Melhor desempenho em downloads e uploads" -ForegroundColor DarkGray
        Write-Host "- Conexões mais estáveis em redes congestionadas" -ForegroundColor DarkGray
        
        Write-Host "`nNota: Algumas alterações podem requerer reinicialização para ter efeito completo." -ForegroundColor Yellow
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        }
    } else {
        Write-Host "Otimizações TCP/IP canceladas." -ForegroundColor Yellow
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-CheckNetworkSpeed {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Verificar Velocidade da Conexão ---" -ForegroundColor Magenta
    Write-Host "Realiza testes para verificar a velocidade e qualidade da sua conexão com a internet." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função realiza testes básicos para avaliar a velocidade e qualidade da sua conexão." -ForegroundColor White
    Write-Host "Nota: Para testes de velocidade mais precisos, recomendamos usar sites especializados como speedtest.net" -ForegroundColor White
    Write-Host ""
    
    # Teste 1: Verificar conectividade básica
    Write-Host "Teste 1: Verificando conectividade básica com a internet..." -ForegroundColor Yellow
    $pingGoogle = Test-Connection -ComputerName google.com -Count 4 -ErrorAction SilentlyContinue
    
    if ($pingGoogle) {
        $avgLatency = ($pingGoogle | Measure-Object -Property ResponseTime -Average).Average
        $maxLatency = ($pingGoogle | Measure-Object -Property ResponseTime -Maximum).Maximum
        $minLatency = ($pingGoogle | Measure-Object -Property ResponseTime -Minimum).Minimum
        
        Write-Host "Conectividade: OK" -ForegroundColor Green
        Write-Host "Latência média: $avgLatency ms" -ForegroundColor $(if ($avgLatency -lt 50) { "Green" } elseif ($avgLatency -lt 100) { "Yellow" } else { "Red" })
        Write-Host "Latência mínima: $minLatency ms" -ForegroundColor Green
        Write-Host "Latência máxima: $maxLatency ms" -ForegroundColor $(if ($maxLatency -lt 100) { "Green" } elseif ($maxLatency -lt 200) { "Yellow" } else { "Red" })
        
        # Avaliação da qualidade da conexão
        if ($avgLatency -lt 30) {
            $qualidade = "Excelente"
            $cor = "Green"
        } elseif ($avgLatency -lt 60) {
            $qualidade = "Boa"
            $cor = "Green"
        } elseif ($avgLatency -lt 100) {
            $qualidade = "Razoável"
            $cor = "Yellow"
        } else {
            $qualidade = "Ruim"
            $cor = "Red"
        }
        
        Write-Host "Qualidade da conexão: $qualidade" -ForegroundColor $cor
    } else {
        Write-Host "Não foi possível conectar à internet. Verifique sua conexão." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host ""
    
    # Teste 2: Verificar resolução DNS
    Write-Host "Teste 2: Verificando velocidade de resolução DNS..." -ForegroundColor Yellow
    $domains = @("google.com", "microsoft.com", "amazon.com", "facebook.com", "youtube.com")
    $dnsResults = @()
    
    foreach ($domain in $domains) {
        $startTime = Get-Date
        try {
            $null = Resolve-DnsName -Name $domain -ErrorAction SilentlyContinue
            $endTime = Get-Date
            $timeSpan = New-TimeSpan -Start $startTime -End $endTime
            $dnsResults += [PSCustomObject]@{
                Domain = $domain
                Time = $timeSpan.TotalMilliseconds
                Status = "OK"
            }
        } catch {
            $dnsResults += [PSCustomObject]@{
                Domain = $domain
                Time = 0
                Status = "Falha"
            }
        }
    }
    
    $dnsResults | Format-Table -AutoSize
    
    $avgDnsTime = ($dnsResults | Where-Object { $_.Status -eq "OK" } | Measure-Object -Property Time -Average).Average
    Write-Host "Tempo médio de resolução DNS: $([math]::Round($avgDnsTime, 2)) ms" -ForegroundColor $(if ($avgDnsTime -lt 50) { "Green" } elseif ($avgDnsTime -lt 100) { "Yellow" } else { "Red" })
    
    Write-Host ""
    
    # Teste 3: Verificar MTU
    Write-Host "Teste 3: Verificando MTU (Maximum Transmission Unit)..." -ForegroundColor Yellow
    
    $activeAdapter = Get-NetAdapter | Where-Object { $_.Status -eq "Up" } | Select-Object -First 1
    if ($activeAdapter) {
        $mtu = Get-NetIPInterface -InterfaceIndex $activeAdapter.ifIndex -AddressFamily IPv4 | Select-Object -ExpandProperty NlMtu
        Write-Host "MTU atual: $mtu bytes" -ForegroundColor White
        
        if ($mtu -eq 1500) {
            Write-Host "MTU está no valor padrão (1500), que é ideal para a maioria das conexões." -ForegroundColor Green
        } elseif ($mtu -lt 1500) {
            Write-Host "MTU está abaixo do valor padrão. Isso pode afetar o desempenho em algumas situações." -ForegroundColor Yellow
        } else {
            Write-Host "MTU está acima do valor padrão. Isso pode causar fragmentação de pacotes em algumas redes." -ForegroundColor Yellow
        }
    } else {
        Write-Host "Não foi possível determinar o MTU. Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
    }
    
    Write-Host ""
    
    # Teste 4: Verificar perda de pacotes
    Write-Host "Teste 4: Verificando perda de pacotes..." -ForegroundColor Yellow
    $packetLossTest = Test-Connection -ComputerName google.com -Count 50 -ErrorAction SilentlyContinue
    
    if ($packetLossTest) {
        $packetsSent = 50
        $packetsReceived = ($packetLossTest | Measure-Object).Count
        $packetsLost = $packetsSent - $packetsReceived
        $packetLossPercentage = ($packetsLost / $packetsSent) * 100
        
        Write-Host "Pacotes enviados: $packetsSent" -ForegroundColor White
        Write-Host "Pacotes recebidos: $packetsReceived" -ForegroundColor White
        Write-Host "Pacotes perdidos: $packetsLost" -ForegroundColor $(if ($packetsLost -eq 0) { "Green" } elseif ($packetsLost -lt 5) { "Yellow" } else { "Red" })
        Write-Host "Percentual de perda: $([math]::Round($packetLossPercentage, 2))%" -ForegroundColor $(if ($packetLossPercentage -eq 0) { "Green" } elseif ($packetLossPercentage -lt 10) { "Yellow" } else { "Red" })
        
        # Avaliação da qualidade da conexão baseada na perda de pacotes
        if ($packetLossPercentage -eq 0) {
            Write-Host "Qualidade da conexão (perda de pacotes): Excelente" -ForegroundColor Green
        } elseif ($packetLossPercentage -lt 2) {
            Write-Host "Qualidade da conexão (perda de pacotes): Boa" -ForegroundColor Green
        } elseif ($packetLossPercentage -lt 5) {
            Write-Host "Qualidade da conexão (perda de pacotes): Razoável" -ForegroundColor Yellow
        } else {
            Write-Host "Qualidade da conexão (perda de pacotes): Ruim" -ForegroundColor Red
        }
    } else {
        Write-Host "Não foi possível realizar o teste de perda de pacotes." -ForegroundColor Red
    }
    
    Write-Host ""
    
    # Resumo e recomendações
    Write-Host "=== Resumo da Análise de Rede ===" -ForegroundColor Cyan
    
    # Recomendações baseadas nos resultados
    Write-Host "Recomendações:" -ForegroundColor Yellow
    
    if ($avgLatency -gt 100) {
        Write-Host "- Sua latência está alta. Considere verificar outros dispositivos na rede ou contatar seu provedor." -ForegroundColor Yellow
    }
    
    if ($avgDnsTime -gt 100) {
        Write-Host "- A resolução DNS está lenta. Considere mudar para servidores DNS mais rápidos como Google (8.8.8.8) ou Cloudflare (1.1.1.1)." -ForegroundColor Yellow
    }
    
    if ($packetLossPercentage -gt 2) {
        Write-Host "- Há perda significativa de pacotes. Verifique sua conexão física ou contate seu provedor." -ForegroundColor Yellow
    }
    
    if ($mtu -ne 1500 -and $mtu -ne 0) {
        Write-Host "- Seu MTU não está no valor padrão. Considere ajustá-lo para 1500 para melhor desempenho." -ForegroundColor Yellow
    }
    
    if ($avgLatency -le 100 -and $avgDnsTime -le 100 -and $packetLossPercentage -le 2) {
        Write-Host "- Sua conexão parece estar em boas condições! Não há problemas significativos detectados." -ForegroundColor Green
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-ConfigureQoS {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Configurar QoS (Qualidade de Serviço) ---" -ForegroundColor Gray
    Write-Host "Configura prioridades de tráfego de rede para melhorar o desempenho de aplicações específicas." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "O QoS (Quality of Service) permite priorizar certos tipos de tráfego de rede sobre outros." -ForegroundColor White
    Write-Host "Isso é útil para garantir que aplicações importantes como jogos, chamadas de vídeo ou streaming" -ForegroundColor White
    Write-Host "tenham prioridade sobre downloads ou atualizações em segundo plano." -ForegroundColor White
    Write-Host ""
    
    Write-Host "Opções de configuração de QoS:" -ForegroundColor Yellow
    Write-Host "[1] Configurar QoS para Jogos (prioriza tráfego de jogos)" -ForegroundColor White
    Write-Host "[2] Configurar QoS para Videoconferência (prioriza Zoom, Teams, etc.)" -ForegroundColor White
    Write-Host "[3] Configurar QoS para Streaming (prioriza Netflix, YouTube, etc.)" -ForegroundColor White
    Write-Host "[4] Configurar QoS Personalizado" -ForegroundColor White
    Write-Host "[5] Desativar QoS" -ForegroundColor White
    Write-Host "[0] Voltar" -ForegroundColor White
    Write-Host ""
    
    $qosChoice = Read-Host "Selecione uma opção"
    
    switch ($qosChoice) {
        "1" {
            Write-Host "Configurando QoS para Jogos..." -ForegroundColor Yellow
            
            # Criar política de QoS para jogos
            Write-Host "Criando política de QoS para jogos..." -ForegroundColor DarkGray
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS para jogos usando netsh
            netsh advfirewall firewall add rule name="QoS-Games" dir=out action=allow protocol=UDP remoteport=3074,3478,3479,3480 enable=yes
            
            # Configurar prioridade para jogos
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política para jogos
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Application Name" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Protocol" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Remote Port" -Value "3074,3478-3480" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "DSCP Value" -Value "46" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS para Jogos configurado com sucesso!" -ForegroundColor Green
            Write-Host "Os jogos online agora terão prioridade sobre outros tipos de tráfego." -ForegroundColor Green
        }
        "2" {
            Write-Host "Configurando QoS para Videoconferência..." -ForegroundColor Yellow
            
            # Criar política de QoS para videoconferência
            Write-Host "Criando política de QoS para videoconferência..." -ForegroundColor DarkGray
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS para videoconferência usando netsh
            netsh advfirewall firewall add rule name="QoS-VideoConference" dir=out action=allow protocol=UDP remoteport=3478-3479,8801-8810 enable=yes
            
            # Configurar prioridade para videoconferência
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política para Zoom
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Application Name" -Value "Zoom.exe" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Protocol" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Remote Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "DSCP Value" -Value "46" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Throttle Rate" -Value "-1" -Type String
            
            # Adicionar política para Teams
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Application Name" -Value "Teams.exe" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Protocol" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Remote Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "DSCP Value" -Value "46" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS para Videoconferência configurado com sucesso!" -ForegroundColor Green
            Write-Host "Aplicativos como Zoom e Teams agora terão prioridade sobre outros tipos de tráfego." -ForegroundColor Green
        }
        "3" {
            Write-Host "Configurando QoS para Streaming..." -ForegroundColor Yellow
            
            # Criar política de QoS para streaming
            Write-Host "Criando política de QoS para streaming..." -ForegroundColor DarkGray
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS para streaming usando netsh
            netsh advfirewall firewall add rule name="QoS-Streaming" dir=out action=allow protocol=TCP remoteport=80,443 enable=yes
            
            # Configurar prioridade para streaming
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política para navegadores (streaming)
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Application Name" -Value "*.exe" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Protocol" -Value "TCP" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Remote Port" -Value "80,443" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "DSCP Value" -Value "34" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS para Streaming configurado com sucesso!" -ForegroundColor Green
            Write-Host "Serviços de streaming como Netflix e YouTube agora terão prioridade sobre outros tipos de tráfego." -ForegroundColor Green
        }
        "4" {
            Write-Host "Configurando QoS Personalizado..." -ForegroundColor Yellow
            
            # Solicitar informações para QoS personalizado
            $appName = Read-Host "Digite o nome do aplicativo (ex: chrome.exe, ou * para todos)"
            $protocol = Read-Host "Digite o protocolo (TCP, UDP, ou * para ambos)"
            $remotePorts = Read-Host "Digite as portas remotas (ex: 80,443, ou * para todas)"
            $priority = Read-Host "Digite o valor de prioridade DSCP (0-63, recomendado: 46 para alta prioridade)"
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS personalizado
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política personalizada
            $policyName = "CustomQoS_" + (Get-Random)
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Application Name" -Value $appName -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Protocol" -Value $protocol -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Remote Port" -Value $remotePorts -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "DSCP Value" -Value $priority -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS Personalizado configurado com sucesso!" -ForegroundColor Green
            Write-Host "A política de QoS personalizada foi criada com o nome: $policyName" -ForegroundColor Green
        }
        "5" {
            Write-Host "Desativando QoS..." -ForegroundColor Yellow
            
            # Remover políticas de QoS
            if (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS") {
                Remove-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Recurse -Force
                Write-Host "Políticas de QoS removidas." -ForegroundColor Green
            }
            
            # Remover regras de firewall relacionadas a QoS
            netsh advfirewall firewall delete rule name="QoS-Games"
            netsh advfirewall firewall delete rule name="QoS-VideoConference"
            netsh advfirewall firewall delete rule name="QoS-Streaming"
            
            # Parar serviço QoS
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService) {
                Stop-Service -Name "QoS RSVP" -Force -ErrorAction SilentlyContinue
                Set-Service -Name "QoS RSVP" -Startup### Enhanced TORK Optimizer

I'll enhance the TORK optimizer with more comprehensive functionality across all features, starting with an expanded Simple Cleanup function and then improving all other options.

```powershell type="code"
# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total### Enhanced TORK Optimizer

I'll enhance the TORK optimizer with more comprehensive functionality across all features, starting with an expanded Simple Cleanup function and then improving all other options.

```powershell type="code"
# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total = ($eventLogs | Measure-Object -Property FileSize -Sum).Sum / 1MB
    
    Write-Host "Encontrados $totalLogCount logs de eventos ocupando aproximadamente $([math]::Round($total, 2)) MB." -ForegroundColor White
    
    # Limpar os logs principais
    Write-Host "Limpando logs principais do sistema..." -ForegroundColor Yellow
    
    $mainLogs = @("Application", "System", "Security")
    foreach ($log in $mainLogs) {
        try {
            $logSize = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).FileSize / 1MB
            $logRecords = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).RecordCount
            
            Write-Host "Log $log: $([math]::Round($logSize, 2)) MB com $logRecords registros" -ForegroundColor DarkGray
            wevtutil cl $log
            Write-Host "Log $log limpo com sucesso!" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível limpar o log $log." -ForegroundColor Red
        }
    }
    
    # Perguntar se deseja limpar todos os outros logs
    $confirmAllLogs = Read-Host "Deseja limpar todos os outros logs do sistema? (s/n)"
    
    if ($confirmAllLogs -eq 's') {
        Write-Host "Limpando todos os logs do sistema... (isso pode levar algum tempo)" -ForegroundColor Yellow
        
        $otherLogs = $eventLogs | Where-Object { $_.LogName -notin $mainLogs }
        foreach ($log in $otherLogs) {
            try {
                wevtutil cl $log.LogName
            } catch {
                # Ignorar erros silenciosamente
            }
        }
        
        Write-Host "Todos os logs do sistema foram limpos!" -ForegroundColor Green
    } else {
        Write-Host "Apenas os logs principais foram limpos." -ForegroundColor Green
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWindowsUpdateCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Atualizações do Windows ---" -ForegroundColor Yellow
    Write-Host "Limpa os arquivos temporários de atualizações do Windows para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando cache de atualizações do Windows..." -ForegroundColor Yellow
    
    # Verificar tamanho da pasta SoftwareDistribution antes da limpeza
    $updateCachePath = "$env:SystemRoot\SoftwareDistribution\Download"
    $updateCacheFiles = Get-ChildItem -Path $updateCachePath -Recurse -ErrorAction SilentlyContinue
    $updateCacheSize = ($updateCacheFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "O cache de atualizações do Windows está ocupando aproximadamente $([math]::Round($updateCacheSize, 2)) MB." -ForegroundColor White
    
    # Parar o serviço Windows Update
    Write-Host "Parando o serviço Windows Update..." -ForegroundColor DarkGray
    Stop-Service -Name wuauserv -Force -ErrorAction SilentlyContinue
    
    # Limpar o cache de atualizações
    Write-Host "Limpando o cache de atualizações do Windows..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    
    # Iniciar o serviço Windows Update novamente
    Write-Host "Iniciando o serviço Windows Update..." -ForegroundColor DarkGray
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    
    Write-Host "Cache de atualizações do Windows limpo com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de atualizações:" -ForegroundColor Cyan
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray
    Write-Host "- Resolução de problemas com atualizações do Windows" -ForegroundColor DarkGray
    Write-Host "- Melhoria no desempenho do sistema" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanHibernationFile {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos de Hibernação ---" -ForegroundColor White
    Write-Host "Gerencia o arquivo de hibernação (hiberfil.sys) para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar status atual da hibernação
    Write-Host "Verificando status atual da hibernação..." -ForegroundColor Yellow
    $hibernationStatus = powercfg.exe /availablesleepstates | Select-String -Pattern "Hibernação"
    
    if ($hibernationStatus -match "Hibernação está desativada") {
        $currentStatus = "desativada"
    } else {
        $currentStatus = "ativada"
    }
    
    Write-Host "Status atual da hibernação: $currentStatus" -ForegroundColor White
    
    # Verificar tamanho do arquivo de hibernação (se existir)
    $systemDrive = $env:SystemDrive
    $hiberfilPath = "$systemDrive\hiberfil.sys"
    
    if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
        try {
            $hiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
            Write-Host "Tamanho do arquivo de hibernação: $([math]::Round($hiberfilSize, 2)) GB" -ForegroundColor White
        } catch {
            Write-Host "Não foi possível determinar o tamanho do arquivo de hibernação." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Arquivo de hibernação não encontrado (já está desativado)." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja desativar ou ativar a hibernação
    if ($currentStatus -eq "ativada") {
        $confirmHibernation = Read-Host "Deseja desativar a hibernação para liberar espaço em disco? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Desativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate off
            Write-Host "Hibernação desativada com sucesso! O arquivo hiberfil.sys foi removido." -ForegroundColor Green
        } else {
            Write-Host "Hibernação mantida ativada." -ForegroundColor Green
        }
    } else {
        $confirmHibernation = Read-Host "Deseja ativar a hibernação? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Ativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate on
            Write-Host "Hibernação ativada com sucesso! O arquivo hiberfil.sys foi criado." -ForegroundColor Green
            
            # Verificar novo tamanho do arquivo de hibernação
            if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
                try {
                    $newHiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
                    Write-Host "Tamanho do novo arquivo de hibernação: $([math]::Round($newHiberfilSize, 2)) GB" -ForegroundColor White
                } catch {
                    Write-Host "Não foi possível determinar o tamanho do novo arquivo de hibernação." -ForegroundColor DarkGray
                }
            }
        } else {
            Write-Host "Hibernação mantida desativada." -ForegroundColor Green
        }
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço foi afetado:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a hibernação:" -ForegroundColor Cyan
    Write-Host "- O arquivo de hibernação (hiberfil.sys) geralmente ocupa espaço equivalente a 75% da RAM instalada" -ForegroundColor DarkGray
    Write-Host "- Desativar a hibernação libera esse espaço, mas você não poderá usar o modo de hibernação" -ForegroundColor DarkGray
    Write-Host "- A hibernação é útil para laptops, pois salva o estado do sistema no disco antes de desligar" -ForegroundColor DarkGray
    Write-Host "- Para desktops, a hibernação geralmente é menos necessária" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWinSxS {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Pasta WinSxS ---" -ForegroundColor Magenta
    Write-Host "Limpa componentes não utilizados da pasta WinSxS para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "A pasta WinSxS (Windows Side-by-Side) armazena componentes do sistema e pode ocupar muito espaço." -ForegroundColor White
    Write-Host "Esta limpeza é segura e usa ferramentas oficiais do Windows para remover componentes não utilizados." -ForegroundColor White
    Write-Host ""
    
    # Verificar tamanho da pasta WinSxS antes da limpeza
    Write-Host "Verificando tamanho da pasta WinSxS (isso pode levar algum tempo)..." -ForegroundColor Yellow
    
    try {
        $winSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
        Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($winSxSSize, 2)) GB" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível determinar o tamanho da pasta WinSxS." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja prosseguir com a limpeza
    $confirmCleanup = Read-Host "Deseja prosseguir com a limpeza da pasta WinSxS? (s/n)"
    
    if ($confirmCleanup -eq 's') {
        Write-Host "Executando limpeza de componentes não utilizados (isso pode levar vários minutos)..." -ForegroundColor Yellow
        
        # Executar limpeza de componentes
        Write-Host "Etapa 1: Limpeza de componentes..." -ForegroundColor DarkGray
        Dism.exe /Online /Cleanup-Image /StartComponentCleanup
        
        # Perguntar se deseja executar limpeza mais agressiva (com reset base)
        $confirmResetBase = Read-Host "Deseja executar uma limpeza mais profunda? (remove a capacidade de desinstalar atualizações) (s/n)"
        
        if ($confirmResetBase -eq 's') {
            Write-Host "Etapa 2: Executando limpeza profunda (isso pode levar muito tempo)..." -ForegroundColor DarkGray
            Dism.exe /Online /Cleanup-Image /StartComponentCleanup /ResetBase
            Write-Host "Limpeza profunda concluída!" -ForegroundColor Green
        }
        
        Write-Host "Limpeza da pasta WinSxS concluída com sucesso!" -ForegroundColor Green
        
        # Verificar tamanho da pasta WinSxS após a limpeza
        try {
            $newWinSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
            $savedSpace = $winSxSSize - $newWinSxSSize
            
            Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($newWinSxSSize, 2)) GB" -ForegroundColor White
            Write-Host "Espaço liberado: $([math]::Round($savedSpace, 2)) GB" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível determinar o novo tamanho da pasta WinSxS." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Limpeza da pasta WinSxS cancelada." -ForegroundColor Yellow
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a pasta WinSxS:" -ForegroundColor Cyan
    Write-Host "- A pasta WinSxS armazena componentes do sistema Windows e atualizações" -ForegroundColor DarkGray
    Write-Host "- Não é recomendado excluir esta pasta manualmente" -ForegroundColor DarkGray
    Write-Host "- A limpeza realizada é segura e usa ferramentas oficiais do Windows" -ForegroundColor DarkGray
    Write-Host "- Após a limpeza profunda, não será possível desinstalar algumas atualizações" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - REDE (Expandidas) ---
function Invoke-NetworkFlushDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Limpar Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkChangeDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Mudar Servidor DNS ---" -ForegroundColor Cyan
    Write-Host "Permite definir servidores DNS personalizados para suas conexões de rede." -ForegroundColor DarkGray
    Write-Host ""

    # Listar adaptadores de rede ativos
    Write-Host "Listando adaptadores de rede ativos..." -ForegroundColor Yellow
    $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
    
    if ($networkAdapters.Count -eq 0) {
        Write-Host "Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host "Adaptadores de rede ativos:" -ForegroundColor White
    $index = 1
    foreach ($adapter in $networkAdapters) {
        Write-Host "[$index] $($adapter.Name) - $($adapter.InterfaceDescription)" -ForegroundColor White
        $index++
    }
    Write-Host ""
    
    # Selecionar adaptador de rede
    $adapterChoice = Read-Host "Selecione o número do adaptador que deseja configurar (ou 0 para voltar)"
    
    if ($adapterChoice -eq "0" -or $adapterChoice -eq "") {
        Write-Host "Operação cancelada." -ForegroundColor Yellow
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $adapterIndex = [int]$adapterChoice - 1
    if ($adapterIndex -lt 0 -or $adapterIndex -ge $networkAdapters.Count) {
        Write-Host "Seleção inválida." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $selectedAdapter = $networkAdapters[$adapterIndex]
    
    # Mostrar configuração DNS atual
    Write-Host "Configuração DNS atual para $($selectedAdapter.Name):" -ForegroundColor Yellow
    $currentDns = Get-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -AddressFamily IPv4 | Select-Object -ExpandProperty ServerAddresses
    
    if ($currentDns.Count -eq 0) {
        Write-Host "Nenhum servidor DNS configurado manualmente (usando DHCP)." -ForegroundColor DarkGray
    } else {
        foreach ($dns in $currentDns) {
            Write-Host $dns -ForegroundColor White
        }
    }
    Write-Host ""
    
    # Opções de DNS
    Write-Host "Opções de DNS:" -ForegroundColor Yellow
    Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
    Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
    Write-Host "[3] OpenDNS (208.67.222.222, 208.67.220.220)" -ForegroundColor White
    Write-Host "[4] Quad9 (9.9.9.9, 149.112.112.112)" -ForegroundColor White
    Write-Host "[5] AdGuard DNS (94.140.14.14, 94.140.15.15)" -ForegroundColor White
    Write-Host "[6] Inserir DNS personalizado" -ForegroundColor White
    Write-Host "[7] Usar DNS automático (DHCP)" -ForegroundColor White
    Write-Host "[0] Cancelar" -ForegroundColor White
    Write-Host ""
    
    $dnsChoice = Read-Host "Selecione uma opção"
    
    switch ($dnsChoice) {
        "1" {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            $dnsName = "Google DNS"
        }
        "2" {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            $dnsName = "Cloudflare DNS"
        }
        "3" {
            $primaryDns = "208.67.222.222"
            $secondaryDns = "208.67.220.220"
            $dnsName = "OpenDNS"
        }
        "4" {
            $primaryDns = "9.9.9.9"
            $secondaryDns = "149.112.112.112"
            $dnsName = "Quad9"
        }
        "5" {
            $primaryDns = "94.140.14.14"
            $secondaryDns = "94.140.15.15"
            $dnsName = "AdGuard DNS"
        }
        "6" {
            $primaryDns = Read-Host "Digite o endereço do DNS primário"
            $secondaryDns = Read-Host "Digite o endereço do DNS secundário (ou deixe em branco)"
            $dnsName = "DNS Personalizado"
        }
        "7" {
            Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ResetServerAddresses
            Write-Host "Configuração de DNS definida para automática (DHCP)." -ForegroundColor Green
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
    }
    
    # Aplicar configuração de DNS
    if ($secondaryDns -eq "") {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns
    } else {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns, $secondaryDns
    }
    
    Write-Host "Configuração de DNS alterada para $dnsName." -ForegroundColor Green
    Write-Host "DNS Primário: $primaryDns" -ForegroundColor White
    if ($secondaryDns -ne "") {
        Write-Host "DNS Secundário: $secondaryDns" -ForegroundColor White
    }
    
    # Limpar cache DNS após a mudança
    Write-Host "Limpando cache DNS para aplicar as alterações..." -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo." -ForegroundColor Green
    
    Write-Host "`nBenefícios de usar servidores DNS alternativos:" -ForegroundColor Cyan
    Write-Host "- Maior velocidade de resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Melhor confiabilidade e disponibilidade" -ForegroundColor DarkGray
    Write-Host "- Alguns servidores oferecem proteção adicional contra malware e phishing" -ForegroundColor DarkGray
    Write-Host "- Possibilidade de contornar bloqueios de conteúdo baseados em DNS" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkReset {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Resetar Configurações de Rede ---" -ForegroundColor White
    Write-Host "Reinicia os componentes de rede. Use como último recurso para solucionar problemas de conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "!!! ATENÇÃO: ESTE COMANDO VAI REINICIAR SUAS CONFIGURAÇÕES DE REDE !!!" -ForegroundColor Red
    Write-Host "Sua conexão será interrompida temporariamente e todas as configurações de rede personalizadas serão redefinidas." -ForegroundColor Yellow
    Write-Host "Isso inclui adaptadores de rede, configurações de DNS, configurações de proxy, etc." -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "Esta operação pode ajudar a resolver os seguintes problemas:" -ForegroundColor Cyan
    Write-Host "- Conexões de rede instáveis ou intermitentes" -ForegroundColor DarkGray
    Write-Host "- Problemas de DNS ou resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Problemas de conectividade após instalação de software ou atualizações" -ForegroundColor DarkGray
    Write-Host "- Erros de rede persistentes que não são resolvidos por outros métodos" -ForegroundColor DarkGray
    Write-Host ""
    
    $confirm = Read-Host "Tem certeza que deseja resetar as configurações de rede? (digite 'sim' para confirmar)"
    
    if ($confirm -eq 'sim') {
        Write-Host "Iniciando reset de configurações de rede..." -ForegroundColor Yellow
        
        # Etapa 1: Resetar pilha TCP/IP
        Write-Host "Etapa 1: Resetando pilha TCP/IP..." -ForegroundColor DarkGray
        netsh int ip reset
        
        # Etapa 2: Resetar catálogo Winsock
        Write-Host "Etapa 2: Resetando catálogo Winsock..." -ForegroundColor DarkGray
        netsh winsock reset
        
        # Etapa 3: Limpar cache DNS
        Write-Host "Etapa 3: Limpando cache DNS..." -ForegroundColor DarkGray
        ipconfig /flushdns
        
        # Etapa 4: Renovar configurações DHCP
        Write-Host "Etapa 4: Renovando configurações DHCP..." -ForegroundColor DarkGray
        ipconfig /release
        ipconfig /renew
        
        # Etapa 5: Reiniciar adaptadores de rede
        Write-Host "Etapa 5: Reiniciando adaptadores de rede..." -ForegroundColor DarkGray
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        
        Write-Host "Reset de configurações de rede concluído!" -ForegroundColor Green
        Write-Host "Recomenda-se reiniciar o computador para aplicar todas as alterações." -ForegroundColor Yellow
        
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        } else {
            Write-Host "Reinício cancelado. Algumas alterações podem não ter efeito até que o computador seja reiniciado." -ForegroundColor Yellow
        }
    } else {
        Write-Host "Reset de configurações de rede cancelado." -ForegroundColor Green
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-OptimizeTcpIp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Otimizar Configurações TCP/IP ---" -ForegroundColor Green
    Write-Host "Ajusta configurações avançadas do TCP/IP para melhorar o desempenho da conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função otimiza vários parâmetros TCP/IP para melhorar a velocidade e estabilidade da conexão." -ForegroundColor White
    Write-Host "As otimizações são seguras e podem ser revertidas se necessário." -ForegroundColor White
    Write-Host ""
    
    Write-Host "Configurações atuais:" -ForegroundColor Yellow
    
    # Mostrar configurações atuais
    Write-Host "Auto-Tuning Level:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Auto-Tuning Level"
    
    Write-Host "Congestion Provider:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Congestion Control Provider"
    
    Write-Host "ECN Capability:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "ECN Capability"
    
    Write-Host "Receive-Side Scaling (RSS):" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Receive-Side Scaling State"
    
    Write-Host ""
    $confirm = Read-Host "Deseja aplicar otimizações TCP/IP recomendadas? (s/n)"
    
    if ($confirm -eq 's') {
        Write-Host "Aplicando otimizações TCP/IP..." -ForegroundColor Yellow
        
        # Otimização 1: Habilitar TCP Window Auto-Tuning
        Write-Host "Configurando TCP Auto-Tuning para 'normal'..." -ForegroundColor DarkGray
        netsh int tcp set global### Enhanced TORK Optimizer

I'll enhance the TORK optimizer with more comprehensive functionality across all features, starting with an expanded Simple Cleanup function and then improving all other options.

```powershell type="code"
# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total### Enhanced TORK Optimizer

I'll enhance the TORK optimizer with more comprehensive functionality across all features, starting with an expanded Simple Cleanup function and then improving all other options.

```powershell type="code"
# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total = ($eventLogs | Measure-Object -Property FileSize -Sum).Sum / 1MB
    
    Write-Host "Encontrados $totalLogCount logs de eventos ocupando aproximadamente $([math]::Round($total, 2)) MB." -ForegroundColor White
    
    # Limpar os logs principais
    Write-Host "Limpando logs principais do sistema..." -ForegroundColor Yellow
    
    $mainLogs = @("Application", "System", "Security")
    foreach ($log in $mainLogs) {
        try {
            $logSize = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).FileSize / 1MB
            $logRecords = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).RecordCount
            
            Write-Host "Log $log: $([math]::Round($logSize, 2)) MB com $logRecords registros" -ForegroundColor DarkGray
            wevtutil cl $log
            Write-Host "Log $log limpo com sucesso!" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível limpar o log $log." -ForegroundColor Red
        }
    }
    
    # Perguntar se deseja limpar todos os outros logs
    $confirmAllLogs = Read-Host "Deseja limpar todos os outros logs do sistema? (s/n)"
    
    if ($confirmAllLogs -eq 's') {
        Write-Host "Limpando todos os logs do sistema... (isso pode levar algum tempo)" -ForegroundColor Yellow
        
        $otherLogs = $eventLogs | Where-Object { $_.LogName -notin $mainLogs }
        foreach ($log in $otherLogs) {
            try {
                wevtutil cl $log.LogName
            } catch {
                # Ignorar erros silenciosamente
            }
        }
        
        Write-Host "Todos os logs do sistema foram limpos!" -ForegroundColor Green
    } else {
        Write-Host "Apenas os logs principais foram limpos." -ForegroundColor Green
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWindowsUpdateCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Atualizações do Windows ---" -ForegroundColor Yellow
    Write-Host "Limpa os arquivos temporários de atualizações do Windows para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando cache de atualizações do Windows..." -ForegroundColor Yellow
    
    # Verificar tamanho da pasta SoftwareDistribution antes da limpeza
    $updateCachePath = "$env:SystemRoot\SoftwareDistribution\Download"
    $updateCacheFiles = Get-ChildItem -Path $updateCachePath -Recurse -ErrorAction SilentlyContinue
    $updateCacheSize = ($updateCacheFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "O cache de atualizações do Windows está ocupando aproximadamente $([math]::Round($updateCacheSize, 2)) MB." -ForegroundColor White
    
    # Parar o serviço Windows Update
    Write-Host "Parando o serviço Windows Update..." -ForegroundColor DarkGray
    Stop-Service -Name wuauserv -Force -ErrorAction SilentlyContinue
    
    # Limpar o cache de atualizações
    Write-Host "Limpando o cache de atualizações do Windows..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    
    # Iniciar o serviço Windows Update novamente
    Write-Host "Iniciando o serviço Windows Update..." -ForegroundColor DarkGray
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    
    Write-Host "Cache de atualizações do Windows limpo com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de atualizações:" -ForegroundColor Cyan
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray
    Write-Host "- Resolução de problemas com atualizações do Windows" -ForegroundColor DarkGray
    Write-Host "- Melhoria no desempenho do sistema" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanHibernationFile {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos de Hibernação ---" -ForegroundColor White
    Write-Host "Gerencia o arquivo de hibernação (hiberfil.sys) para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar status atual da hibernação
    Write-Host "Verificando status atual da hibernação..." -ForegroundColor Yellow
    $hibernationStatus = powercfg.exe /availablesleepstates | Select-String -Pattern "Hibernação"
    
    if ($hibernationStatus -match "Hibernação está desativada") {
        $currentStatus = "desativada"
    } else {
        $currentStatus = "ativada"
    }
    
    Write-Host "Status atual da hibernação: $currentStatus" -ForegroundColor White
    
    # Verificar tamanho do arquivo de hibernação (se existir)
    $systemDrive = $env:SystemDrive
    $hiberfilPath = "$systemDrive\hiberfil.sys"
    
    if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
        try {
            $hiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
            Write-Host "Tamanho do arquivo de hibernação: $([math]::Round($hiberfilSize, 2)) GB" -ForegroundColor White
        } catch {
            Write-Host "Não foi possível determinar o tamanho do arquivo de hibernação." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Arquivo de hibernação não encontrado (já está desativado)." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja desativar ou ativar a hibernação
    if ($currentStatus -eq "ativada") {
        $confirmHibernation = Read-Host "Deseja desativar a hibernação para liberar espaço em disco? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Desativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate off
            Write-Host "Hibernação desativada com sucesso! O arquivo hiberfil.sys foi removido." -ForegroundColor Green
        } else {
            Write-Host "Hibernação mantida ativada." -ForegroundColor Green
        }
    } else {
        $confirmHibernation = Read-Host "Deseja ativar a hibernação? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Ativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate on
            Write-Host "Hibernação ativada com sucesso! O arquivo hiberfil.sys foi criado." -ForegroundColor Green
            
            # Verificar novo tamanho do arquivo de hibernação
            if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
                try {
                    $newHiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
                    Write-Host "Tamanho do novo arquivo de hibernação: $([math]::Round($newHiberfilSize, 2)) GB" -ForegroundColor White
                } catch {
                    Write-Host "Não foi possível determinar o tamanho do novo arquivo de hibernação." -ForegroundColor DarkGray
                }
            }
        } else {
            Write-Host "Hibernação mantida desativada." -ForegroundColor Green
        }
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço foi afetado:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a hibernação:" -ForegroundColor Cyan
    Write-Host "- O arquivo de hibernação (hiberfil.sys) geralmente ocupa espaço equivalente a 75% da RAM instalada" -ForegroundColor DarkGray
    Write-Host "- Desativar a hibernação libera esse espaço, mas você não poderá usar o modo de hibernação" -ForegroundColor DarkGray
    Write-Host "- A hibernação é útil para laptops, pois salva o estado do sistema no disco antes de desligar" -ForegroundColor DarkGray
    Write-Host "- Para desktops, a hibernação geralmente é menos necessária" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWinSxS {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Pasta WinSxS ---" -ForegroundColor Magenta
    Write-Host "Limpa componentes não utilizados da pasta WinSxS para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "A pasta WinSxS (Windows Side-by-Side) armazena componentes do sistema e pode ocupar muito espaço." -ForegroundColor White
    Write-Host "Esta limpeza é segura e usa ferramentas oficiais do Windows para remover componentes não utilizados." -ForegroundColor White
    Write-Host ""
    
    # Verificar tamanho da pasta WinSxS antes da limpeza
    Write-Host "Verificando tamanho da pasta WinSxS (isso pode levar algum tempo)..." -ForegroundColor Yellow
    
    try {
        $winSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
        Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($winSxSSize, 2)) GB" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível determinar o tamanho da pasta WinSxS." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja prosseguir com a limpeza
    $confirmCleanup = Read-Host "Deseja prosseguir com a limpeza da pasta WinSxS? (s/n)"
    
    if ($confirmCleanup -eq 's') {
        Write-Host "Executando limpeza de componentes não utilizados (isso pode levar vários minutos)..." -ForegroundColor Yellow
        
        # Executar limpeza de componentes
        Write-Host "Etapa 1: Limpeza de componentes..." -ForegroundColor DarkGray
        Dism.exe /Online /Cleanup-Image /StartComponentCleanup
        
        # Perguntar se deseja executar limpeza mais agressiva (com reset base)
        $confirmResetBase = Read-Host "Deseja executar uma limpeza mais profunda? (remove a capacidade de desinstalar atualizações) (s/n)"
        
        if ($confirmResetBase -eq 's') {
            Write-Host "Etapa 2: Executando limpeza profunda (isso pode levar muito tempo)..." -ForegroundColor DarkGray
            Dism.exe /Online /Cleanup-Image /StartComponentCleanup /ResetBase
            Write-Host "Limpeza profunda concluída!" -ForegroundColor Green
        }
        
        Write-Host "Limpeza da pasta WinSxS concluída com sucesso!" -ForegroundColor Green
        
        # Verificar tamanho da pasta WinSxS após a limpeza
        try {
            $newWinSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
            $savedSpace = $winSxSSize - $newWinSxSSize
            
            Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($newWinSxSSize, 2)) GB" -ForegroundColor White
            Write-Host "Espaço liberado: $([math]::Round($savedSpace, 2)) GB" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível determinar o novo tamanho da pasta WinSxS." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Limpeza da pasta WinSxS cancelada." -ForegroundColor Yellow
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a pasta WinSxS:" -ForegroundColor Cyan
    Write-Host "- A pasta WinSxS armazena componentes do sistema Windows e atualizações" -ForegroundColor DarkGray
    Write-Host "- Não é recomendado excluir esta pasta manualmente" -ForegroundColor DarkGray
    Write-Host "- A limpeza realizada é segura e usa ferramentas oficiais do Windows" -ForegroundColor DarkGray
    Write-Host "- Após a limpeza profunda, não será possível desinstalar algumas atualizações" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - REDE (Expandidas) ---
function Invoke-NetworkFlushDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Limpar Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkChangeDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Mudar Servidor DNS ---" -ForegroundColor Cyan
    Write-Host "Permite definir servidores DNS personalizados para suas conexões de rede." -ForegroundColor DarkGray
    Write-Host ""

    # Listar adaptadores de rede ativos
    Write-Host "Listando adaptadores de rede ativos..." -ForegroundColor Yellow
    $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
    
    if ($networkAdapters.Count -eq 0) {
        Write-Host "Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host "Adaptadores de rede ativos:" -ForegroundColor White
    $index = 1
    foreach ($adapter in $networkAdapters) {
        Write-Host "[$index] $($adapter.Name) - $($adapter.InterfaceDescription)" -ForegroundColor White
        $index++
    }
    Write-Host ""
    
    # Selecionar adaptador de rede
    $adapterChoice = Read-Host "Selecione o número do adaptador que deseja configurar (ou 0 para voltar)"
    
    if ($adapterChoice -eq "0" -or $adapterChoice -eq "") {
        Write-Host "Operação cancelada." -ForegroundColor Yellow
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $adapterIndex = [int]$adapterChoice - 1
    if ($adapterIndex -lt 0 -or $adapterIndex -ge $networkAdapters.Count) {
        Write-Host "Seleção inválida." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $selectedAdapter = $networkAdapters[$adapterIndex]
    
    # Mostrar configuração DNS atual
    Write-Host "Configuração DNS atual para $($selectedAdapter.Name):" -ForegroundColor Yellow
    $currentDns = Get-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -AddressFamily IPv4 | Select-Object -ExpandProperty ServerAddresses
    
    if ($currentDns.Count -eq 0) {
        Write-Host "Nenhum servidor DNS configurado manualmente (usando DHCP)." -ForegroundColor DarkGray
    } else {
        foreach ($dns in $currentDns) {
            Write-Host $dns -ForegroundColor White
        }
    }
    Write-Host ""
    
    # Opções de DNS
    Write-Host "Opções de DNS:" -ForegroundColor Yellow
    Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
    Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
    Write-Host "[3] OpenDNS (208.67.222.222, 208.67.220.220)" -ForegroundColor White
    Write-Host "[4] Quad9 (9.9.9.9, 149.112.112.112)" -ForegroundColor White
    Write-Host "[5] AdGuard DNS (94.140.14.14, 94.140.15.15)" -ForegroundColor White
    Write-Host "[6] Inserir DNS personalizado" -ForegroundColor White
    Write-Host "[7] Usar DNS automático (DHCP)" -ForegroundColor White
    Write-Host "[0] Cancelar" -ForegroundColor White
    Write-Host ""
    
    $dnsChoice = Read-Host "Selecione uma opção"
    
    switch ($dnsChoice) {
        "1" {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            $dnsName = "Google DNS"
        }
        "2" {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            $dnsName = "Cloudflare DNS"
        }
        "3" {
            $primaryDns = "208.67.222.222"
            $secondaryDns = "208.67.220.220"
            $dnsName = "OpenDNS"
        }
        "4" {
            $primaryDns = "9.9.9.9"
            $secondaryDns = "149.112.112.112"
            $dnsName = "Quad9"
        }
        "5" {
            $primaryDns = "94.140.14.14"
            $secondaryDns = "94.140.15.15"
            $dnsName = "AdGuard DNS"
        }
        "6" {
            $primaryDns = Read-Host "Digite o endereço do DNS primário"
            $secondaryDns = Read-Host "Digite o endereço do DNS secundário (ou deixe em branco)"
            $dnsName = "DNS Personalizado"
        }
        "7" {
            Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ResetServerAddresses
            Write-Host "Configuração de DNS definida para automática (DHCP)." -ForegroundColor Green
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
    }
    
    # Aplicar configuração de DNS
    if ($secondaryDns -eq "") {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns
    } else {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns, $secondaryDns
    }
    
    Write-Host "Configuração de DNS alterada para $dnsName." -ForegroundColor Green
    Write-Host "DNS Primário: $primaryDns" -ForegroundColor White
    if ($secondaryDns -ne "") {
        Write-Host "DNS Secundário: $secondaryDns" -ForegroundColor White
    }
    
    # Limpar cache DNS após a mudança
    Write-Host "Limpando cache DNS para aplicar as alterações..." -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo." -ForegroundColor Green
    
    Write-Host "`nBenefícios de usar servidores DNS alternativos:" -ForegroundColor Cyan
    Write-Host "- Maior velocidade de resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Melhor confiabilidade e disponibilidade" -ForegroundColor DarkGray
    Write-Host "- Alguns servidores oferecem proteção adicional contra malware e phishing" -ForegroundColor DarkGray
    Write-Host "- Possibilidade de contornar bloqueios de conteúdo baseados em DNS" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkReset {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Resetar Configurações de Rede ---" -ForegroundColor White
    Write-Host "Reinicia os componentes de rede. Use como último recurso para solucionar problemas de conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "!!! ATENÇÃO: ESTE COMANDO VAI REINICIAR SUAS CONFIGURAÇÕES DE REDE !!!" -ForegroundColor Red
    Write-Host "Sua conexão será interrompida temporariamente e todas as configurações de rede personalizadas serão redefinidas." -ForegroundColor Yellow
    Write-Host "Isso inclui adaptadores de rede, configurações de DNS, configurações de proxy, etc." -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "Esta operação pode ajudar a resolver os seguintes problemas:" -ForegroundColor Cyan
    Write-Host "- Conexões de rede instáveis ou intermitentes" -ForegroundColor DarkGray
    Write-Host "- Problemas de DNS ou resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Problemas de conectividade após instalação de software ou atualizações" -ForegroundColor DarkGray
    Write-Host "- Erros de rede persistentes que não são resolvidos por outros métodos" -ForegroundColor DarkGray
    Write-Host ""
    
    $confirm = Read-Host "Tem certeza que deseja resetar as configurações de rede? (digite 'sim' para confirmar)"
    
    if ($confirm -eq 'sim') {
        Write-Host "Iniciando reset de configurações de rede..." -ForegroundColor Yellow
        
        # Etapa 1: Resetar pilha TCP/IP
        Write-Host "Etapa 1: Resetando pilha TCP/IP..." -ForegroundColor DarkGray
        netsh int ip reset
        
        # Etapa 2: Resetar catálogo Winsock
        Write-Host "Etapa 2: Resetando catálogo Winsock..." -ForegroundColor DarkGray
        netsh winsock reset
        
        # Etapa 3: Limpar cache DNS
        Write-Host "Etapa 3: Limpando cache DNS..." -ForegroundColor DarkGray
        ipconfig /flushdns
        
        # Etapa 4: Renovar configurações DHCP
        Write-Host "Etapa 4: Renovando configurações DHCP..." -ForegroundColor DarkGray
        ipconfig /release
        ipconfig /renew
        
        # Etapa 5: Reiniciar adaptadores de rede
        Write-Host "Etapa 5: Reiniciando adaptadores de rede..." -ForegroundColor DarkGray
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        
        Write-Host "Reset de configurações de rede concluído!" -ForegroundColor Green
        Write-Host "Recomenda-se reiniciar o computador para aplicar todas as alterações." -ForegroundColor Yellow
        
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        } else {
            Write-Host "Reinício cancelado. Algumas alterações podem não ter efeito até que o computador seja reiniciado." -ForegroundColor Yellow
        }
    } else {
        Write-Host "Reset de configurações de rede cancelado." -ForegroundColor Green
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-OptimizeTcpIp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Otimizar Configurações TCP/IP ---" -ForegroundColor Green
    Write-Host "Ajusta configurações avançadas do TCP/IP para melhorar o desempenho da conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função otimiza vários parâmetros TCP/IP para melhorar a velocidade e estabilidade da conexão." -ForegroundColor White
    Write-Host "As otimizações são seguras e podem ser revertidas se necessário." -ForegroundColor White
    Write-Host ""
    
    Write-Host "Configurações atuais:" -ForegroundColor Yellow
    
    # Mostrar configurações atuais
    Write-Host "Auto-Tuning Level:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Auto-Tuning Level"
    
    Write-Host "Congestion Provider:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Congestion Control Provider"
    
    Write-Host "ECN Capability:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "ECN Capability"
    
    Write-Host "Receive-Side Scaling (RSS):" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Receive-Side Scaling State"
    
    Write-Host ""
    $confirm = Read-Host "Deseja aplicar otimizações TCP/IP recomendadas? (s/n)"
    
    if ($confirm -eq 's') {
        Write-Host "Aplicando otimizações TCP/IP..." -ForegroundColor Yellow
        
        # Otimização 1: Habilitar TCP Window Auto-Tuning
        Write-Host "Configurando TCP Auto-Tuning para 'normal'..." -ForegroundColor DarkGray
        netsh int tcp set global autotuninglevel=normal
        
        # Otimização 2: Habilitar Receive-Side Scaling (RSS)
        Write-Host "Habilitando Receive-Side Scaling (RSS)..." -ForegroundColor DarkGray
        netsh int tcp set global rss=enabled
        
        # Otimização 3: Configurar Congestion Provider para CTCP
        Write-Host "Configurando Congestion Provider para 'ctcp'..." -ForegroundColor DarkGray
        netsh int tcp set global congestionprovider=ctcp
        
        # Otimização 4: Habilitar ECN Capability
        Write-Host "Habilitando ECN Capability..." -ForegroundColor DarkGray
        netsh int tcp set global ecncapability=enabled
        
        # Otimização 5: Configurar NetDMA (se disponível)
        Write-Host "Tentando configurar NetDMA..." -ForegroundColor DarkGray
        netsh int tcp set global netdma=enabled
        
        # Otimização 6: Configurar tamanho de buffer TCP
        Write-Host "Configurando tamanho de buffer TCP..." -ForegroundColor DarkGray
        netsh int tcp set global chimney=enabled
        
        # Otimização 7: Configurar QoS
        Write-Host "Configurando QoS..." -ForegroundColor DarkGray
        netsh int tcp set global timestamps=disabled
        
        Write-Host "Otimizações TCP/IP aplicadas com sucesso!" -ForegroundColor Green
        
        Write-Host "`nNovas configurações:" -ForegroundColor Yellow
        
        # Mostrar novas configurações
        Write-Host "Auto-Tuning Level:" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "Auto-Tuning Level"
        
        Write-Host "Congestion Provider:" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "Congestion Control Provider"
        
        Write-Host "ECN Capability:" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "ECN Capability"
        
        Write-Host "Receive-Side Scaling (RSS):" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "Receive-Side Scaling State"
        
        Write-Host "`nBenefícios das otimizações TCP/IP:" -ForegroundColor Cyan
        Write-Host "- Melhor aproveitamento da largura de banda disponível" -ForegroundColor DarkGray
        Write-Host "- Redução da latência em conexões de internet" -ForegroundColor DarkGray
        Write-Host "- Melhor desempenho em downloads e uploads" -ForegroundColor DarkGray
        Write-Host "- Conexões mais estáveis em redes congestionadas" -ForegroundColor DarkGray
        
        Write-Host "`nNota: Algumas alterações podem requerer reinicialização para ter efeito completo." -ForegroundColor Yellow
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        }
    } else {
        Write-Host "Otimizações TCP/IP canceladas." -ForegroundColor Yellow
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-CheckNetworkSpeed {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Verificar Velocidade da Conexão ---" -ForegroundColor Magenta
    Write-Host "Realiza testes para verificar a velocidade e qualidade da sua conexão com a internet." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função realiza testes básicos para avaliar a velocidade e qualidade da sua conexão." -ForegroundColor White
    Write-Host "Nota: Para testes de velocidade mais precisos, recomendamos usar sites especializados como speedtest.net" -ForegroundColor White
    Write-Host ""
    
    # Teste 1: Verificar conectividade básica
    Write-Host "Teste 1: Verificando conectividade básica com a internet..." -ForegroundColor Yellow
    $pingGoogle = Test-Connection -ComputerName google.com -Count 4 -ErrorAction SilentlyContinue
    
    if ($pingGoogle) {
        $avgLatency = ($pingGoogle | Measure-Object -Property ResponseTime -Average).Average
        $maxLatency = ($pingGoogle | Measure-Object -Property ResponseTime -Maximum).Maximum
        $minLatency = ($pingGoogle | Measure-Object -Property ResponseTime -Minimum).Minimum
        
        Write-Host "Conectividade: OK" -ForegroundColor Green
        Write-Host "Latência média: $avgLatency ms" -ForegroundColor $(if ($avgLatency -lt 50) { "Green" } elseif ($avgLatency -lt 100) { "Yellow" } else { "Red" })
        Write-Host "Latência mínima: $minLatency ms" -ForegroundColor Green
        Write-Host "Latência máxima: $maxLatency ms" -ForegroundColor $(if ($maxLatency -lt 100) { "Green" } elseif ($maxLatency -lt 200) { "Yellow" } else { "Red" })
        
        # Avaliação da qualidade da conexão
        if ($avgLatency -lt 30) {
            $qualidade = "Excelente"
            $cor = "Green"
        } elseif ($avgLatency -lt 60) {
            $qualidade = "Boa"
            $cor = "Green"
        } elseif ($avgLatency -lt 100) {
            $qualidade = "Razoável"
            $cor = "Yellow"
        } else {
            $qualidade = "Ruim"
            $cor = "Red"
        }
        
        Write-Host "Qualidade da conexão: $qualidade" -ForegroundColor $cor
    } else {
        Write-Host "Não foi possível conectar à internet. Verifique sua conexão." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host ""
    
    # Teste 2: Verificar resolução DNS
    Write-Host "Teste 2: Verificando velocidade de resolução DNS..." -ForegroundColor Yellow
    $domains = @("google.com", "microsoft.com", "amazon.com", "facebook.com", "youtube.com")
    $dnsResults = @()
    
    foreach ($domain in $domains) {
        $startTime = Get-Date
        try {
            $null = Resolve-DnsName -Name $domain -ErrorAction SilentlyContinue
            $endTime = Get-Date
            $timeSpan = New-TimeSpan -Start $startTime -End $endTime
            $dnsResults += [PSCustomObject]@{
                Domain = $domain
                Time = $timeSpan.TotalMilliseconds
                Status = "OK"
            }
        } catch {
            $dnsResults += [PSCustomObject]@{
                Domain = $domain
                Time = 0
                Status = "Falha"
            }
        }
    }
    
    $dnsResults | Format-Table -AutoSize
    
    $avgDnsTime = ($dnsResults | Where-Object { $_.Status -eq "OK" } | Measure-Object -Property Time -Average).Average
    Write-Host "Tempo médio de resolução DNS: $([math]::Round($avgDnsTime, 2)) ms" -ForegroundColor $(if ($avgDnsTime -lt 50) { "Green" } elseif ($avgDnsTime -lt 100) { "Yellow" } else { "Red" })
    
    Write-Host ""
    
    # Teste 3: Verificar MTU
    Write-Host "Teste 3: Verificando MTU (Maximum Transmission Unit)..." -ForegroundColor Yellow
    
    $activeAdapter = Get-NetAdapter | Where-Object { $_.Status -eq "Up" } | Select-Object -First 1
    if ($activeAdapter) {
        $mtu = Get-NetIPInterface -InterfaceIndex $activeAdapter.ifIndex -AddressFamily IPv4 | Select-Object -ExpandProperty NlMtu
        Write-Host "MTU atual: $mtu bytes" -ForegroundColor White
        
        if ($mtu -eq 1500) {
            Write-Host "MTU está no valor padrão (1500), que é ideal para a maioria das conexões." -ForegroundColor Green
        } elseif ($mtu -lt 1500) {
            Write-Host "MTU está abaixo do valor padrão. Isso pode afetar o desempenho em algumas situações." -ForegroundColor Yellow
        } else {
            Write-Host "MTU está acima do valor padrão. Isso pode causar fragmentação de pacotes em algumas redes." -ForegroundColor Yellow
        }
    } else {
        Write-Host "Não foi possível determinar o MTU. Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
    }
    
    Write-Host ""
    
    # Teste 4: Verificar perda de pacotes
    Write-Host "Teste 4: Verificando perda de pacotes..." -ForegroundColor Yellow
    $packetLossTest = Test-Connection -ComputerName google.com -Count 50 -ErrorAction SilentlyContinue
    
    if ($packetLossTest) {
        $packetsSent = 50
        $packetsReceived = ($packetLossTest | Measure-Object).Count
        $packetsLost = $packetsSent - $packetsReceived
        $packetLossPercentage = ($packetsLost / $packetsSent) * 100
        
        Write-Host "Pacotes enviados: $packetsSent" -ForegroundColor White
        Write-Host "Pacotes recebidos: $packetsReceived" -ForegroundColor White
        Write-Host "Pacotes perdidos: $packetsLost" -ForegroundColor $(if ($packetsLost -eq 0) { "Green" } elseif ($packetsLost -lt 5) { "Yellow" } else { "Red" })
        Write-Host "Percentual de perda: $([math]::Round($packetLossPercentage, 2))%" -ForegroundColor $(if ($packetLossPercentage -eq 0) { "Green" } elseif ($packetLossPercentage -lt 10) { "Yellow" } else { "Red" })
        
        # Avaliação da qualidade da conexão baseada na perda de pacotes
        if ($packetLossPercentage -eq 0) {
            Write-Host "Qualidade da conexão (perda de pacotes): Excelente" -ForegroundColor Green
        } elseif ($packetLossPercentage -lt 2) {
            Write-Host "Qualidade da conexão (perda de pacotes): Boa" -ForegroundColor Green
        } elseif ($packetLossPercentage -lt 5) {
            Write-Host "Qualidade da conexão (perda de pacotes): Razoável" -ForegroundColor Yellow
        } else {
            Write-Host "Qualidade da conexão (perda de pacotes): Ruim" -ForegroundColor Red
        }
    } else {
        Write-Host "Não foi possível realizar o teste de perda de pacotes." -ForegroundColor Red
    }
    
    Write-Host ""
    
    # Resumo e recomendações
    Write-Host "=== Resumo da Análise de Rede ===" -ForegroundColor Cyan
    
    # Recomendações baseadas nos resultados
    Write-Host "Recomendações:" -ForegroundColor Yellow
    
    if ($avgLatency -gt 100) {
        Write-Host "- Sua latência está alta. Considere verificar outros dispositivos na rede ou contatar seu provedor." -ForegroundColor Yellow
    }
    
    if ($avgDnsTime -gt 100) {
        Write-Host "- A resolução DNS está lenta. Considere mudar para servidores DNS mais rápidos como Google (8.8.8.8) ou Cloudflare (1.1.1.1)." -ForegroundColor Yellow
    }
    
    if ($packetLossPercentage -gt 2) {
        Write-Host "- Há perda significativa de pacotes. Verifique sua conexão física ou contate seu provedor." -ForegroundColor Yellow
    }
    
    if ($mtu -ne 1500 -and $mtu -ne 0) {
        Write-Host "- Seu MTU não está no valor padrão. Considere ajustá-lo para 1500 para melhor desempenho." -ForegroundColor Yellow
    }
    
    if ($avgLatency -le 100 -and $avgDnsTime -le 100 -and $packetLossPercentage -le 2) {
        Write-Host "- Sua conexão parece estar em boas condições! Não há problemas significativos detectados." -ForegroundColor Green
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-ConfigureQoS {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Configurar QoS (Qualidade de Serviço) ---" -ForegroundColor Gray
    Write-Host "Configura prioridades de tráfego de rede para melhorar o desempenho de aplicações específicas." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "O QoS (Quality of Service) permite priorizar certos tipos de tráfego de rede sobre outros." -ForegroundColor White
    Write-Host "Isso é útil para garantir que aplicações importantes como jogos, chamadas de vídeo ou streaming" -ForegroundColor White
    Write-Host "tenham prioridade sobre downloads ou atualizações em segundo plano." -ForegroundColor White
    Write-Host ""
    
    Write-Host "Opções de configuração de QoS:" -ForegroundColor Yellow
    Write-Host "[1] Configurar QoS para Jogos (prioriza tráfego de jogos)" -ForegroundColor White
    Write-Host "[2] Configurar QoS para Videoconferência (prioriza Zoom, Teams, etc.)" -ForegroundColor White
    Write-Host "[3] Configurar QoS para Streaming (prioriza Netflix, YouTube, etc.)" -ForegroundColor White
    Write-Host "[4] Configurar QoS Personalizado" -ForegroundColor White
    Write-Host "[5] Desativar QoS" -ForegroundColor White
    Write-Host "[0] Voltar" -ForegroundColor White
    Write-Host ""
    
    $qosChoice = Read-Host "Selecione uma opção"
    
    switch ($qosChoice) {
        "1" {
            Write-Host "Configurando QoS para Jogos..." -ForegroundColor Yellow
            
            # Criar política de QoS para jogos
            Write-Host "Criando política de QoS para jogos..." -ForegroundColor DarkGray
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS para jogos usando netsh
            netsh advfirewall firewall add rule name="QoS-Games" dir=out action=allow protocol=UDP remoteport=3074,3478,3479,3480 enable=yes
            
            # Configurar prioridade para jogos
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política para jogos
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Application Name" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Protocol" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Remote Port" -Value "3074,3478-3480" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "DSCP Value" -Value "46" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS para Jogos configurado com sucesso!" -ForegroundColor Green
            Write-Host "Os jogos online agora terão prioridade sobre outros tipos de tráfego." -ForegroundColor Green
        }
        "2" {
            Write-Host "Configurando QoS para Videoconferência..." -ForegroundColor Yellow
            
            # Criar política de QoS para videoconferência
            Write-Host "Criando política de QoS para videoconferência..." -ForegroundColor DarkGray
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS para videoconferência usando netsh
            netsh advfirewall firewall add rule name="QoS-VideoConference" dir=out action=allow protocol=UDP remoteport=3478-3479,8801-8810 enable=yes
            
            # Configurar prioridade para videoconferência
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política para Zoom
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Application Name" -Value "Zoom.exe" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Protocol" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Remote Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "DSCP Value" -Value "46" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Throttle Rate" -Value "-1" -Type String
            
            # Adicionar política para Teams
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Application Name" -Value "Teams.exe" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Protocol" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Remote Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "DSCP Value" -Value "46" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS para Videoconferência configurado com sucesso!" -ForegroundColor Green
            Write-Host "Aplicativos como Zoom e Teams agora terão prioridade sobre outros tipos de tráfego." -ForegroundColor Green
        }
        "3" {
            Write-Host "Configurando QoS para Streaming..." -ForegroundColor Yellow
            
            # Criar política de QoS para streaming
            Write-Host "Criando política de QoS para streaming..." -ForegroundColor DarkGray
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS para streaming usando netsh
            netsh advfirewall firewall add rule name="QoS-Streaming" dir=out action=allow protocol=TCP remoteport=80,443 enable=yes
            
            # Configurar prioridade para streaming
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política para navegadores (streaming)
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Application Name" -Value "*.exe" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Protocol" -Value "TCP" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Remote Port" -Value "80,443" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "DSCP Value" -Value "34" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS para Streaming configurado com sucesso!" -ForegroundColor Green
            Write-Host "Serviços de streaming como Netflix e YouTube agora terão prioridade sobre outros tipos de tráfego." -ForegroundColor Green
        }
        "4" {
            Write-Host "Configurando QoS Personalizado..." -ForegroundColor Yellow
            
            # Solicitar informações para QoS personalizado
            $appName = Read-Host "Digite o nome do aplicativo (ex: chrome.exe, ou * para todos)"
            $protocol = Read-Host "Digite o protocolo (TCP, UDP, ou * para ambos)"
            $remotePorts = Read-Host "Digite as portas remotas (ex: 80,443, ou * para todas)"
            $priority = Read-Host "Digite o valor de prioridade DSCP (0-63, recomendado: 46 para alta prioridade)"
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS personalizado
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política personalizada
            $policyName = "CustomQoS_" + (Get-Random)
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Application Name" -Value $appName -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Protocol" -Value $protocol -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Remote Port" -Value $remotePorts -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "DSCP Value" -Value $priority -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS Personalizado configurado com sucesso!" -ForegroundColor Green
            Write-Host "A política de QoS personalizada foi criada com o nome: $policyName" -ForegroundColor Green
        }
        "5" {
            Write-Host "Desativando QoS..." -ForegroundColor Yellow
            
            # Remover políticas de QoS
            if (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS") {
                Remove-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Recurse -Force
                Write-Host "Políticas de QoS removidas." -ForegroundColor Green
            }
            
            # Remover regras de firewall relacionadas a QoS
            netsh advfirewall firewall delete rule name="QoS-Games"
            netsh advfirewall firewall delete rule name="QoS-VideoConference"
            netsh advfirewall firewall delete rule name="QoS-Streaming"
            
            # Parar serviço QoS
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService) {
                Stop-Service -Name "QoS RSVP" -Force -ErrorAction SilentlyContinue
                Set-Service -Name "QoS RSVP" -Startup Disabled -ErrorAction SilentlyContinue
                Write-Host "Serviço QoS RSVP parado e desabilitado." -ForegroundColor Green
            }
            
            Write-Host "QoS desativado com sucesso!" -ForegroundColor Green
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
        }
    }
    
    if ($qosChoice -ne "0") {
        Write-Host "`nNota: Algumas alterações de QoS podem requerer reinicialização para ter efeito completo." -ForegroundColor Yellow
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        }
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-DisableIPv6 {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Desativar IPv6 ---" -ForegroundColor Yellow
    Write-Host "Desativa o protocolo IPv6 em adaptadores de rede para resolver problemas de conectividade." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "O IPv6 é o protocolo de internet mais recente, mas em algumas redes pode causar problemas de conectividade." -ForegroundColor White
    Write-Host "Desativar o IPv6 pode resolver problemas em redes que não o suportam adequadamente." -ForegroundColor White
    Write-Host "Nota: Desativar o IPv6 não é recomendado a menos que você esteja enfrentando problemas específicos." -ForegroundColor Yellow
    Write-Host ""
    
    # Verificar status atual do IPv6
    Write-Host "Verificando status atual do IPv6..." -ForegroundColor Yellow
    
    $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
    
    if ($networkAdapters.Count -eq 0) {
        Write-Host "Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host "Status do IPv6 nos adaptadores de rede ativos:" -ForegroundColor White
    
    foreach ($adapter in $networkAdapters) {
        $ipv6Status = Get-NetAdapterBinding -InterfaceAlias $adapter.Name -ComponentID "ms_tcpip6"
        $status = if ($ipv6Status.Enabled) { "Ativado" } else { "Desativado" }
        $statusColor = if ($ipv6Status.Enabled) { "Green" } else { "Yellow" }
        
        Write-Host "$($adapter.Name): $status" -ForegroundColor $statusColor
    }
    
    Write-Host ""
    Write-Host "Opções:" -ForegroundColor Yellow
    Write-Host "[1] Desativar IPv6 em todos os adaptadores" -ForegroundColor White
    Write-Host "[2] Ativar IPv6 em todos os adaptadores" -ForegroundColor White
    Write-Host "[3] Gerenciar IPv6 em adaptadores específicos" -ForegroundColor White
    Write-Host "[0] Voltar" -ForegroundColor White
    Write-Host ""
    
    $ipv6Choice = Read-Host "Selecione uma opção"
    
    switch ($ipv6Choice) {
        "1" {
            Write-Host "Desativando IPv6 em todos os adaptadores de rede..." -ForegroundColor Yellow
            
            foreach ($adapter in $networkAdapters) {
                Disable-NetAdapterBinding -InterfaceAlias $adapter.Name -ComponentID "ms_tcpip6"
                Write-Host "IPv6 desativado em $($adapter.Name)" -ForegroundColor Green
            }
            
            # Desativar IPv6 globalmente no registro
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters" -Name "DisabledComponents" -Value 0xffffffff -Type DWord
            
            Write-Host "IPv6 desativado em todos os adaptadores de rede!" -ForegroundColor Green
            Write-Host "Nota: Algumas alterações podem requerer reinicialização para ter efeito completo." -ForegroundColor Yellow
        }
        "2" {
            Write-Host "Ativando IPv6 em todos os adaptadores de rede..." -ForegroundColor Yellow
            
            foreach ($adapter in $networkAdapters) {
                Enable-NetAdapterBinding -InterfaceAlias $adapter.Name -ComponentID "ms_tcpip6"
                Write-Host "IPv6 ativado em $($adapter.Name)" -ForegroundColor Green
            }
            
            # Ativar IPv6 globalmente no registro
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters" -Name "DisabledComponents" -Value 0x0 -Type DWord
            
            Write-Host "IPv6 ativado em todos os adaptadores de rede!" -ForegroundColor Green
            Write-Host "Nota: Algumas alterações podem requerer reinicialização para ter efeito completo." -ForegroundColor Yellow
        }
        "3" {
            Write-Host "Gerenciando IPv6 em adaptadores específicos..." -ForegroundColor Yellow
            
            $index = 1
            $adapterList = @()
            
            foreach ($adapter in $networkAdapters) {
                $ipv6Status = Get-NetAdapterBinding -InterfaceAlias $adapter.Name -ComponentID "ms_tcpip6"
                $status = if ($ipv6Status.Enabled) { "Ativado" } else { "Desativado" }
                $statusColor = if ($ipv6Status.Enabled) { "Green" } else { "Yellow" }
                
                Write-Host "[$index] $($adapter.Name): $status" -ForegroundColor $statusColor
                $adapterList += $adapter
                $index++
            }
            
            Write-Host "[0] Voltar" -ForegroundColor White
            Write-Host ""
            
            $adapterChoice = Read-Host "Selecione o número do adaptador que deseja gerenciar (ou 0 para voltar)"
            
            if ($adapterChoice -eq "0" -or $adapterChoice -eq "") {
                Write-Host "Operação cancelada." -ForegroundColor Yellow
                break
            }
            
            $adapterIndex = [int]$adapterChoice - 1
            if ($adapterIndex -lt 0 -or $adapterIndex -ge $adapterList.Count) {
                Write-Host "Seleção inválida." -ForegroundColor Red
                break
            }
            
            $selectedAdapter = $adapterList[$adapterIndex]
            $ipv6Status = Get-NetAdapterBinding -InterfaceAlias $selectedAdapter.Name -ComponentID "ms_tcpip6"
            
            if ($ipv6Status.Enabled) {
                Write-Host "Desativando IPv6 em $($selectedAdapter.Name)..." -ForegroundColor Yellow
                Disable-NetAdapterBinding -InterfaceAlias $selectedAdapter.Name -ComponentID "ms_tcpip6"
                Write-Host "IPv6 desativado em $($selectedAdapter.Name)" -ForegroundColor Green
            } else {
                Write-Host "Ativando IPv6 em $($selectedAdapter.Name)..." -ForegroundColor Yellow
                Enable-NetAdapterBinding -InterfaceAlias $selectedAdapter.Name -ComponentID "ms_tcpip6"
                Write-Host "IPv6 ativado em $($selectedAdapter.Name)" -ForegroundColor Green
            }
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
        }
    }
    
    if ($ipv6Choice -eq "1" -or $ipv6Choice -eq "2") {
        Write-Host "`nNota: Algumas alterações de IPv6 podem requerer reinicialização para ter efeito completo." -ForegroundColor Yellow
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        }
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-OptimizeGamingLatency {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Otimizar Latência de Rede para Jogos ---" -ForegroundColor Cyan
    Write-Host "Configura parâmetros de rede para reduzir a latência em jogos online." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função otimiza vários parâmetros de rede para reduzir a latência em jogos online." -ForegroundColor White
    Write-Host "As otimizações são seguras e podem ser revertidas se necessário." -ForegroundColor White
    Write-Host ""
    
    # Verificar latência atual
    Write-Host "Verificando latência atual para servidores de jogos populares..." -ForegroundColor Yellow
    
    $gameServers = @(
        @{Name="Google (Stadia)"; Address="stadia.google.com"},
        @{Name="EA Games"; Address="ea.com"},
        @{Name="Steam"; Address="steamcommunity.com"},
        @{Name="Epic Games"; Address="epicgames.com"},
        @{Name="Xbox Live"; Address="xbox.com"}
    )
    
    $latencyResults = @()
    
    foreach ($server in $gameServers) {
        try {
            $pingResult = Test-Connection -ComputerName $server.Address -Count 4 -ErrorAction SilentlyContinue
            if ($pingResult) {
                $avgLatency = ($pingResult | Measure-Object -Property ResponseTime -Average).Average
                $latencyResults += [PSCustomObject]@{
                    Server = $server.Name
                    Latency = [math]::Round($avgLatency, 2)
                    Status = "OK"
                }
            } else {
                $latencyResults += [PSCustomObject]@{
                    Server = $server.Name
                    Latency = 0
                    Status = "Falha"
                }
            }
        } catch {
            $latencyResults += [PSCustomObject]@{
                Server = $server.Name
                Latency = 0
                Status = "Falha"
            }
        }
    }
    
    Write-Host "Latência atual para servidores de jogos:" -ForegroundColor White
    $latencyResults | Format-Table -AutoSize
    
    $avgLatency = ($latencyResults | Where-Object { $_.Status -eq "OK" } | Measure-Object -Property Latency -Average).Average
    if ($avgLatency -gt 0) {
        Write-Host "Latência média atual: $([math]::Round($avgLatency, 2)) ms" -ForegroundColor $(if ($avgLatency -lt 50) { "Green" } elseif ($avgLatency -lt 100) { "Yellow" } else { "Red" })
    } else {
        Write-Host "Não foi possível determinar a latência média atual." -ForegroundColor Red
    }
    
    Write-Host ""
    $confirm = Read-Host "Deseja aplicar otimizações de latência para jogos? (s/n)"
    
    if ($confirm -eq 's') {
        Write-Host "Aplicando otimizações de latência para jogos..." -ForegroundColor Yellow
        
        # Otimização 1: Configurar QoS para jogos
        Write-Host "Configurando QoS para jogos..." -ForegroundColor DarkGray
        
        # Verificar se o serviço QoS está em execução
        $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
        if ($qosService -and $qosService.Status -ne "Running") {
            Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
            Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
        }
        
        # Configurar QoS para jogos usando netsh
        netsh advfirewall firewall add rule name="QoS-Games" dir=out action=allow protocol=UDP remoteport=3074,3478,3479,3480 enable=yes
        
        # Configurar prioridade para jogos
        if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
        }
        
        # Adicionar política para jogos
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Force | Out-Null
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Application Name" -Value "*" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Version" -Value "1.0" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Protocol" -Value "*" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Local Port" -Value "*" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Local IP" -Value "*" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Remote Port" -Value "3074,3478-3480" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Remote IP" -Value "*" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "DSCP Value" -Value "46" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Throttle Rate" -Value "-1" -Type String
        
        # Otimização 2: Configurar TCP/IP para jogos
        Write-Host "Configurando TCP/IP para jogos..." -ForegroundColor DarkGray
        
        # Habilitar TCP Window Auto-Tuning
        netsh int tcp set global autotuninglevel=normal
        
        # Habilitar Receive-Side Scaling (RSS)
        netsh int tcp set global rss=enabled
        
        # Configurar Congestion Provider para CTCP
        netsh int tcp set global congestionprovider=ctcp
        
        # Habilitar ECN Capability
        netsh int tcp set global ecncapability=enabled
        
        # Otimização 3: Configurar Nagle Algorithm (reduz latência para pacotes pequenos)
        Write-Host "Configurando Nagle Algorithm..." -ForegroundColor DarkGray
        
        # Desabilitar Nagle Algorithm para jogos
        if (-not (Test-Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces")) {
            New-Item -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces" -Force | Out-Null
        }
        
        $networkInterfaces = Get-ChildItem "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces"
        foreach ($interface in $networkInterfaces) {
            Set-ItemProperty -Path $interface.PSPath -Name "TcpAckFrequency" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path $interface.PSPath -Name "TCPNoDelay" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        }
        
        # Otimização 4: Configurar prioridade de CPU para jogos
        Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor DarkGray
        
        # Configurar prioridade para jogos
        if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
            New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
        }
        
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Value 8 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Value 6 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
        
        # Otimização 5: Configurar Network Throttling Index
        Write-Host "Configurando Network Throttling Index..." -ForegroundColor DarkGray
        
        if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile")) {
            New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -Force | Out-Null
        }
        
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -Name "NetworkThrottlingIndex" -Value 0xffffffff -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Otimizações de latência para jogos aplicadas com sucesso!" -ForegroundColor Green
        
        # Verificar latência após otimizações
        Write-Host "`nVerificando latência após otimizações..." -ForegroundColor Yellow
        
        $latencyResultsAfter = @()
        
        foreach ($server in $gameServers) {
            try {
                $pingResult = Test-Connection -ComputerName $server.Address -Count 4 -ErrorAction SilentlyContinue
                if ($pingResult) {
                    $avgLatency = ($pingResult | Measure-Object -Property ResponseTime -Average).Average
                    $latencyResultsAfter += [PSCustomObject]@{
                        Server = $server.Name
                        Latency = [math]::Round($avgLatency, 2)
                        Status = "OK"
                    }
                } else {
                    $latencyResultsAfter += [PSCustomObject]@{
                        Server = $server.Name
                        Latency = 0
                        Status = "Falha"
                    }
                }
            } catch {
                $latencyResultsAfter += [PSCustomObject]@{
                    Server = $server.Name
                    Latency = 0
                    Status = "Falha"
                }
            }
        }
        
        Write-Host "Latência após otimizações:" -ForegroundColor White
        $latencyResultsAfter | Format-Table -AutoSize
        
        $avgLatencyAfter = ($latencyResultsAfter | Where-Object { $_.Status -eq "OK" } | Measure-Object -Property Latency -Average).Average
        if ($avgLatencyAfter -gt 0) {
            Write-Host "Latência média após otimizações: $([math]::Round($avgLatencyAfter, 2)) ms" -ForegroundColor $(if ($avgLatencyAfter -lt 50) { "Green" } elseif ($avgLatencyAfter -lt 100) { "Yellow" } else { "Red" })
        } else {
            Write-Host "Não foi possível determinar a latência média após otimizações." -ForegroundColor Red
        }
        
        Write-Host "`nBenefícios das otimizações de latência para jogos:" -ForegroundColor Cyan
        Write-Host "- Redução da latência em jogos online" -ForegroundColor DarkGray
        Write-Host "- Melhor resposta em jogos competitivos" -ForegroundColor DarkGray
        Write-Host "- Redução de lag e stuttering" -ForegroundColor DarkGray
        Write-Host "- Melhor experiência geral em jogos online" -ForegroundColor DarkGray
        
        Write-Host "`nNota: Algumas alterações podem requerer reinicialização para ter efeito completo." -ForegroundColor Yellow
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        }
    } else {
        Write-Host "Otimizações de latência para jogos canceladas." -ForegroundColor Yellow
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - DESEMPENHO (Expandidas) ---
function Invoke-OptimizeVisualEffects {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Desempenho: Ajustar Efeitos Visuais para Melhor Desempenho ---" -ForegroundColor Green
    Write-Host "Configura os efeitos visuais do Windows para priorizar o desempenho sobre a aparência." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função ajusta os efeitos visuais do Windows para priorizar o desempenho." -ForegroundColor White
    Write-Host "Desativar efeitos visuais pode melhorar significativamente o desempenho em sistemas mais antigos." -ForegroundColor White
    Write-Host ""
    
    # Verificar configurações atuais
    Write-Host "Verificando configurações atuais de efeitos visuais..." -ForegroundColor Yellow
    
    $visualFXPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects"
    $visualFXSetting = Get-ItemProperty -Path $visualFXPath -Name "VisualFXSetting" -ErrorAction SilentlyContinue
    
    if ($visualFXSetting) {
        switch ($visualFXSetting.VisualFXSetting) {
            0 { $currentSetting = "Deixar o Windows escolher (Automático)" }
            1 { $currentSetting = "Ajustar para melhor aparência" }
            2 { $currentSetting = "Ajustar para melhor desempenho" }
            3 { $currentSetting = "Personalizado" }
            default { $currentSetting = "Desconhecido" }
        }
        
        Write-Host "Configuração atual: $currentSetting" -ForegroundColor White
    } else {
        Write-Host "Não foi possível determinar a configuração atual." -ForegroundColor DarkGray
    }
    
    Write-Host ""
    Write-Host "Opções de configuração:" -ForegroundColor Yellow
    Write-Host "[1] Ajustar para melhor desempenho (desativa todos os efeitos visuais)" -ForegroundColor White
    Write-Host "[2] Ajustar para melhor aparência (ativa todos os efeitos visuais)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows escolher (configuração automática)" -ForegroundColor White
    Write-Host "[4] Configuração personalizada (escolher efeitos específicos)" -ForegroundColor White
    Write-Host "[0] Voltar" -ForegroundColor White
    Write-Host ""
    
    $visualChoice = Read-Host "Selecione uma opção"
    
    switch ($visualChoice) {
        "1" {
            Write-Host "Ajustando para melhor desempenho..." -ForegroundColor Yellow
            
            # Configurar para melhor desempenho (desativar todos os efeitos visuais)
            Set-ItemProperty -Path $visualFXPath -Name "VisualFXSetting" -Value 2 -Type DWord -Force
            
            # Desativar efeitos visuais específicos
            $desktopPath = "HKCU:\Control Panel\Desktop"
            $advancedPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
            $windowMetricsPath = "HKCU:\Control Panel\Desktop\WindowMetrics"
            
            # Desativar animações de janela
            Set-ItemProperty -Path $desktopPath -Name "UserPreferencesMask" -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force
            
            # Desativar animações de minimizar/maximizar
            Set-ItemProperty -Path $windowMetricsPath -Name "MinAnimate" -Value 0 -Type String -Force
            
            # Desativar efeitos de transparência
            Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "EnableTransparency" -Value 0 -Type DWord -Force
            
            # Desativar animações da barra de tarefas
            Set-ItemProperty -Path $advancedPath -Name "TaskbarAnimations" -Value 0 -Type DWord -Force
            
            # Desativar seleção transparente
            Set-ItemProperty -Path $advancedPath -Name "ListviewAlphaSelect" -Value 0 -Type DWord -Force
            
            # Desativar sombras sob o ponteiro do mouse
            Set-ItemProperty -Path $advancedPath -Name "EnablePointerShadow" -Value 0 -Type DWord -Force
            
            # Desativar sombras sob janelas
            Set-ItemProperty -Path $advancedPath -Name "ListviewShadow" -Value 0 -Type DWord -Force
            
            Write-Host "Configuração ajustada para melhor desempenho!" -ForegroundColor Green
            Write-Host "Todos os efeitos visuais foram desativados para maximizar o desempenho." -ForegroundColor Green
        }
        "2" {
            Write-Host "Ajustando para melhor aparência..." -ForegroundColor Yellow
            
            # Configurar para melhor aparência (ativar todos os efeitos visuais)
            Set-ItemProperty -Path $visualFXPath -Name "VisualFXSetting" -Value 1 -Type DWord -Force
            
            # Ativar efeitos visuais específicos
            $desktopPath = "HKCU:\Control Panel\Desktop"
            $advancedPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
            $windowMetricsPath = "HKCU:\Control Panel\Desktop\WindowMetrics"
            
            # Ativar animações de janela
            Set-ItemProperty -Path $desktopPath -Name "UserPreferencesMask" -Value ([byte[]](0x9E, 0x3E, 0x07, 0x80)) -Type Binary -Force
            
            # Ativar animações de minimizar/maximizar
            Set-ItemProperty -Path $windowMetricsPath -Name "MinAnimate" -Value 1 -Type String -Force
            
            # Ativar efeitos de transparência
            Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "EnableTransparency" -Value 1 -Type DWord -Force
            
            # Ativar animações da barra de tarefas
            Set-ItemProperty -Path $advancedPath -Name "TaskbarAnimations" -Value 1 -Type DWord -Force
            
            # Ativar seleção transparente
            Set-ItemProperty -Path $advancedPath -Name "ListviewAlphaSelect" -Value 1 -Type DWord -Force
            
            # Ativar sombras sob o ponteiro do mouse
            Set-ItemProperty -Path $advancedPath -Name "EnablePointerShadow" -Value 1 -Type DWord -Force
            
            # Ativar sombras sob janelas
            Set-ItemProperty -Path $advancedPath -Name "ListviewShadow" -Value 1 -Type DWord -Force
            
            Write-Host "Configuração ajustada para melhor aparência!" -ForegroundColor Green
            Write-Host "Todos os efeitos visuais foram ativados para maximizar a aparência." -ForegroundColor Green
        }
        "3" {
            Write-Host "Configurando para deixar o Windows escolher..." -ForegroundColor Yellow
            
            # Configurar para deixar o Windows escolher (configuração automática)
            Set-ItemProperty -Path $visualFXPath -Name "VisualFXSetting" -Value 0 -Type DWord -Force
            
            Write-Host "Configuração ajustada para deixar o Windows escolher!" -ForegroundColor Green
            Write-Host "O Windows irá determinar automaticamente quais efeitos visuais usar com base no desempenho do sistema." -ForegroundColor Green
        }
        "4" {
            Write-Host "Configuração personalizada de efeitos visuais..." -ForegroundColor Yellow
            
            # Configurar para personalizado
            Set-ItemProperty -Path $visualFXPath -Name "VisualFXSetting" -Value 3 -Type DWord -Force
            
            $desktopPath = "HKCU:\Control Panel\Desktop"
            $advancedPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
            $windowMetricsPath = "HKCU:\Control Panel\Desktop\WindowMetrics"
            
            # Listar efeitos visuais disponíveis
            Write-Host ""
            Write-Host "Efeitos visuais disponíveis:" -ForegroundColor Yellow
            Write-Host "[1] Animações de janela" -ForegroundColor White
            Write-Host "[2] Animações de minimizar/maximizar" -ForegroundColor White
            Write-Host "[3] Efeitos### Enhanced TORK Optimizer

I'll enhance the TORK optimizer with more comprehensive functionality across all features, starting with an expanded Simple Cleanup function and then improving all other options.

```powershell type="code"
# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total### Enhanced TORK Optimizer

I'll enhance the TORK optimizer with more comprehensive functionality across all features, starting with an expanded Simple Cleanup function and then improving all other options.

```powershell type="code"
# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total = ($eventLogs | Measure-Object -Property FileSize -Sum).Sum / 1MB
    
    Write-Host "Encontrados $totalLogCount logs de eventos ocupando aproximadamente $([math]::Round($total, 2)) MB." -ForegroundColor White
    
    # Limpar os logs principais
    Write-Host "Limpando logs principais do sistema..." -ForegroundColor Yellow
    
    $mainLogs = @("Application", "System", "Security")
    foreach ($log in $mainLogs) {
        try {
            $logSize = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).FileSize / 1MB
            $logRecords = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).RecordCount
            
            Write-Host "Log $log: $([math]::Round($logSize, 2)) MB com $logRecords registros" -ForegroundColor DarkGray
            wevtutil cl $log
            Write-Host "Log $log limpo com sucesso!" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível limpar o log $log." -ForegroundColor Red
        }
    }
    
    # Perguntar se deseja limpar todos os outros logs
    $confirmAllLogs = Read-Host "Deseja limpar todos os outros logs do sistema? (s/n)"
    
    if ($confirmAllLogs -eq 's') {
        Write-Host "Limpando todos os logs do sistema... (isso pode levar algum tempo)" -ForegroundColor Yellow
        
        $otherLogs = $eventLogs | Where-Object { $_.LogName -notin $mainLogs }
        foreach ($log in $otherLogs) {
            try {
                wevtutil cl $log.LogName
            } catch {
                # Ignorar erros silenciosamente
            }
        }
        
        Write-Host "Todos os logs do sistema foram limpos!" -ForegroundColor Green
    } else {
        Write-Host "Apenas os logs principais foram limpos." -ForegroundColor Green
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWindowsUpdateCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Atualizações do Windows ---" -ForegroundColor Yellow
    Write-Host "Limpa os arquivos temporários de atualizações do Windows para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando cache de atualizações do Windows..." -ForegroundColor Yellow
    
    # Verificar tamanho da pasta SoftwareDistribution antes da limpeza
    $updateCachePath = "$env:SystemRoot\SoftwareDistribution\Download"
    $updateCacheFiles = Get-ChildItem -Path $updateCachePath -Recurse -ErrorAction SilentlyContinue
    $updateCacheSize = ($updateCacheFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "O cache de atualizações do Windows está ocupando aproximadamente $([math]::Round($updateCacheSize, 2)) MB." -ForegroundColor White
    
    # Parar o serviço Windows Update
    Write-Host "Parando o serviço Windows Update..." -ForegroundColor DarkGray
    Stop-Service -Name wuauserv -Force -ErrorAction SilentlyContinue
    
    # Limpar o cache de atualizações
    Write-Host "Limpando o cache de atualizações do Windows..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    
    # Iniciar o serviço Windows Update novamente
    Write-Host "Iniciando o serviço Windows Update..." -ForegroundColor DarkGray
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    
    Write-Host "Cache de atualizações do Windows limpo com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de atualizações:" -ForegroundColor Cyan
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray
    Write-Host "- Resolução de problemas com atualizações do Windows" -ForegroundColor DarkGray
    Write-Host "- Melhoria no desempenho do sistema" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanHibernationFile {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos de Hibernação ---" -ForegroundColor White
    Write-Host "Gerencia o arquivo de hibernação (hiberfil.sys) para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar status atual da hibernação
    Write-Host "Verificando status atual da hibernação..." -ForegroundColor Yellow
    $hibernationStatus = powercfg.exe /availablesleepstates | Select-String -Pattern "Hibernação"
    
    if ($hibernationStatus -match "Hibernação está desativada") {
        $currentStatus = "desativada"
    } else {
        $currentStatus = "ativada"
    }
    
    Write-Host "Status atual da hibernação: $currentStatus" -ForegroundColor White
    
    # Verificar tamanho do arquivo de hibernação (se existir)
    $systemDrive = $env:SystemDrive
    $hiberfilPath = "$systemDrive\hiberfil.sys"
    
    if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
        try {
            $hiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
            Write-Host "Tamanho do arquivo de hibernação: $([math]::Round($hiberfilSize, 2)) GB" -ForegroundColor White
        } catch {
            Write-Host "Não foi possível determinar o tamanho do arquivo de hibernação." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Arquivo de hibernação não encontrado (já está desativado)." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja desativar ou ativar a hibernação
    if ($currentStatus -eq "ativada") {
        $confirmHibernation = Read-Host "Deseja desativar a hibernação para liberar espaço em disco? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Desativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate off
            Write-Host "Hibernação desativada com sucesso! O arquivo hiberfil.sys foi removido." -ForegroundColor Green
        } else {
            Write-Host "Hibernação mantida ativada." -ForegroundColor Green
        }
    } else {
        $confirmHibernation = Read-Host "Deseja ativar a hibernação? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Ativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate on
            Write-Host "Hibernação ativada com sucesso! O arquivo hiberfil.sys foi criado." -ForegroundColor Green
            
            # Verificar novo tamanho do arquivo de hibernação
            if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
                try {
                    $newHiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
                    Write-Host "Tamanho do novo arquivo de hibernação: $([math]::Round($newHiberfilSize, 2)) GB" -ForegroundColor White
                } catch {
                    Write-Host "Não foi possível determinar o tamanho do novo arquivo de hibernação." -ForegroundColor DarkGray
                }
            }
        } else {
            Write-Host "Hibernação mantida desativada." -ForegroundColor Green
        }
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço foi afetado:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a hibernação:" -ForegroundColor Cyan
    Write-Host "- O arquivo de hibernação (hiberfil.sys) geralmente ocupa espaço equivalente a 75% da RAM instalada" -ForegroundColor DarkGray
    Write-Host "- Desativar a hibernação libera esse espaço, mas você não poderá usar o modo de hibernação" -ForegroundColor DarkGray
    Write-Host "- A hibernação é útil para laptops, pois salva o estado do sistema no disco antes de desligar" -ForegroundColor DarkGray
    Write-Host "- Para desktops, a hibernação geralmente é menos necessária" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWinSxS {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Pasta WinSxS ---" -ForegroundColor Magenta
    Write-Host "Limpa componentes não utilizados da pasta WinSxS para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "A pasta WinSxS (Windows Side-by-Side) armazena componentes do sistema e pode ocupar muito espaço." -ForegroundColor White
    Write-Host "Esta limpeza é segura e usa ferramentas oficiais do Windows para remover componentes não utilizados." -ForegroundColor White
    Write-Host ""
    
    # Verificar tamanho da pasta WinSxS antes da limpeza
    Write-Host "Verificando tamanho da pasta WinSxS (isso pode levar algum tempo)..." -ForegroundColor Yellow
    
    try {
        $winSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
        Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($winSxSSize, 2)) GB" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível determinar o tamanho da pasta WinSxS." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja prosseguir com a limpeza
    $confirmCleanup = Read-Host "Deseja prosseguir com a limpeza da pasta WinSxS? (s/n)"
    
    if ($confirmCleanup -eq 's') {
        Write-Host "Executando limpeza de componentes não utilizados (isso pode levar vários minutos)..." -ForegroundColor Yellow
        
        # Executar limpeza de componentes
        Write-Host "Etapa 1: Limpeza de componentes..." -ForegroundColor DarkGray
        Dism.exe /Online /Cleanup-Image /StartComponentCleanup
        
        # Perguntar se deseja executar limpeza mais agressiva (com reset base)
        $confirmResetBase = Read-Host "Deseja executar uma limpeza mais profunda? (remove a capacidade de desinstalar atualizações) (s/n)"
        
        if ($confirmResetBase -eq 's') {
            Write-Host "Etapa 2: Executando limpeza profunda (isso pode levar muito tempo)..." -ForegroundColor DarkGray
            Dism.exe /Online /Cleanup-Image /StartComponentCleanup /ResetBase
            Write-Host "Limpeza profunda concluída!" -ForegroundColor Green
        }
        
        Write-Host "Limpeza da pasta WinSxS concluída com sucesso!" -ForegroundColor Green
        
        # Verificar tamanho da pasta WinSxS após a limpeza
        try {
            $newWinSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
            $savedSpace = $winSxSSize - $newWinSxSSize
            
            Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($newWinSxSSize, 2)) GB" -ForegroundColor White
            Write-Host "Espaço liberado: $([math]::Round($savedSpace, 2)) GB" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível determinar o novo tamanho da pasta WinSxS." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Limpeza da pasta WinSxS cancelada." -ForegroundColor Yellow
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a pasta WinSxS:" -ForegroundColor Cyan
    Write-Host "- A pasta WinSxS armazena componentes do sistema Windows e atualizações" -ForegroundColor DarkGray
    Write-Host "- Não é recomendado excluir esta pasta manualmente" -ForegroundColor DarkGray
    Write-Host "- A limpeza realizada é segura e usa ferramentas oficiais do Windows" -ForegroundColor DarkGray
    Write-Host "- Após a limpeza profunda, não será possível desinstalar algumas atualizações" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - REDE (Expandidas) ---
function Invoke-NetworkFlushDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Limpar Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkChangeDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Mudar Servidor DNS ---" -ForegroundColor Cyan
    Write-Host "Permite definir servidores DNS personalizados para suas conexões de rede." -ForegroundColor DarkGray
    Write-Host ""

    # Listar adaptadores de rede ativos
    Write-Host "Listando adaptadores de rede ativos..." -ForegroundColor Yellow
    $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
    
    if ($networkAdapters.Count -eq 0) {
        Write-Host "Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host "Adaptadores de rede ativos:" -ForegroundColor White
    $index = 1
    foreach ($adapter in $networkAdapters) {
        Write-Host "[$index] $($adapter.Name) - $($adapter.InterfaceDescription)" -ForegroundColor White
        $index++
    }
    Write-Host ""
    
    # Selecionar adaptador de rede
    $adapterChoice = Read-Host "Selecione o número do adaptador que deseja configurar (ou 0 para voltar)"
    
    if ($adapterChoice -eq "0" -or $adapterChoice -eq "") {
        Write-Host "Operação cancelada." -ForegroundColor Yellow
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $adapterIndex = [int]$adapterChoice - 1
    if ($adapterIndex -lt 0 -or $adapterIndex -ge $networkAdapters.Count) {
        Write-Host "Seleção inválida." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $selectedAdapter = $networkAdapters[$adapterIndex]
    
    # Mostrar configuração DNS atual
    Write-Host "Configuração DNS atual para $($selectedAdapter.Name):" -ForegroundColor Yellow
    $currentDns = Get-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -AddressFamily IPv4 | Select-Object -ExpandProperty ServerAddresses
    
    if ($currentDns.Count -eq 0) {
        Write-Host "Nenhum servidor DNS configurado manualmente (usando DHCP)." -ForegroundColor DarkGray
    } else {
        foreach ($dns in $currentDns) {
            Write-Host $dns -ForegroundColor White
        }
    }
    Write-Host ""
    
    # Opções de DNS
    Write-Host "Opções de DNS:" -ForegroundColor Yellow
    Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
    Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
    Write-Host "[3] OpenDNS (208.67.222.222, 208.67.220.220)" -ForegroundColor White
    Write-Host "[4] Quad9 (9.9.9.9, 149.112.112.112)" -ForegroundColor White
    Write-Host "[5] AdGuard DNS (94.140.14.14, 94.140.15.15)" -ForegroundColor White
    Write-Host "[6] Inserir DNS personalizado" -ForegroundColor White
    Write-Host "[7] Usar DNS automático (DHCP)" -ForegroundColor White
    Write-Host "[0] Cancelar" -ForegroundColor White
    Write-Host ""
    
    $dnsChoice = Read-Host "Selecione uma opção"
    
    switch ($dnsChoice) {
        "1" {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            $dnsName = "Google DNS"
        }
        "2" {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            $dnsName = "Cloudflare DNS"
        }
        "3" {
            $primaryDns = "208.67.222.222"
            $secondaryDns = "208.67.220.220"
            $dnsName = "OpenDNS"
        }
        "4" {
            $primaryDns = "9.9.9.9"
            $secondaryDns = "149.112.112.112"
            $dnsName = "Quad9"
        }
        "5" {
            $primaryDns = "94.140.14.14"
            $secondaryDns = "94.140.15.15"
            $dnsName = "AdGuard DNS"
        }
        "6" {
            $primaryDns = Read-Host "Digite o endereço do DNS primário"
            $secondaryDns = Read-Host "Digite o endereço do DNS secundário (ou deixe em branco)"
            $dnsName = "DNS Personalizado"
        }
        "7" {
            Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ResetServerAddresses
            Write-Host "Configuração de DNS definida para automática (DHCP)." -ForegroundColor Green
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
    }
    
    # Aplicar configuração de DNS
    if ($secondaryDns -eq "") {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns
    } else {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns, $secondaryDns
    }
    
    Write-Host "Configuração de DNS alterada para $dnsName." -ForegroundColor Green
    Write-Host "DNS Primário: $primaryDns" -ForegroundColor White
    if ($secondaryDns -ne "") {
        Write-Host "DNS Secundário: $secondaryDns" -ForegroundColor White
    }
    
    # Limpar cache DNS após a mudança
    Write-Host "Limpando cache DNS para aplicar as alterações..." -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo." -ForegroundColor Green
    
    Write-Host "`nBenefícios de usar servidores DNS alternativos:" -ForegroundColor Cyan
    Write-Host "- Maior velocidade de resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Melhor confiabilidade e disponibilidade" -ForegroundColor DarkGray
    Write-Host "- Alguns servidores oferecem proteção adicional contra malware e phishing" -ForegroundColor DarkGray
    Write-Host "- Possibilidade de contornar bloqueios de conteúdo baseados em DNS" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkReset {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Resetar Configurações de Rede ---" -ForegroundColor White
    Write-Host "Reinicia os componentes de rede. Use como último recurso para solucionar problemas de conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "!!! ATENÇÃO: ESTE COMANDO VAI REINICIAR SUAS CONFIGURAÇÕES DE REDE !!!" -ForegroundColor Red
    Write-Host "Sua conexão será interrompida temporariamente e todas as configurações de rede personalizadas serão redefinidas." -ForegroundColor Yellow
    Write-Host "Isso inclui adaptadores de rede, configurações de DNS, configurações de proxy, etc." -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "Esta operação pode ajudar a resolver os seguintes problemas:" -ForegroundColor Cyan
    Write-Host "- Conexões de rede instáveis ou intermitentes" -ForegroundColor DarkGray
    Write-Host "- Problemas de DNS ou resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Problemas de conectividade após instalação de software ou atualizações" -ForegroundColor DarkGray
    Write-Host "- Erros de rede persistentes que não são resolvidos por outros métodos" -ForegroundColor DarkGray
    Write-Host ""
    
    $confirm = Read-Host "Tem certeza que deseja resetar as configurações de rede? (digite 'sim' para confirmar)"
    
    if ($confirm -eq 'sim') {
        Write-Host "Iniciando reset de configurações de rede..." -ForegroundColor Yellow
        
        # Etapa 1: Resetar pilha TCP/IP
        Write-Host "Etapa 1: Resetando pilha TCP/IP..." -ForegroundColor DarkGray
        netsh int ip reset
        
        # Etapa 2: Resetar catálogo Winsock
        Write-Host "Etapa 2: Resetando catálogo Winsock..." -ForegroundColor DarkGray
        netsh winsock reset
        
        # Etapa 3: Limpar cache DNS
        Write-Host "Etapa 3: Limpando cache DNS..." -ForegroundColor DarkGray
        ipconfig /flushdns
        
        # Etapa 4: Renovar configurações DHCP
        Write-Host "Etapa 4: Renovando configurações DHCP..." -ForegroundColor DarkGray
        ipconfig /release
        ipconfig /renew
        
        # Etapa 5: Reiniciar adaptadores de rede
        Write-Host "Etapa 5: Reiniciando adaptadores de rede..." -ForegroundColor DarkGray
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        
        Write-Host "Reset de configurações de rede concluído!" -ForegroundColor Green
        Write-Host "Recomenda-se reiniciar o computador para aplicar todas as alterações." -ForegroundColor Yellow
        
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        } else {
            Write-Host "Reinício cancelado. Algumas alterações podem não ter efeito até que o computador seja reiniciado." -ForegroundColor Yellow
        }
    } else {
        Write-Host "Reset de configurações de rede cancelado." -ForegroundColor Green
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-OptimizeTcpIp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Otimizar Configurações TCP/IP ---" -ForegroundColor Green
    Write-Host "Ajusta configurações avançadas do TCP/IP para melhorar o desempenho da conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função otimiza vários parâmetros TCP/IP para melhorar a velocidade e estabilidade da conexão." -ForegroundColor White
    Write-Host "As otimizações são seguras e podem ser revertidas se necessário." -ForegroundColor White
    Write-Host ""
    
    Write-Host "Configurações atuais:" -ForegroundColor Yellow
    
    # Mostrar configurações atuais
    Write-Host "Auto-Tuning Level:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Auto-Tuning Level"
    
    Write-Host "Congestion Provider:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Congestion Control Provider"
    
    Write-Host "ECN Capability:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "ECN Capability"
    
    Write-Host "Receive-Side Scaling (RSS):" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Receive-Side Scaling State"
    
    Write-Host ""
    $confirm = Read-Host "Deseja aplicar otimizações TCP/IP recomendadas? (s/n)"
    
    if ($confirm -eq 's') {
        Write-Host "Aplicando otimizações TCP/IP..." -ForegroundColor Yellow
        
        # Otimização 1: Habilitar TCP Window Auto-Tuning
        Write-Host "Configurando TCP Auto-Tuning para 'normal'..." -ForegroundColor DarkGray
        netsh int tcp set global### Enhanced TORK Optimizer

I'll enhance the TORK optimizer with more comprehensive functionality across all features, starting with an expanded Simple Cleanup function and then improving all other options.

```powershell type="code"
# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total### Enhanced TORK Optimizer

I'll enhance the TORK optimizer with more comprehensive functionality across all features, starting with an expanded Simple Cleanup function and then improving all other options.

```powershell type="code"
# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total = ($eventLogs | Measure-Object -Property FileSize -Sum).Sum / 1MB
    
    Write-Host "Encontrados $totalLogCount logs de eventos ocupando aproximadamente $([math]::Round($total, 2)) MB." -ForegroundColor White
    
    # Limpar os logs principais
    Write-Host "Limpando logs principais do sistema..." -ForegroundColor Yellow
    
    $mainLogs = @("Application", "System", "Security")
    foreach ($log in $mainLogs) {
        try {
            $logSize = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).FileSize / 1MB
            $logRecords = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).RecordCount
            
            Write-Host "Log $log: $([math]::Round($logSize, 2)) MB com $logRecords registros" -ForegroundColor DarkGray
            wevtutil cl $log
            Write-Host "Log $log limpo com sucesso!" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível limpar o log $log." -ForegroundColor Red
        }
    }
    
    # Perguntar se deseja limpar todos os outros logs
    $confirmAllLogs = Read-Host "Deseja limpar todos os outros logs do sistema? (s/n)"
    
    if ($confirmAllLogs -eq 's') {
        Write-Host "Limpando todos os logs do sistema... (isso pode levar algum tempo)" -ForegroundColor Yellow
        
        $otherLogs = $eventLogs | Where-Object { $_.LogName -notin $mainLogs }
        foreach ($log in $otherLogs) {
            try {
                wevtutil cl $log.LogName
            } catch {
                # Ignorar erros silenciosamente
            }
        }
        
        Write-Host "Todos os logs do sistema foram limpos!" -ForegroundColor Green
    } else {
        Write-Host "Apenas os logs principais foram limpos." -ForegroundColor Green
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWindowsUpdateCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Atualizações do Windows ---" -ForegroundColor Yellow
    Write-Host "Limpa os arquivos temporários de atualizações do Windows para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando cache de atualizações do Windows..." -ForegroundColor Yellow
    
    # Verificar tamanho da pasta SoftwareDistribution antes da limpeza
    $updateCachePath = "$env:SystemRoot\SoftwareDistribution\Download"
    $updateCacheFiles = Get-ChildItem -Path $updateCachePath -Recurse -ErrorAction SilentlyContinue
    $updateCacheSize = ($updateCacheFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "O cache de atualizações do Windows está ocupando aproximadamente $([math]::Round($updateCacheSize, 2)) MB." -ForegroundColor White
    
    # Parar o serviço Windows Update
    Write-Host "Parando o serviço Windows Update..." -ForegroundColor DarkGray
    Stop-Service -Name wuauserv -Force -ErrorAction SilentlyContinue
    
    # Limpar o cache de atualizações
    Write-Host "Limpando o cache de atualizações do Windows..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    
    # Iniciar o serviço Windows Update novamente
    Write-Host "Iniciando o serviço Windows Update..." -ForegroundColor DarkGray
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    
    Write-Host "Cache de atualizações do Windows limpo com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de atualizações:" -ForegroundColor Cyan
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray
    Write-Host "- Resolução de problemas com atualizações do Windows" -ForegroundColor DarkGray
    Write-Host "- Melhoria no desempenho do sistema" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanHibernationFile {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos de Hibernação ---" -ForegroundColor White
    Write-Host "Gerencia o arquivo de hibernação (hiberfil.sys) para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar status atual da hibernação
    Write-Host "Verificando status atual da hibernação..." -ForegroundColor Yellow
    $hibernationStatus = powercfg.exe /availablesleepstates | Select-String -Pattern "Hibernação"
    
    if ($hibernationStatus -match "Hibernação está desativada") {
        $currentStatus = "desativada"
    } else {
        $currentStatus = "ativada"
    }
    
    Write-Host "Status atual da hibernação: $currentStatus" -ForegroundColor White
    
    # Verificar tamanho do arquivo de hibernação (se existir)
    $systemDrive = $env:SystemDrive
    $hiberfilPath = "$systemDrive\hiberfil.sys"
    
    if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
        try {
            $hiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
            Write-Host "Tamanho do arquivo de hibernação: $([math]::Round($hiberfilSize, 2)) GB" -ForegroundColor White
        } catch {
            Write-Host "Não foi possível determinar o tamanho do arquivo de hibernação." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Arquivo de hibernação não encontrado (já está desativado)." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja desativar ou ativar a hibernação
    if ($currentStatus -eq "ativada") {
        $confirmHibernation = Read-Host "Deseja desativar a hibernação para liberar espaço em disco? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Desativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate off
            Write-Host "Hibernação desativada com sucesso! O arquivo hiberfil.sys foi removido." -ForegroundColor Green
        } else {
            Write-Host "Hibernação mantida ativada." -ForegroundColor Green
        }
    } else {
        $confirmHibernation = Read-Host "Deseja ativar a hibernação? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Ativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate on
            Write-Host "Hibernação ativada com sucesso! O arquivo hiberfil.sys foi criado." -ForegroundColor Green
            
            # Verificar novo tamanho do arquivo de hibernação
            if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
                try {
                    $newHiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
                    Write-Host "Tamanho do novo arquivo de hibernação: $([math]::Round($newHiberfilSize, 2)) GB" -ForegroundColor White
                } catch {
                    Write-Host "Não foi possível determinar o tamanho do novo arquivo de hibernação." -ForegroundColor DarkGray
                }
            }
        } else {
            Write-Host "Hibernação mantida desativada." -ForegroundColor Green
        }
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço foi afetado:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a hibernação:" -ForegroundColor Cyan
    Write-Host "- O arquivo de hibernação (hiberfil.sys) geralmente ocupa espaço equivalente a 75% da RAM instalada" -ForegroundColor DarkGray
    Write-Host "- Desativar a hibernação libera esse espaço, mas você não poderá usar o modo de hibernação" -ForegroundColor DarkGray
    Write-Host "- A hibernação é útil para laptops, pois salva o estado do sistema no disco antes de desligar" -ForegroundColor DarkGray
    Write-Host "- Para desktops, a hibernação geralmente é menos necessária" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWinSxS {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Pasta WinSxS ---" -ForegroundColor Magenta
    Write-Host "Limpa componentes não utilizados da pasta WinSxS para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "A pasta WinSxS (Windows Side-by-Side) armazena componentes do sistema e pode ocupar muito espaço." -ForegroundColor White
    Write-Host "Esta limpeza é segura e usa ferramentas oficiais do Windows para remover componentes não utilizados." -ForegroundColor White
    Write-Host ""
    
    # Verificar tamanho da pasta WinSxS antes da limpeza
    Write-Host "Verificando tamanho da pasta WinSxS (isso pode levar algum tempo)..." -ForegroundColor Yellow
    
    try {
        $winSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
        Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($winSxSSize, 2)) GB" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível determinar o tamanho da pasta WinSxS." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja prosseguir com a limpeza
    $confirmCleanup = Read-Host "Deseja prosseguir com a limpeza da pasta WinSxS? (s/n)"
    
    if ($confirmCleanup -eq 's') {
        Write-Host "Executando limpeza de componentes não utilizados (isso pode levar vários minutos)..." -ForegroundColor Yellow
        
        # Executar limpeza de componentes
        Write-Host "Etapa 1: Limpeza de componentes..." -ForegroundColor DarkGray
        Dism.exe /Online /Cleanup-Image /StartComponentCleanup
        
        # Perguntar se deseja executar limpeza mais agressiva (com reset base)
        $confirmResetBase = Read-Host "Deseja executar uma limpeza mais profunda? (remove a capacidade de desinstalar atualizações) (s/n)"
        
        if ($confirmResetBase -eq 's') {
            Write-Host "Etapa 2: Executando limpeza profunda (isso pode levar muito tempo)..." -ForegroundColor DarkGray
            Dism.exe /Online /Cleanup-Image /StartComponentCleanup /ResetBase
            Write-Host "Limpeza profunda concluída!" -ForegroundColor Green
        }
        
        Write-Host "Limpeza da pasta WinSxS concluída com sucesso!" -ForegroundColor Green
        
        # Verificar tamanho da pasta WinSxS após a limpeza
        try {
            $newWinSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
            $savedSpace = $winSxSSize - $newWinSxSSize
            
            Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($newWinSxSSize, 2)) GB" -ForegroundColor White
            Write-Host "Espaço liberado: $([math]::Round($savedSpace, 2)) GB" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível determinar o novo tamanho da pasta WinSxS." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Limpeza da pasta WinSxS cancelada." -ForegroundColor Yellow
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a pasta WinSxS:" -ForegroundColor Cyan
    Write-Host "- A pasta WinSxS armazena componentes do sistema Windows e atualizações" -ForegroundColor DarkGray
    Write-Host "- Não é recomendado excluir esta pasta manualmente" -ForegroundColor DarkGray
    Write-Host "- A limpeza realizada é segura e usa ferramentas oficiais do Windows" -ForegroundColor DarkGray
    Write-Host "- Após a limpeza profunda, não será possível desinstalar algumas atualizações" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - REDE (Expandidas) ---
function Invoke-NetworkFlushDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Limpar Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkChangeDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Mudar Servidor DNS ---" -ForegroundColor Cyan
    Write-Host "Permite definir servidores DNS personalizados para suas conexões de rede." -ForegroundColor DarkGray
    Write-Host ""

    # Listar adaptadores de rede ativos
    Write-Host "Listando adaptadores de rede ativos..." -ForegroundColor Yellow
    $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
    
    if ($networkAdapters.Count -eq 0) {
        Write-Host "Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host "Adaptadores de rede ativos:" -ForegroundColor White
    $index = 1
    foreach ($adapter in $networkAdapters) {
        Write-Host "[$index] $($adapter.Name) - $($adapter.InterfaceDescription)" -ForegroundColor White
        $index++
    }
    Write-Host ""
    
    # Selecionar adaptador de rede
    $adapterChoice = Read-Host "Selecione o número do adaptador que deseja configurar (ou 0 para voltar)"
    
    if ($adapterChoice -eq "0" -or $adapterChoice -eq "") {
        Write-Host "Operação cancelada." -ForegroundColor Yellow
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $adapterIndex = [int]$adapterChoice - 1
    if ($adapterIndex -lt 0 -or $adapterIndex -ge $networkAdapters.Count) {
        Write-Host "Seleção inválida." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $selectedAdapter = $networkAdapters[$adapterIndex]
    
    # Mostrar configuração DNS atual
    Write-Host "Configuração DNS atual para $($selectedAdapter.Name):" -ForegroundColor Yellow
    $currentDns = Get-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -AddressFamily IPv4 | Select-Object -ExpandProperty ServerAddresses
    
    if ($currentDns.Count -eq 0) {
        Write-Host "Nenhum servidor DNS configurado manualmente (usando DHCP)." -ForegroundColor DarkGray
    } else {
        foreach ($dns in $currentDns) {
            Write-Host $dns -ForegroundColor White
        }
    }
    Write-Host ""
    
    # Opções de DNS
    Write-Host "Opções de DNS:" -ForegroundColor Yellow
    Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
    Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
    Write-Host "[3] OpenDNS (208.67.222.222, 208.67.220.220)" -ForegroundColor White
    Write-Host "[4] Quad9 (9.9.9.9, 149.112.112.112)" -ForegroundColor White
    Write-Host "[5] AdGuard DNS (94.140.14.14, 94.140.15.15)" -ForegroundColor White
    Write-Host "[6] Inserir DNS personalizado" -ForegroundColor White
    Write-Host "[7] Usar DNS automático (DHCP)" -ForegroundColor White
    Write-Host "[0] Cancelar" -ForegroundColor White
    Write-Host ""
    
    $dnsChoice = Read-Host "Selecione uma opção"
    
    switch ($dnsChoice) {
        "1" {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            $dnsName = "Google DNS"
        }
        "2" {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            $dnsName = "Cloudflare DNS"
        }
        "3" {
            $primaryDns = "208.67.222.222"
            $secondaryDns = "208.67.220.220"
            $dnsName = "OpenDNS"
        }
        "4" {
            $primaryDns = "9.9.9.9"
            $secondaryDns = "149.112.112.112"
            $dnsName = "Quad9"
        }
        "5" {
            $primaryDns = "94.140.14.14"
            $secondaryDns = "94.140.15.15"
            $dnsName = "AdGuard DNS"
        }
        "6" {
            $primaryDns = Read-Host "Digite o endereço do DNS primário"
            $secondaryDns = Read-Host "Digite o endereço do DNS secundário (ou deixe em branco)"
            $dnsName = "DNS Personalizado"
        }
        "7" {
            Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ResetServerAddresses
            Write-Host "Configuração de DNS definida para automática (DHCP)." -ForegroundColor Green
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
    }
    
    # Aplicar configuração de DNS
    if ($secondaryDns -eq "") {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns
    } else {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns, $secondaryDns
    }
    
    Write-Host "Configuração de DNS alterada para $dnsName." -ForegroundColor Green
    Write-Host "DNS Primário: $primaryDns" -ForegroundColor White
    if ($secondaryDns -ne "") {
        Write-Host "DNS Secundário: $secondaryDns" -ForegroundColor White
    }
    
    # Limpar cache DNS após a mudança
    Write-Host "Limpando cache DNS para aplicar as alterações..." -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo." -ForegroundColor Green
    
    Write-Host "`nBenefícios de usar servidores DNS alternativos:" -ForegroundColor Cyan
    Write-Host "- Maior velocidade de resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Melhor confiabilidade e disponibilidade" -ForegroundColor DarkGray
    Write-Host "- Alguns servidores oferecem proteção adicional contra malware e phishing" -ForegroundColor DarkGray
    Write-Host "- Possibilidade de contornar bloqueios de conteúdo baseados em DNS" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkReset {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Resetar Configurações de Rede ---" -ForegroundColor White
    Write-Host "Reinicia os componentes de rede. Use como último recurso para solucionar problemas de conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "!!! ATENÇÃO: ESTE COMANDO VAI REINICIAR SUAS CONFIGURAÇÕES DE REDE !!!" -ForegroundColor Red
    Write-Host "Sua conexão será interrompida temporariamente e todas as configurações de rede personalizadas serão redefinidas." -ForegroundColor Yellow
    Write-Host "Isso inclui adaptadores de rede, configurações de DNS, configurações de proxy, etc." -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "Esta operação pode ajudar a resolver os seguintes problemas:" -ForegroundColor Cyan
    Write-Host "- Conexões de rede instáveis ou intermitentes" -ForegroundColor DarkGray
    Write-Host "- Problemas de DNS ou resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Problemas de conectividade após instalação de software ou atualizações" -ForegroundColor DarkGray
    Write-Host "- Erros de rede persistentes que não são resolvidos por outros métodos" -ForegroundColor DarkGray
    Write-Host ""
    
    $confirm = Read-Host "Tem certeza que deseja resetar as configurações de rede? (digite 'sim' para confirmar)"
    
    if ($confirm -eq 'sim') {
        Write-Host "Iniciando reset de configurações de rede..." -ForegroundColor Yellow
        
        # Etapa 1: Resetar pilha TCP/IP
        Write-Host "Etapa 1: Resetando pilha TCP/IP..." -ForegroundColor DarkGray
        netsh int ip reset
        
        # Etapa 2: Resetar catálogo Winsock
        Write-Host "Etapa 2: Resetando catálogo Winsock..." -ForegroundColor DarkGray
        netsh winsock reset
        
        # Etapa 3: Limpar cache DNS
        Write-Host "Etapa 3: Limpando cache DNS..." -ForegroundColor DarkGray
        ipconfig /flushdns
        
        # Etapa 4: Renovar configurações DHCP
        Write-Host "Etapa 4: Renovando configurações DHCP..." -ForegroundColor DarkGray
        ipconfig /release
        ipconfig /renew
        
        # Etapa 5: Reiniciar adaptadores de rede
        Write-Host "Etapa 5: Reiniciando adaptadores de rede..." -ForegroundColor DarkGray
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        
        Write-Host "Reset de configurações de rede concluído!" -ForegroundColor Green
        Write-Host "Recomenda-se reiniciar o computador para aplicar todas as alterações." -ForegroundColor Yellow
        
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        } else {
            Write-Host "Reinício cancelado. Algumas alterações podem não ter efeito até que o computador seja reiniciado." -ForegroundColor Yellow
        }
    } else {
        Write-Host "Reset de configurações de rede cancelado." -ForegroundColor Green
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-OptimizeTcpIp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Otimizar Configurações TCP/IP ---" -ForegroundColor Green
    Write-Host "Ajusta configurações avançadas do TCP/IP para melhorar o desempenho da conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função otimiza vários parâmetros TCP/IP para melhorar a velocidade e estabilidade da conexão." -ForegroundColor White
    Write-Host "As otimizações são seguras e podem ser revertidas se necessário." -ForegroundColor White
    Write-Host ""
    
    Write-Host "Configurações atuais:" -ForegroundColor Yellow
    
    # Mostrar configurações atuais
    Write-Host "Auto-Tuning Level:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Auto-Tuning Level"
    
    Write-Host "Congestion Provider:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Congestion Control Provider"
    
    Write-Host "ECN Capability:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "ECN Capability"
    
    Write-Host "Receive-Side Scaling (RSS):" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Receive-Side Scaling State"
    
    Write-Host ""
    $confirm = Read-Host "Deseja aplicar otimizações TCP/IP recomendadas? (s/n)"
    
    if ($confirm -eq 's') {
        Write-Host "Aplicando otimizações TCP/IP..." -ForegroundColor Yellow
        
        # Otimização 1: Habilitar TCP Window Auto-Tuning
        Write-Host "Configurando TCP Auto-Tuning para 'normal'..." -ForegroundColor DarkGray
        netsh int tcp set global autotuninglevel=normal
        
        # Otimização 2: Habilitar Receive-Side Scaling (RSS)
        Write-Host "Habilitando Receive-Side Scaling (RSS)..." -ForegroundColor DarkGray
        netsh int tcp set global rss=enabled
        
        # Otimização 3: Configurar Congestion Provider para CTCP
        Write-Host "Configurando Congestion Provider para 'ctcp'..." -ForegroundColor DarkGray
        netsh int tcp set global congestionprovider=ctcp
        
        # Otimização 4: Habilitar ECN Capability
        Write-Host "Habilitando ECN Capability..." -ForegroundColor DarkGray
        netsh int tcp set global ecncapability=enabled
        
        # Otimização 5: Configurar NetDMA (se disponível)
        Write-Host "Tentando configurar NetDMA..." -ForegroundColor DarkGray
        netsh int tcp set global netdma=enabled
        
        # Otimização 6: Configurar tamanho de buffer TCP
        Write-Host "Configurando tamanho de buffer TCP..." -ForegroundColor DarkGray
        netsh int tcp set global chimney=enabled
        
        # Otimização 7: Configurar QoS
        Write-Host "Configurando QoS..." -ForegroundColor DarkGray
        netsh int tcp set global timestamps=disabled
        
        Write-Host "Otimizações TCP/IP aplicadas com sucesso!" -ForegroundColor Green
        
        Write-Host "`nNovas configurações:" -ForegroundColor Yellow
        
        # Mostrar novas configurações
        Write-Host "Auto-Tuning Level:" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "Auto-Tuning Level"
        
        Write-Host "Congestion Provider:" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "Congestion Control Provider"
        
        Write-Host "ECN Capability:" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "ECN Capability"
        
        Write-Host "Receive-Side Scaling (RSS):" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "Receive-Side Scaling State"
        
        Write-Host "`nBenefícios das otimizações TCP/IP:" -ForegroundColor Cyan
        Write-Host "- Melhor aproveitamento da largura de banda disponível" -ForegroundColor DarkGray
        Write-Host "- Redução da latência em conexões de internet" -ForegroundColor DarkGray
        Write-Host "- Melhor desempenho em downloads e uploads" -ForegroundColor DarkGray
        Write-Host "- Conexões mais estáveis em redes congestionadas" -ForegroundColor DarkGray
        
        Write-Host "`nNota: Algumas alterações podem requerer reinicialização para ter efeito completo." -ForegroundColor Yellow
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        }
    } else {
        Write-Host "Otimizações TCP/IP canceladas." -ForegroundColor Yellow
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-CheckNetworkSpeed {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Verificar Velocidade da Conexão ---" -ForegroundColor Magenta
    Write-Host "Realiza testes para verificar a velocidade e qualidade da sua conexão com a internet." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função realiza testes básicos para avaliar a velocidade e qualidade da sua conexão." -ForegroundColor White
    Write-Host "Nota: Para testes de velocidade mais precisos, recomendamos usar sites especializados como speedtest.net" -ForegroundColor White
    Write-Host ""
    
    # Teste 1: Verificar conectividade básica
    Write-Host "Teste 1: Verificando conectividade básica com a internet..." -ForegroundColor Yellow
    $pingGoogle = Test-Connection -ComputerName google.com -Count 4 -ErrorAction SilentlyContinue
    
    if ($pingGoogle) {
        $avgLatency = ($pingGoogle | Measure-Object -Property ResponseTime -Average).Average
        $maxLatency = ($pingGoogle | Measure-Object -Property ResponseTime -Maximum).Maximum
        $minLatency = ($pingGoogle | Measure-Object -Property ResponseTime -Minimum).Minimum
        
        Write-Host "Conectividade: OK" -ForegroundColor Green
        Write-Host "Latência média: $avgLatency ms" -ForegroundColor $(if ($avgLatency -lt 50) { "Green" } elseif ($avgLatency -lt 100) { "Yellow" } else { "Red" })
        Write-Host "Latência mínima: $minLatency ms" -ForegroundColor Green
        Write-Host "Latência máxima: $maxLatency ms" -ForegroundColor $(if ($maxLatency -lt 100) { "Green" } elseif ($maxLatency -lt 200) { "Yellow" } else { "Red" })
        
        # Avaliação da qualidade da conexão
        if ($avgLatency -lt 30) {
            $qualidade = "Excelente"
            $cor = "Green"
        } elseif ($avgLatency -lt 60) {
            $qualidade = "Boa"
            $cor = "Green"
        } elseif ($avgLatency -lt 100) {
            $qualidade = "Razoável"
            $cor = "Yellow"
        } else {
            $qualidade = "Ruim"
            $cor = "Red"
        }
        
        Write-Host "Qualidade da conexão: $qualidade" -ForegroundColor $cor
    } else {
        Write-Host "Não foi possível conectar à internet. Verifique sua conexão." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host ""
    
    # Teste 2: Verificar resolução DNS
    Write-Host "Teste 2: Verificando velocidade de resolução DNS..." -ForegroundColor Yellow
    $domains = @("google.com", "microsoft.com", "amazon.com", "facebook.com", "youtube.com")
    $dnsResults = @()
    
    foreach ($domain in $domains) {
        $startTime = Get-Date
        try {
            $null = Resolve-DnsName -Name $domain -ErrorAction SilentlyContinue
            $endTime = Get-Date
            $timeSpan = New-TimeSpan -Start $startTime -End $endTime
            $dnsResults += [PSCustomObject]@{
                Domain = $domain
                Time = $timeSpan.TotalMilliseconds
                Status = "OK"
            }
        } catch {
            $dnsResults += [PSCustomObject]@{
                Domain = $domain
                Time = 0
                Status = "Falha"
            }
        }
    }
    
    $dnsResults | Format-Table -AutoSize
    
    $avgDnsTime = ($dnsResults | Where-Object { $_.Status -eq "OK" } | Measure-Object -Property Time -Average).Average
    Write-Host "Tempo médio de resolução DNS: $([math]::Round($avgDnsTime, 2)) ms" -ForegroundColor $(if ($avgDnsTime -lt 50) { "Green" } elseif ($avgDnsTime -lt 100) { "Yellow" } else { "Red" })
    
    Write-Host ""
    
    # Teste 3: Verificar MTU
    Write-Host "Teste 3: Verificando MTU (Maximum Transmission Unit)..." -ForegroundColor Yellow
    
    $activeAdapter = Get-NetAdapter | Where-Object { $_.Status -eq "Up" } | Select-Object -First 1
    if ($activeAdapter) {
        $mtu = Get-NetIPInterface -InterfaceIndex $activeAdapter.ifIndex -AddressFamily IPv4 | Select-Object -ExpandProperty NlMtu
        Write-Host "MTU atual: $mtu bytes" -ForegroundColor White
        
        if ($mtu -eq 1500) {
            Write-Host "MTU está no valor padrão (1500), que é ideal para a maioria das conexões." -ForegroundColor Green
        } elseif ($mtu -lt 1500) {
            Write-Host "MTU está abaixo do valor padrão. Isso pode afetar o desempenho em algumas situações." -ForegroundColor Yellow
        } else {
            Write-Host "MTU está acima do valor padrão. Isso pode causar fragmentação de pacotes em algumas redes." -ForegroundColor Yellow
        }
    } else {
        Write-Host "Não foi possível determinar o MTU. Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
    }
    
    Write-Host ""
    
    # Teste 4: Verificar perda de pacotes
    Write-Host "Teste 4: Verificando perda de pacotes..." -ForegroundColor Yellow
    $packetLossTest = Test-Connection -ComputerName google.com -Count 50 -ErrorAction SilentlyContinue
    
    if ($packetLossTest) {
        $packetsSent = 50
        $packetsReceived = ($packetLossTest | Measure-Object).Count
        $packetsLost = $packetsSent - $packetsReceived
        $packetLossPercentage = ($packetsLost / $packetsSent) * 100
        
        Write-Host "Pacotes enviados: $packetsSent" -ForegroundColor White
        Write-Host "Pacotes recebidos: $packetsReceived" -ForegroundColor White
        Write-Host "Pacotes perdidos: $packetsLost" -ForegroundColor $(if ($packetsLost -eq 0) { "Green" } elseif ($packetsLost -lt 5) { "Yellow" } else { "Red" })
        Write-Host "Percentual de perda: $([math]::Round($packetLossPercentage, 2))%" -ForegroundColor $(if ($packetLossPercentage -eq 0) { "Green" } elseif ($packetLossPercentage -lt 10) { "Yellow" } else { "Red" })
        
        # Avaliação da qualidade da conexão baseada na perda de pacotes
        if ($packetLossPercentage -eq 0) {
            Write-Host "Qualidade da conexão (perda de pacotes): Excelente" -ForegroundColor Green
        } elseif ($packetLossPercentage -lt 2) {
            Write-Host "Qualidade da conexão (perda de pacotes): Boa" -ForegroundColor Green
        } elseif ($packetLossPercentage -lt 5) {
            Write-Host "Qualidade da conexão (perda de pacotes): Razoável" -ForegroundColor Yellow
        } else {
            Write-Host "Qualidade da conexão (perda de pacotes): Ruim" -ForegroundColor Red
        }
    } else {
        Write-Host "Não foi possível realizar o teste de perda de pacotes." -ForegroundColor Red
    }
    
    Write-Host ""
    
    # Resumo e recomendações
    Write-Host "=== Resumo da Análise de Rede ===" -ForegroundColor Cyan
    
    # Recomendações baseadas nos resultados
    Write-Host "Recomendações:" -ForegroundColor Yellow
    
    if ($avgLatency -gt 100) {
        Write-Host "- Sua latência está alta. Considere verificar outros dispositivos na rede ou contatar seu provedor." -ForegroundColor Yellow
    }
    
    if ($avgDnsTime -gt 100) {
        Write-Host "- A resolução DNS está lenta. Considere mudar para servidores DNS mais rápidos como Google (8.8.8.8) ou Cloudflare (1.1.1.1)." -ForegroundColor Yellow
    }
    
    if ($packetLossPercentage -gt 2) {
        Write-Host "- Há perda significativa de pacotes. Verifique sua conexão física ou contate seu provedor." -ForegroundColor Yellow
    }
    
    if ($mtu -ne 1500 -and $mtu -ne 0) {
        Write-Host "- Seu MTU não está no valor padrão. Considere ajustá-lo para 1500 para melhor desempenho." -ForegroundColor Yellow
    }
    
    if ($avgLatency -le 100 -and $avgDnsTime -le 100 -and $packetLossPercentage -le 2) {
        Write-Host "- Sua conexão parece estar em boas condições! Não há problemas significativos detectados." -ForegroundColor Green
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-ConfigureQoS {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Configurar QoS (Qualidade de Serviço) ---" -ForegroundColor Gray
    Write-Host "Configura prioridades de tráfego de rede para melhorar o desempenho de aplicações específicas." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "O QoS (Quality of Service) permite priorizar certos tipos de tráfego de rede sobre outros." -ForegroundColor White
    Write-Host "Isso é útil para garantir que aplicações importantes como jogos, chamadas de vídeo ou streaming" -ForegroundColor White
    Write-Host "tenham prioridade sobre downloads ou atualizações em segundo plano." -ForegroundColor White
    Write-Host ""
    
    Write-Host "Opções de configuração de QoS:" -ForegroundColor Yellow
    Write-Host "[1] Configurar QoS para Jogos (prioriza tráfego de jogos)" -ForegroundColor White
    Write-Host "[2] Configurar QoS para Videoconferência (prioriza Zoom, Teams, etc.)" -ForegroundColor White
    Write-Host "[3] Configurar QoS para Streaming (prioriza Netflix, YouTube, etc.)" -ForegroundColor White
    Write-Host "[4] Configurar QoS Personalizado" -ForegroundColor White
    Write-Host "[5] Desativar QoS" -ForegroundColor White
    Write-Host "[0] Voltar" -ForegroundColor White
    Write-Host ""
    
    $qosChoice = Read-Host "Selecione uma opção"
    
    switch ($qosChoice) {
        "1" {
            Write-Host "Configurando QoS para Jogos..." -ForegroundColor Yellow
            
            # Criar política de QoS para jogos
            Write-Host "Criando política de QoS para jogos..." -ForegroundColor DarkGray
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS para jogos usando netsh
            netsh advfirewall firewall add rule name="QoS-Games" dir=out action=allow protocol=UDP remoteport=3074,3478,3479,3480 enable=yes
            
            # Configurar prioridade para jogos
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política para jogos
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Application Name" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Protocol" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Remote Port" -Value "3074,3478-3480" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "DSCP Value" -Value "46" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS para Jogos configurado com sucesso!" -ForegroundColor Green
            Write-Host "Os jogos online agora terão prioridade sobre outros tipos de tráfego." -ForegroundColor Green
        }
        "2" {
            Write-Host "Configurando QoS para Videoconferência..." -ForegroundColor Yellow
            
            # Criar política de QoS para videoconferência
            Write-Host "Criando política de QoS para videoconferência..." -ForegroundColor DarkGray
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS para videoconferência usando netsh
            netsh advfirewall firewall add rule name="QoS-VideoConference" dir=out action=allow protocol=UDP remoteport=3478-3479,8801-8810 enable=yes
            
            # Configurar prioridade para videoconferência
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política para Zoom
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Application Name" -Value "Zoom.exe" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Protocol" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Remote Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "DSCP Value" -Value "46" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Throttle Rate" -Value "-1" -Type String
            
            # Adicionar política para Teams
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Application Name" -Value "Teams.exe" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Protocol" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Remote Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "DSCP Value" -Value "46" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS para Videoconferência configurado com sucesso!" -ForegroundColor Green
            Write-Host "Aplicativos como Zoom e Teams agora terão prioridade sobre outros tipos de tráfego." -ForegroundColor Green
        }
        "3" {
            Write-Host "Configurando QoS para Streaming..." -ForegroundColor Yellow
            
            # Criar política de QoS para streaming
            Write-Host "Criando política de QoS para streaming..." -ForegroundColor DarkGray
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS para streaming usando netsh
            netsh advfirewall firewall add rule name="QoS-Streaming" dir=out action=allow protocol=TCP remoteport=80,443 enable=yes
            
            # Configurar prioridade para streaming
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política para navegadores (streaming)
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Application Name" -Value "*.exe" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Protocol" -Value "TCP" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Remote Port" -Value "80,443" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "DSCP Value" -Value "34" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS para Streaming configurado com sucesso!" -ForegroundColor Green
            Write-Host "Serviços de streaming como Netflix e YouTube agora terão prioridade sobre outros tipos de tráfego." -ForegroundColor Green
        }
        "4" {
            Write-Host "Configurando QoS Personalizado..." -ForegroundColor Yellow
            
            # Solicitar informações para QoS personalizado
            $appName = Read-Host "Digite o nome do aplicativo (ex: chrome.exe, ou * para todos)"
            $protocol = Read-Host "Digite o protocolo (TCP, UDP, ou * para ambos)"
            $remotePorts = Read-Host "Digite as portas remotas (ex: 80,443, ou * para todas)"
            $priority = Read-Host "Digite o valor de prioridade DSCP (0-63, recomendado: 46 para alta prioridade)"
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS personalizado
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política personalizada
            $policyName = "CustomQoS_" + (Get-Random)
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Application Name" -Value $appName -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Protocol" -Value $protocol -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Remote Port" -Value $remotePorts -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "DSCP Value" -Value $priority -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS Personalizado configurado com sucesso!" -ForegroundColor Green
            Write-Host "A política de QoS personalizada foi criada com o nome: $policyName" -ForegroundColor Green
        }
        "5" {
            Write-Host "Desativando QoS..." -ForegroundColor Yellow
            
            # Remover políticas de QoS
            if (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS") {
                Remove-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Recurse -Force
                Write-Host "Políticas de QoS removidas." -ForegroundColor Green
            }
            
            # Remover regras de firewall relacionadas a QoS
            netsh advfirewall firewall delete rule name="QoS-Games"
            netsh advfirewall firewall delete rule name="QoS-VideoConference"
            netsh advfirewall firewall delete rule name="QoS-Streaming"
            
            # Parar serviço QoS
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService) {
                Stop-Service -Name "QoS RSVP" -Force -ErrorAction SilentlyContinue
                Set-Service -Name "QoS RSVP" -Startup### Enhanced TORK Optimizer

I'll enhance the TORK optimizer with more comprehensive functionality across all features, starting with an expanded Simple Cleanup function and then improving all other options.

```powershell type="code"
# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total### Enhanced TORK Optimizer

I'll enhance the TORK optimizer with more comprehensive functionality across all features, starting with an expanded Simple Cleanup function and then improving all other options.

```powershell type="code"
# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total = ($eventLogs | Measure-Object -Property FileSize -Sum).Sum / 1MB
    
    Write-Host "Encontrados $totalLogCount logs de eventos ocupando aproximadamente $([math]::Round($total, 2)) MB." -ForegroundColor White
    
    # Limpar os logs principais
    Write-Host "Limpando logs principais do sistema..." -ForegroundColor Yellow
    
    $mainLogs = @("Application", "System", "Security")
    foreach ($log in $mainLogs) {
        try {
            $logSize = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).FileSize / 1MB
            $logRecords = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).RecordCount
            
            Write-Host "Log $log: $([math]::Round($logSize, 2)) MB com $logRecords registros" -ForegroundColor DarkGray
            wevtutil cl $log
            Write-Host "Log $log limpo com sucesso!" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível limpar o log $log." -ForegroundColor Red
        }
    }
    
    # Perguntar se deseja limpar todos os outros logs
    $confirmAllLogs = Read-Host "Deseja limpar todos os outros logs do sistema? (s/n)"
    
    if ($confirmAllLogs -eq 's') {
        Write-Host "Limpando todos os logs do sistema... (isso pode levar algum tempo)" -ForegroundColor Yellow
        
        $otherLogs = $eventLogs | Where-Object { $_.LogName -notin $mainLogs }
        foreach ($log in $otherLogs) {
            try {
                wevtutil cl $log.LogName
            } catch {
                # Ignorar erros silenciosamente
            }
        }
        
        Write-Host "Todos os logs do sistema foram limpos!" -ForegroundColor Green
    } else {
        Write-Host "Apenas os logs principais foram limpos." -ForegroundColor Green
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWindowsUpdateCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Atualizações do Windows ---" -ForegroundColor Yellow
    Write-Host "Limpa os arquivos temporários de atualizações do Windows para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando cache de atualizações do Windows..." -ForegroundColor Yellow
    
    # Verificar tamanho da pasta SoftwareDistribution antes da limpeza
    $updateCachePath = "$env:SystemRoot\SoftwareDistribution\Download"
    $updateCacheFiles = Get-ChildItem -Path $updateCachePath -Recurse -ErrorAction SilentlyContinue
    $updateCacheSize = ($updateCacheFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "O cache de atualizações do Windows está ocupando aproximadamente $([math]::Round($updateCacheSize, 2)) MB." -ForegroundColor White
    
    # Parar o serviço Windows Update
    Write-Host "Parando o serviço Windows Update..." -ForegroundColor DarkGray
    Stop-Service -Name wuauserv -Force -ErrorAction SilentlyContinue
    
    # Limpar o cache de atualizações
    Write-Host "Limpando o cache de atualizações do Windows..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    
    # Iniciar o serviço Windows Update novamente
    Write-Host "Iniciando o serviço Windows Update..." -ForegroundColor DarkGray
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    
    Write-Host "Cache de atualizações do Windows limpo com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de atualizações:" -ForegroundColor Cyan
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray
    Write-Host "- Resolução de problemas com atualizações do Windows" -ForegroundColor DarkGray
    Write-Host "- Melhoria no desempenho do sistema" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanHibernationFile {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos de Hibernação ---" -ForegroundColor White
    Write-Host "Gerencia o arquivo de hibernação (hiberfil.sys) para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar status atual da hibernação
    Write-Host "Verificando status atual da hibernação..." -ForegroundColor Yellow
    $hibernationStatus = powercfg.exe /availablesleepstates | Select-String -Pattern "Hibernação"
    
    if ($hibernationStatus -match "Hibernação está desativada") {
        $currentStatus = "desativada"
    } else {
        $currentStatus = "ativada"
    }
    
    Write-Host "Status atual da hibernação: $currentStatus" -ForegroundColor White
    
    # Verificar tamanho do arquivo de hibernação (se existir)
    $systemDrive = $env:SystemDrive
    $hiberfilPath = "$systemDrive\hiberfil.sys"
    
    if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
        try {
            $hiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
            Write-Host "Tamanho do arquivo de hibernação: $([math]::Round($hiberfilSize, 2)) GB" -ForegroundColor White
        } catch {
            Write-Host "Não foi possível determinar o tamanho do arquivo de hibernação." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Arquivo de hibernação não encontrado (já está desativado)." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja desativar ou ativar a hibernação
    if ($currentStatus -eq "ativada") {
        $confirmHibernation = Read-Host "Deseja desativar a hibernação para liberar espaço em disco? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Desativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate off
            Write-Host "Hibernação desativada com sucesso! O arquivo hiberfil.sys foi removido." -ForegroundColor Green
        } else {
            Write-Host "Hibernação mantida ativada." -ForegroundColor Green
        }
    } else {
        $confirmHibernation = Read-Host "Deseja ativar a hibernação? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Ativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate on
            Write-Host "Hibernação ativada com sucesso! O arquivo hiberfil.sys foi criado." -ForegroundColor Green
            
            # Verificar novo tamanho do arquivo de hibernação
            if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
                try {
                    $newHiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
                    Write-Host "Tamanho do novo arquivo de hibernação: $([math]::Round($newHiberfilSize, 2)) GB" -ForegroundColor White
                } catch {
                    Write-Host "Não foi possível determinar o tamanho do novo arquivo de hibernação." -ForegroundColor DarkGray
                }
            }
        } else {
            Write-Host "Hibernação mantida desativada." -ForegroundColor Green
        }
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço foi afetado:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a hibernação:" -ForegroundColor Cyan
    Write-Host "- O arquivo de hibernação (hiberfil.sys) geralmente ocupa espaço equivalente a 75% da RAM instalada" -ForegroundColor DarkGray
    Write-Host "- Desativar a hibernação libera esse espaço, mas você não poderá usar o modo de hibernação" -ForegroundColor DarkGray
    Write-Host "- A hibernação é útil para laptops, pois salva o estado do sistema no disco antes de desligar" -ForegroundColor DarkGray
    Write-Host "- Para desktops, a hibernação geralmente é menos necessária" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWinSxS {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Pasta WinSxS ---" -ForegroundColor Magenta
    Write-Host "Limpa componentes não utilizados da pasta WinSxS para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "A pasta WinSxS (Windows Side-by-Side) armazena componentes do sistema e pode ocupar muito espaço." -ForegroundColor White
    Write-Host "Esta limpeza é segura e usa ferramentas oficiais do Windows para remover componentes não utilizados." -ForegroundColor White
    Write-Host ""
    
    # Verificar tamanho da pasta WinSxS antes da limpeza
    Write-Host "Verificando tamanho da pasta WinSxS (isso pode levar algum tempo)..." -ForegroundColor Yellow
    
    try {
        $winSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
        Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($winSxSSize, 2)) GB" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível determinar o tamanho da pasta WinSxS." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja prosseguir com a limpeza
    $confirmCleanup = Read-Host "Deseja prosseguir com a limpeza da pasta WinSxS? (s/n)"
    
    if ($confirmCleanup -eq 's') {
        Write-Host "Executando limpeza de componentes não utilizados (isso pode levar vários minutos)..." -ForegroundColor Yellow
        
        # Executar limpeza de componentes
        Write-Host "Etapa 1: Limpeza de componentes..." -ForegroundColor DarkGray
        Dism.exe /Online /Cleanup-Image /StartComponentCleanup
        
        # Perguntar se deseja executar limpeza mais agressiva (com reset base)
        $confirmResetBase = Read-Host "Deseja executar uma limpeza mais profunda? (remove a capacidade de desinstalar atualizações) (s/n)"
        
        if ($confirmResetBase -eq 's') {
            Write-Host "Etapa 2: Executando limpeza profunda (isso pode levar muito tempo)..." -ForegroundColor DarkGray
            Dism.exe /Online /Cleanup-Image /StartComponentCleanup /ResetBase
            Write-Host "Limpeza profunda concluída!" -ForegroundColor Green
        }
        
        Write-Host "Limpeza da pasta WinSxS concluída com sucesso!" -ForegroundColor Green
        
        # Verificar tamanho da pasta WinSxS após a limpeza
        try {
            $newWinSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
            $savedSpace = $winSxSSize - $newWinSxSSize
            
            Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($newWinSxSSize, 2)) GB" -ForegroundColor White
            Write-Host "Espaço liberado: $([math]::Round($savedSpace, 2)) GB" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível determinar o novo tamanho da pasta WinSxS." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Limpeza da pasta WinSxS cancelada." -ForegroundColor Yellow
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a pasta WinSxS:" -ForegroundColor Cyan
    Write-Host "- A pasta WinSxS armazena componentes do sistema Windows e atualizações" -ForegroundColor DarkGray
    Write-Host "- Não é recomendado excluir esta pasta manualmente" -ForegroundColor DarkGray
    Write-Host "- A limpeza realizada é segura e usa ferramentas oficiais do Windows" -ForegroundColor DarkGray
    Write-Host "- Após a limpeza profunda, não será possível desinstalar algumas atualizações" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - REDE (Expandidas) ---
function Invoke-NetworkFlushDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Limpar Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkChangeDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Mudar Servidor DNS ---" -ForegroundColor Cyan
    Write-Host "Permite definir servidores DNS personalizados para suas conexões de rede." -ForegroundColor DarkGray
    Write-Host ""

    # Listar adaptadores de rede ativos
    Write-Host "Listando adaptadores de rede ativos..." -ForegroundColor Yellow
    $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
    
    if ($networkAdapters.Count -eq 0) {
        Write-Host "Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host "Adaptadores de rede ativos:" -ForegroundColor White
    $index = 1
    foreach ($adapter in $networkAdapters) {
        Write-Host "[$index] $($adapter.Name) - $($adapter.InterfaceDescription)" -ForegroundColor White
        $index++
    }
    Write-Host ""
    
    # Selecionar adaptador de rede
    $adapterChoice = Read-Host "Selecione o número do adaptador que deseja configurar (ou 0 para voltar)"
    
    if ($adapterChoice -eq "0" -or $adapterChoice -eq "") {
        Write-Host "Operação cancelada." -ForegroundColor Yellow
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $adapterIndex = [int]$adapterChoice - 1
    if ($adapterIndex -lt 0 -or $adapterIndex -ge $networkAdapters.Count) {
        Write-Host "Seleção inválida." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $selectedAdapter = $networkAdapters[$adapterIndex]
    
    # Mostrar configuração DNS atual
    Write-Host "Configuração DNS atual para $($selectedAdapter.Name):" -ForegroundColor Yellow
    $currentDns = Get-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -AddressFamily IPv4 | Select-Object -ExpandProperty ServerAddresses
    
    if ($currentDns.Count -eq 0) {
        Write-Host "Nenhum servidor DNS configurado manualmente (usando DHCP)." -ForegroundColor DarkGray
    } else {
        foreach ($dns in $currentDns) {
            Write-Host $dns -ForegroundColor White
        }
    }
    Write-Host ""
    
    # Opções de DNS
    Write-Host "Opções de DNS:" -ForegroundColor Yellow
    Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
    Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
    Write-Host "[3] OpenDNS (208.67.222.222, 208.67.220.220)" -ForegroundColor White
    Write-Host "[4] Quad9 (9.9.9.9, 149.112.112.112)" -ForegroundColor White
    Write-Host "[5] AdGuard DNS (94.140.14.14, 94.140.15.15)" -ForegroundColor White
    Write-Host "[6] Inserir DNS personalizado" -ForegroundColor White
    Write-Host "[7] Usar DNS automático (DHCP)" -ForegroundColor White
    Write-Host "[0] Cancelar" -ForegroundColor White
    Write-Host ""
    
    $dnsChoice = Read-Host "Selecione uma opção"
    
    switch ($dnsChoice) {
        "1" {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            $dnsName = "Google DNS"
        }
        "2" {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            $dnsName = "Cloudflare DNS"
        }
        "3" {
            $primaryDns = "208.67.222.222"
            $secondaryDns = "208.67.220.220"
            $dnsName = "OpenDNS"
        }
        "4" {
            $primaryDns = "9.9.9.9"
            $secondaryDns = "149.112.112.112"
            $dnsName = "Quad9"
        }
        "5" {
            $primaryDns = "94.140.14.14"
            $secondaryDns = "94.140.15.15"
            $dnsName = "AdGuard DNS"
        }
        "6" {
            $primaryDns = Read-Host "Digite o endereço do DNS primário"
            $secondaryDns = Read-Host "Digite o endereço do DNS secundário (ou deixe em branco)"
            $dnsName = "DNS Personalizado"
        }
        "7" {
            Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ResetServerAddresses
            Write-Host "Configuração de DNS definida para automática (DHCP)." -ForegroundColor Green
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
    }
    
    # Aplicar configuração de DNS
    if ($secondaryDns -eq "") {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns
    } else {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns, $secondaryDns
    }
    
    Write-Host "Configuração de DNS alterada para $dnsName." -ForegroundColor Green
    Write-Host "DNS Primário: $primaryDns" -ForegroundColor White
    if ($secondaryDns -ne "") {
        Write-Host "DNS Secundário: $secondaryDns" -ForegroundColor White
    }
    
    # Limpar cache DNS após a mudança
    Write-Host "Limpando cache DNS para aplicar as alterações..." -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo." -ForegroundColor Green
    
    Write-Host "`nBenefícios de usar servidores DNS alternativos:" -ForegroundColor Cyan
    Write-Host "- Maior velocidade de resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Melhor confiabilidade e disponibilidade" -ForegroundColor DarkGray
    Write-Host "- Alguns servidores oferecem proteção adicional contra malware e phishing" -ForegroundColor DarkGray
    Write-Host "- Possibilidade de contornar bloqueios de conteúdo baseados em DNS" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkReset {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Resetar Configurações de Rede ---" -ForegroundColor White
    Write-Host "Reinicia os componentes de rede. Use como último recurso para solucionar problemas de conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "!!! ATENÇÃO: ESTE COMANDO VAI REINICIAR SUAS CONFIGURAÇÕES DE REDE !!!" -ForegroundColor Red
    Write-Host "Sua conexão será interrompida temporariamente e todas as configurações de rede personalizadas serão redefinidas." -ForegroundColor Yellow
    Write-Host "Isso inclui adaptadores de rede, configurações de DNS, configurações de proxy, etc." -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "Esta operação pode ajudar a resolver os seguintes problemas:" -ForegroundColor Cyan
    Write-Host "- Conexões de rede instáveis ou intermitentes" -ForegroundColor DarkGray
    Write-Host "- Problemas de DNS ou resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Problemas de conectividade após instalação de software ou atualizações" -ForegroundColor DarkGray
    Write-Host "- Erros de rede persistentes que não são resolvidos por outros métodos" -ForegroundColor DarkGray
    Write-Host ""
    
    $confirm = Read-Host "Tem certeza que deseja resetar as configurações de rede? (digite 'sim' para confirmar)"
    
    if ($confirm -eq 'sim') {
        Write-Host "Iniciando reset de configurações de rede..." -ForegroundColor Yellow
        
        # Etapa 1: Resetar pilha TCP/IP
        Write-Host "Etapa 1: Resetando pilha TCP/IP..." -ForegroundColor DarkGray
        netsh int ip reset
        
        # Etapa 2: Resetar catálogo Winsock
        Write-Host "Etapa 2: Resetando catálogo Winsock..." -ForegroundColor DarkGray
        netsh winsock reset
        
        # Etapa 3: Limpar cache DNS
        Write-Host "Etapa 3: Limpando cache DNS..." -ForegroundColor DarkGray
        ipconfig /flushdns
        
        # Etapa 4: Renovar configurações DHCP
        Write-Host "Etapa 4: Renovando configurações DHCP..." -ForegroundColor DarkGray
        ipconfig /release
        ipconfig /renew
        
        # Etapa 5: Reiniciar adaptadores de rede
        Write-Host "Etapa 5: Reiniciando adaptadores de rede..." -ForegroundColor DarkGray
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        
        Write-Host "Reset de configurações de rede concluído!" -ForegroundColor Green
        Write-Host "Recomenda-se reiniciar o computador para aplicar todas as alterações." -ForegroundColor Yellow
        
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        } else {
            Write-Host "Reinício cancelado. Algumas alterações podem não ter efeito até que o computador seja reiniciado." -ForegroundColor Yellow
        }
    } else {
        Write-Host "Reset de configurações de rede cancelado." -ForegroundColor Green
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-OptimizeTcpIp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Otimizar Configurações TCP/IP ---" -ForegroundColor Green
    Write-Host "Ajusta configurações avançadas do TCP/IP para melhorar o desempenho da conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função otimiza vários parâmetros TCP/IP para melhorar a velocidade e estabilidade da conexão." -ForegroundColor White
    Write-Host "As otimizações são seguras e podem ser revertidas se necessário." -ForegroundColor White
    Write-Host ""
    
    Write-Host "Configurações atuais:" -ForegroundColor Yellow
    
    # Mostrar configurações atuais
    Write-Host "Auto-Tuning Level:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Auto-Tuning Level"
    
    Write-Host "Congestion Provider:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Congestion Control Provider"
    
    Write-Host "ECN Capability:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "ECN Capability"
    
    Write-Host "Receive-Side Scaling (RSS):" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Receive-Side Scaling State"
    
    Write-Host ""
    $confirm = Read-Host "Deseja aplicar otimizações TCP/IP recomendadas? (s/n)"
    
    if ($confirm -eq 's') {
        Write-Host "Aplicando otimizações TCP/IP..." -ForegroundColor Yellow
        
        # Otimização 1: Habilitar TCP Window Auto-Tuning
        Write-Host "Configurando TCP Auto-Tuning para 'normal'..." -ForegroundColor DarkGray
        netsh int tcp set global### Enhanced TORK Optimizer

I'll enhance the TORK optimizer with more comprehensive functionality across all features, starting with an expanded Simple Cleanup function and then improving all other options.

```powershell type="code"
# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total### Enhanced TORK Optimizer

I'll enhance the TORK optimizer with more comprehensive functionality across all features, starting with an expanded Simple Cleanup function and then improving all other options.

```powershell type="code"
# Define a preferencia de acao para erros (continua a execucao por padrao)
# Permite que o script tente rodar o máximo possível mesmo que alguns comandos encontrem problemas.
$ErrorActionPreference = 'SilentlyContinue' # Não exibe erros se um item não puder ser processado, por exemplo.

# --- Funcao pra Centralizar Texto (Nosso Maestro de Alinhamento - só pra textos, não pro bannerzão!) ---
# Deixa ela aqui, vai que a gente usa pra centralizar outra coisa, né?
function Centraliza($texto, $cor="White") {
    $largura = [console]::WindowWidth # Pega a largura da largura da janela agora
    # Calcula o espaço pra botar o texto no meio. Pura matemática da zoeira!
    $espacos = [Math]::Max(0, [Math]::Floor(($largura - $texto.Length) / 2))
    $linha = (" " * $espacos) + $texto # Cria a linha com os espaços e o texto
    Write-Host $linha -ForegroundColor $cor # Manda pro console com a cor pedida
}

# --- Funcao que Desenha o Nosso Banner Irado do TORK! ---
# Esse é o nosso outdoor digital no console! Ajustado pros espaços que você mandou!
# Se as bordas ainda estiverem meio teimosas, é o jeitinho do console mesmo, viu? 😉
function Banner-TORK {
    # Nossas cores vibrantes para o banner!
    $CorBorda = "DarkCyan" # Mantido para a borda, combina com o ciano. Se quiser mudar, é aqui!
    $CorLogo = "Green" # Cor vibrante
    $CorProjeto = "Cyan" # Cor vibrante
    $CorCopyright = "Gray" # Tom mais suave

    Write-Host "" # Dá um espacinho no topo, pra não grudar
    Write-Host "                    ╔═══════════════════════════════════════════════════════════════════════════════════════╗" -ForegroundColor $CorBorda
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║          ████████╗ ██████╗ ██████╗ ██╗  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║          ╚══██╔══╝██╔═══██╗██╔══██╗██║ ██╔╝                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██████╔╝█████╔╝                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ██║   ██║██╔══██╗██╔═██╗                                            ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ██║   ╚██████╔╝██║  ██║██║  ██╗                                           ║" -ForegroundColor $CorLogo
    Write-Host "                    ║             ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                          ║" -ForegroundColor $CorLogo
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║           Bem-vindo ao TORK - Otimizador para Windows!                                ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║        Projeto de automacao, limpeza, manutencao e tweaks.                            ║" -ForegroundColor $CorProjeto
    Write-Host "                    ║                                                                                       ║" -ForegroundColor $CorBorda
    Write-Host "                    ║            (C) Partner77 - Todos os direitos reservados                               ║" -ForegroundColor $CorCopyright
    Write-Host "                    ╚═══════════════════════════════════════════════════════════════════════════════════════╝" -ForegroundColor $CorBorda
    Write-Host "" # Espaço embaixo
}

# --- Checagem de Permissões de Administrador (O Guarda da Porta!) ---
# Vê se a gente tá rodando com poderes de admin, senão não dá pra mexer no Windows direito.
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "OPA! Calma lá, patrão!" -ForegroundColor Red
    Write-Host "Pra usar o TORK e deixar o PC voando, preciso de super poderes de Administrador!" -ForegroundColor Yellow
    Write-Host "Fecha essa janela, clica com o botão direito no arquivo do script e escolhe 'Executar como administrador'. Aí sim, tamo junto!" -ForegroundColor Yellow
    Read-Host "Dá um Enter quando terminar de ler, que a gente se vê na próxima..."
    Exit
}

Write-Host "Poderes de Administrador verificados! Bora nessa!" -ForegroundColor Green
Start-Sleep -Seconds 1

# --- Funções Utilitárias (Ferramentas que usamos em vários lugares) ---
function Get-SystemInfo {
    $os = Get-CimInstance Win32_OperatingSystem
    $cs = Get-CimInstance Win32_ComputerSystem
    $proc = Get-CimInstance Win32_Processor
    $mem = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
    
    $info = @{
        "OSName" = $os.Caption
        "OSVersion" = $os.Version
        "OSBuild" = $os.BuildNumber
        "ComputerName" = $cs.Name
        "Manufacturer" = $cs.Manufacturer
        "Model" = $cs.Model
        "Processor" = $proc.Name
        "Memory" = [math]::Round($mem.Sum / 1GB, 2)
        "Architecture" = $os.OSArchitecture
        "InstallDate" = $os.InstallDate
        "LastBootTime" = $os.LastBootUpTime
    }
    
    return $info
}

function Show-SystemSummary {
    $sysInfo = Get-SystemInfo
    
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Computador: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Fabricante: $($sysInfo.Manufacturer)" -ForegroundColor White
    Write-Host "Modelo: $($sysInfo.Model)" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Instalado em: $($sysInfo.InstallDate)" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

function Get-DiskSpaceBefore {
    $drives = Get-PSDrive -PSProvider FileSystem
    $driveInfo = @{}
    
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        
        $driveInfo[$drive.Name] = @{
            "Free" = $freeSpace
            "Used" = $usedSpace
            "Total" = $totalSpace
        }
    }
    
    return $driveInfo
}

function Show-DiskSpaceComparison {
    param (
        $before
    )
    
    $after = Get-PSDrive -PSProvider FileSystem
    
    Write-Host "=== Comparação de Espaço em Disco ===" -ForegroundColor Cyan
    
    foreach ($drive in $after) {
        if ($before.ContainsKey($drive.Name)) {
            $freeSpaceAfter = [math]::Round($drive.Free / 1GB, 2)
            $freeSpaceBefore = $before[$drive.Name].Free
            $spaceRecovered = [math]::Round($freeSpaceAfter - $freeSpaceBefore, 2)
            
            Write-Host "Drive $($drive.Name):" -ForegroundColor White
            Write-Host "  Espaço livre antes: $freeSpaceBefore GB" -ForegroundColor Gray
            Write-Host "  Espaço livre agora: $freeSpaceAfter GB" -ForegroundColor Gray
            
            if ($spaceRecovered -gt 0) {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Green
            } else {
                Write-Host "  Espaço recuperado: $spaceRecovered GB" -ForegroundColor Yellow
            }
            Write-Host ""
        }
    }
    
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Funções dos Menus (Principal, Simplificado, Avançado e Sub-menus) ---

# --- Menu Principal (A Bifurcação do Destino! Simplificado vs Avançado) ---
# É aqui que o usuário escolhe se quer ser um mago ou um cara prático!
function Show-MainMenu {
    do {
        Clear-Host # Limpa a tela pra organizar o menu
        Banner-TORK # Banner no topo, pra gente não esquecer quem somos!
        Show-SystemSummary # Mostra um resumo do sistema

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "       MENU PRINCIPAL" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # As duas grandes estradas da otimização! Cores variadas (repetindo)!
        Write-Host "[1] Otimização Simplificada (Pra quem quer praticidade e resultado rápido!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização Avançada (Pra quem curte mexer fundo e ter control total!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[3] Diagnóstico Rápido do Sistema (Ver o que tá rolando no PC)" -ForegroundColor Yellow # Nova opção
        Write-Host "[4] Sobre o TORK (Informações e créditos)" -ForegroundColor White # Nova opção
        Write-Host "[0] Sair (Ah, que pena... Mas a porta tá aberta!)" -ForegroundColor Red # Vermelho pra Sair - Ok

        Write-Host ""

        # Pergunta pro usuário qual caminho ele escolhe, tipo Mestre Pokémon!
        $choice = Read-Host "Escolhe sua opção, treinador!"

        # Vê pra onde a gente vai com base na escolha
        switch ($choice) {
            "1" { Show-SimplifiedMenu } # Se escolheu 1, vai pro Menu Simplificado!
            "2" { Show-AdvancedMenu } # Se escolheu 2, vai pro Menu Avançado!
            "3" { Invoke-QuickDiagnostic } # Nova função de diagnóstico rápido
            "4" { Show-AboutTORK } # Nova função de sobre
            "0" { Write-Host "Fechou! Valeu por usar o TORK! Volte sempre que seu PC pedir um gás! ;)" -ForegroundColor Green; Start-Sleep -Seconds 2; break } # Se escolheu 0, vaza (mas volta!)
            default {
                Write-Host "Eita! Opção inválida! Confere os números e tenta de novo, bora lá!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1 # Dá um tempinho pro usuário ver a zoeira da mensagem
            }
        }
    } while ($choice -ne '0') # Repete o Menu Principal enquanto o usuário não escolher Voltar
}

# --- Menu Simplificado (Aqui o TORK faz mágica rápida e segura!) ---
# Acessado pela opção 1 do Menu Principal. Menos opções, mais ação direta!
function Show-SimplifiedMenu {
    do {
        Clear-Host # Limpa o palco pra esse menu!
        Banner-TORK # Nosso banner no topo, sempre presente!

        Write-Host "" # Espacinho camarada
        Write-Host "===============================" -ForegroundColor White
        Write-Host "   OTIMIZACAO SIMPLIFICADA" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções SIMPLIFICADAS - cada uma pode fazer um monte de coisa por baixo dos panos! Cores variadas (repetindo as primárias/neon e adicionando outras)!
        Write-Host "[1] Limpeza Geral do Sistema (Tira o lixo que tá pesando!)" -ForegroundColor Green # Cor variada
        Write-Host "[2] Otimização de Memória e Programas que Ligam com o Windows (Deixa tudo mais ágil!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[3] Acelerar a Conexão com a Internet (Pra navegar sem gargalo!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[4] Deixar o Windows mais Leve Visualmente (Desativa uns efeitos pra ganhar desempenho!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Otimização de Jogos (Configurações pra melhorar FPS e desempenho)" -ForegroundColor Magenta # Nova opção
        Write-Host "[6] Manutenção de Segurança (Verificar e corrigir problemas de segurança)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[7] RODAR TODAS as otimizações SIMPLIFICADAS! (Modo Turbo Fácil!)" -ForegroundColor Red # Vermelho pra "Faz Tudo" - Destaque/Cuidado
        Write-Host "[0] Voltar ao Menu Principal (A gente te espera aqui!)" -ForegroundColor Gray # Cor neutra pra voltar

        Write-Host ""

        # Pergunta qual mágica simplificada o usuário quer
        $choice = Read-Host "Escolhe sua mágica simplificada!"

        # Vê qual mágica rodar
        switch ($choice) {
            "1" { Invoke-SimpleSystemCleanup } # Chama a função de limpeza básica
            "2" { Invoke-SimpleMemoryStartup } # Chama a função pra memória/inicialização
            "3" { Invoke-SimpleInternetOpt } # Chama a função pra internet
            "4" { Invoke-SimpleVisualOpt } # Chama a função pra visual
            "5" { Invoke-SimpleGamingOpt } # Nova função para otimização de jogos
            "6" { Invoke-SimpleSecurityMaintenance } # Nova função para manutenção de segurança
            "7" {
                # Rodar todas as simplificadas sequencialmente
                Write-Host "`nModo Turbo Fácil ATIVADO! Rodando todas as otimizações SIMPLIFICADAS... segura peão!`n" -ForegroundColor Yellow
                Invoke-SimpleSystemCleanup # Roda a 1
                Invoke-SimpleMemoryStartup # Roda a 2
                Invoke-SimpleInternetOpt # Roda a 3
                Invoke-SimpleVisualOpt # Roda a 4
                Invoke-SimpleGamingOpt # Roda a 5
                Invoke-SimpleSecurityMaintenance # Roda a 6
                Write-Host "`nShow! Todas as otimizações SIMPLIFICADAS foram executadas! PC tá agradecendo! ;)`n" -ForegroundColor Green
                Read-Host "Aperta Enter pra voltar pro Menu Simplificado..." # Pausa no final do "Rodar Todas"
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-MainMenu
            default {
                Write-Host "Ops! Opção inválida no Menu Simplificado! Confere os números e manda bala de novo!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Simplificado enquanto o usuário não escolher Voltar
}

# --- Menu Avançado (O Playground dos Magos do PC!) ---
# Acessado pela opção 2 do Menu Principal. Aqui a gente mergulha fundo!
function Show-AdvancedMenu {
    do {
        Clear-Host # Limpa o palco pro menu avançado!
        Banner-TORK # Nosso banner no topo, pra não perder a pose!

        Write-Host "" # Espacinho maroto
        Write-Host "===============================" -ForegroundColor White
        Write-Host "      MENU AVANCADO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções do menu avançado (as CATEGORIAS dos 200 poderes!) Cores variadas (repetindo)!
        Write-Host "[1] Limpeza e Manutenção de Arquivos (Tirar a poeira digital!)" -ForegroundColor Cyan # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[2] Otimizações de Desempenho do Sistema (Deixar o motor roncando!)" -ForegroundColor Green # Cor variada
        Write-Host "[3] Configurações e Otimizações de Rede (Pra internet voar baixo!)" -ForegroundColor Yellow # ESTA TEM SUB-MENU! - Cor variada
        Write-Host "[4] Gerenciamento e Otimização de Serviços do Windows (O que tá rodando e não precisa?!)" -ForegroundColor White # Cor variada
        Write-Host "[5] Ferramentas de Diagnóstico e Verificação (Pra ver se tá tudo nos conformes!)" -ForegroundColor Cyan # Cor repetida
        Write-Host "[6] Desabilitar/Gerenciar Recursos do Windows (Tirar o peso extra do sistema!)" -ForegroundColor Green # Cor repetida
        Write-Host "[7] Gerenciamento de Arquivos e Pastas Avançado (Comandos ninja pra arquivos!)" -ForegroundColor Yellow # Cor repetida
        Write-Host "[8] Gerenciamento de Contas de Usuário (Organizar a galera que usa o PC!)" -ForegroundColor White # Cor repetida
        Write-Host "[9] Otimização para Jogos Avançada (Tweaks pra gamers de verdade!)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Configurações de Privacidade (Controle o que o Windows sabe sobre você)" -ForegroundColor DarkYellow # Nova opção
        Write-Host "[11] Outras Configurações e Tweaks Diversos (Aqueles ajustes secretos!)" -ForegroundColor Gray # Cor neutra/escura
        Write-Host "[0] Voltar ao Menu Principal (Pronto pra voltar pra estrada principal!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta pro mago qual categoria ele quer explorar
        $choice = Read-Host "Escolhe sua área de magia, mago!"

        # Vê pra onde a gente navega dentro do mundo avançado
        switch ($choice) {
            "1" { Show-LimpezaManutencaoMenu } # CHAMA O SUB-MENU DE LIMPEZA
            "2" { Show-DesempenhoMenu } # Agora é um sub-menu também
            "3" { Show-ConfiguracoesRedeMenu } # CHAMA O SUB-MENU DE REDE
            "4" { Show-ServicosMenu } # Agora é um sub-menu também
            "5" { Show-DiagnosticoMenu } # Agora é um sub-menu também
            "6" { Show-RecursosMenu } # Agora é um sub-menu também
            "7" { Show-ArquivosPastasMenu } # Agora é um sub-menu também
            "8" { Show-UsuariosMenu } # Agora é um sub-menu também
            "9" { Show-JogosAvancadoMenu } # Novo sub-menu para jogos
            "10" { Show-PrivacidadeMenu } # Novo sub-menu para privacidade
            "11" { Show-OutrosMenu } # Agora é um sub-menu também
            "0" { break } # Sai do loop deste menu, voltando pro Menu Principal
            default {
                Write-Host "Humm, essa área da magia ainda não existe ou você digitou errado! Tenta de novo, mago!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Menu Avançado enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Limpeza e Manutenção (Dentro do Avançado!) ---
# Este menu lista as opções ESPECÍFICAS da categoria Limpeza no Menu Avançado
function Show-LimpezaManutencaoMenu {
    do {
        Clear-Host # Limpa o palco pra este sub-menu!
        Banner-TORK # Banner no topo, sempre!

        Write-Host "" # Espacinho
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: LIMPEZA E MANUT." -ForegroundColor White # Título menor pro sub-menu
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        # Opções ESPECÍFICAS da categoria Limpeza. Cores variadas (repetindo cores)!
        Write-Host "[1] Limpar Arquivos Temporários do Usuário (Tipo a pasta Temp!)" -ForegroundColor Cyan # Cor variada
        Write-Host "[2] Limpar Arquivos Temporários do Sistema (Os temporários do Windows!)" -ForegroundColor Gray # Cor neutra (substitui DarkCyan)
        Write-Host "[3] Limpar Cache de DNS (Pra resolver nomes de site mais rápido!)" -ForegroundColor Yellow # Cor variada
        Write-Host "[4] Esvaziar Lixeira (Adeus, arquivos deletados!)" -ForegroundColor Gray # Cor neutra (repetindo)
        Write-Host "[5] Limpar Cache de Miniaturas (Aqueles previews de imagem/vídeo!)" -ForegroundColor Green # Cor variada
        Write-Host "[6] Limpar Logs do Sistema (Arquivos de registro que acumulam)" -ForegroundColor Cyan # Nova opção
        Write-Host "[7] Limpar Cache de Atualizações do Windows (Liberar espaço de updates)" -ForegroundColor Yellow # Nova opção
        Write-Host "[8] Limpar Arquivos de Hibernação (Liberar o hiberfil.sys)" -ForegroundColor White # Nova opção
        Write-Host "[9] Limpar Arquivos WinSxS (Pasta que ocupa muito espaço)" -ForegroundColor Magenta # Nova opção
        Write-Host "[10] Executar TODAS as limpezas acima (Faxina completa!)" -ForegroundColor Red # Nova opção
        Write-Host "[0] Voltar ao Menu Avançado (De volta pras categorias!)" -ForegroundColor Red # Vermelho pra Sair/Voltar - Ok

        Write-Host ""

        # Pergunta qual limpeza específica o mago quer fazer
        $choice = Read-Host "Escolhe a limpeza avançada, mestre!"

        # Vê qual função de limpeza específica chamar
        switch ($choice) {
            "1" { Invoke-CleanUserTemp } # Chama a função pra Limpar Temp Usuário
            "2" { Invoke-CleanSystemTemp } # Chama a função pra Limpar Temp Sistema
            "3" { Invoke-CleanDnsCache } # Chama a função pra Limpar Cache DNS
            "4" { Invoke-EmptyRecycleBin } # Chama a função pra Esvaziar Lixeira
            "5" { Invoke-CleanThumbnailCache } # Chama a função pra Limpar Cache de Miniaturas
            "6" { Invoke-CleanSystemLogs } # Nova função para limpar logs do sistema
            "7" { Invoke-CleanWindowsUpdateCache } # Nova função para limpar cache de updates
            "8" { Invoke-CleanHibernationFile } # Nova função para limpar arquivo de hibernação
            "9" { Invoke-CleanWinSxS } # Nova função para limpar pasta WinSxS
            "10" { 
                # Executa todas as limpezas em sequência
                Write-Host "`nIniciando faxina completa do sistema! Isso pode demorar um pouco...`n" -ForegroundColor Yellow
                $diskSpaceBefore = Get-DiskSpaceBefore
                
                Invoke-CleanUserTemp
                Invoke-CleanSystemTemp
                Invoke-CleanDnsCache
                Invoke-EmptyRecycleBin
                Invoke-CleanThumbnailCache
                Invoke-CleanSystemLogs
                Invoke-CleanWindowsUpdateCache
                Invoke-CleanHibernationFile
                Invoke-CleanWinSxS
                
                Write-Host "`nFaxina completa finalizada! Veja quanto espaço foi recuperado:`n" -ForegroundColor Green
                Show-DiskSpaceComparison -before $diskSpaceBefore
                Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
            }
            "0" { break } # Sai do loop deste menu, voltando pra Show-AdvancedMenu
            default {
                Write-Host "Essa tarefa de limpeza ainda não tá na lista! Vê os números e tenta de novo!" -ForegroundColor Red # Vermelho pra erro - Ok
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0') # Repete o Sub-Menu Limpeza enquanto o usuário não escolher Voltar
}

# --- NOVO Sub-Menu: Desempenho (Dentro do Avançado!) ---
function Show-DesempenhoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DESEMPENHO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Ajustar Efeitos Visuais para Melhor Desempenho" -ForegroundColor Green
        Write-Host "[2] Otimizar Disco do Sistema" -ForegroundColor Cyan
        Write-Host "[3] Limpar Arquivos Prefetch" -ForegroundColor Yellow
        Write-Host "[4] Definir Plano de Energia para Alto Desempenho" -ForegroundColor White
        Write-Host "[5] Otimizar Serviço SuperFetch/SysMain" -ForegroundColor Magenta
        Write-Host "[6] Ajustar Tamanho da Memória Virtual" -ForegroundColor Gray
        Write-Host "[7] Desativar Indexação de Arquivos" -ForegroundColor Green
        Write-Host "[8] Otimizar Inicialização do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de desempenho" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização de desempenho"

        switch ($choice) {
            "1" { Invoke-OptimizeVisualEffects }
            "2" { Invoke-OptimizeDisk }
            "3" { Invoke-CleanPrefetch }
            "4" { Invoke-SetHighPerformancePower }
            "5" { Invoke-OptimizeSuperFetch }
            "6" { Invoke-AdjustVirtualMemory }
            "7" { Invoke-DisableIndexing }
            "8" { Invoke-OptimizeStartup }
            "9" {
                Write-Host "`nExecutando todas as otimizações de desempenho...`n" -ForegroundColor Yellow
                Invoke-OptimizeVisualEffects
                Invoke-OptimizeDisk
                Invoke-CleanPrefetch
                Invoke-SetHighPerformancePower
                Invoke-OptimizeSuperFetch
                Invoke-AdjustVirtualMemory
                Invoke-DisableIndexing
                Invoke-OptimizeStartup
                Write-Host "`nTodas as otimizações de desempenho foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Configurações de Rede (Dentro do Avançado!) ---
function Show-ConfiguracoesRedeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: CONFIG. REDE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Limpar Cache de DNS" -ForegroundColor Yellow
        Write-Host "[2] Mudar Servidor DNS" -ForegroundColor Cyan
        Write-Host "[3] Resetar Configurações de Rede" -ForegroundColor White
        Write-Host "[4] Otimizar Configurações TCP/IP" -ForegroundColor Green
        Write-Host "[5] Verificar Velocidade da Conexão" -ForegroundColor Magenta
        Write-Host "[6] Configurar QoS (Qualidade de Serviço)" -ForegroundColor Gray
        Write-Host "[7] Desativar IPv6 (Se não estiver usando)" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Latência de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações de rede" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configuração de rede"

        switch ($choice) {
            "1" { Invoke-NetworkFlushDns }
            "2" { Invoke-NetworkChangeDns }
            "3" { Invoke-NetworkReset }
            "4" { Invoke-OptimizeTcpIp }
            "5" { Invoke-CheckNetworkSpeed }
            "6" { Invoke-ConfigureQoS }
            "7" { Invoke-DisableIPv6 }
            "8" { Invoke-OptimizeGamingLatency }
            "9" {
                Write-Host "`nExecutando todas as otimizações de rede...`n" -ForegroundColor Yellow
                Invoke-NetworkFlushDns
                Invoke-OptimizeTcpIp
                Invoke-CheckNetworkSpeed
                Invoke-ConfigureQoS
                Invoke-DisableIPv6
                Invoke-OptimizeGamingLatency
                Write-Host "`nTodas as otimizações de rede foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Rede..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Serviços (Dentro do Avançado!) ---
function Show-ServicosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: SERVICOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desabilitar Serviço SuperFetch/SysMain" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Serviço de Impressão" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Serviço Windows Update" -ForegroundColor White
        Write-Host "[4] Listar Todos os Serviços em Execução" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Otimizar Serviços para Desempenho Geral" -ForegroundColor Gray
        Write-Host "[7] Restaurar Serviços para Configuração Padrão" -ForegroundColor Yellow
        Write-Host "[8] Desabilitar Serviços Desnecessários" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de serviços"

        switch ($choice) {
            "1" { Invoke-ManageSuperFetch }
            "2" { Invoke-ManagePrintService }
            "3" { Invoke-ManageWindowsUpdate }
            "4" { Invoke-ListRunningServices }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-OptimizeServicesForPerformance }
            "7" { Invoke-RestoreDefaultServices }
            "8" { Invoke-DisableUnnecessaryServices }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Diagnóstico (Dentro do Avançado!) ---
function Show-DiagnosticoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: DIAGNOSTICO" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Verificar Arquivos do Sistema (SFC)" -ForegroundColor Yellow
        Write-Host "[2] Reparar Imagem do Windows (DISM)" -ForegroundColor Cyan
        Write-Host "[3] Verificar Disco por Erros (CHKDSK)" -ForegroundColor White
        Write-Host "[4] Verificar Saúde do Disco" -ForegroundColor Green
        Write-Host "[5] Verificar Drivers Desatualizados" -ForegroundColor Magenta
        Write-Host "[6] Verificar Problemas de Inicialização" -ForegroundColor Gray
        Write-Host "[7] Verificar Problemas de Memória RAM" -ForegroundColor Yellow
        Write-Host "[8] Verificar Temperatura do Sistema" -ForegroundColor Cyan
        Write-Host "[9] Executar TODOS os diagnósticos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de diagnóstico"

        switch ($choice) {
            "1" { Invoke-SfcScan }
            "2" { Invoke-DismRepair }
            "3" { Invoke-ChkDsk }
            "4" { Invoke-CheckDiskHealth }
            "5" { Invoke-CheckDrivers }
            "6" { Invoke-CheckStartupIssues }
            "7" { Invoke-CheckMemory }
            "8" { Invoke-CheckTemperature }
            "9" {
                Write-Host "`nExecutando todos os diagnósticos...`n" -ForegroundColor Yellow
                Invoke-SfcScan
                Invoke-DismRepair
                Invoke-CheckDiskHealth
                Invoke-CheckDrivers
                Invoke-CheckStartupIssues
                Invoke-CheckTemperature
                Write-Host "`nTodos os diagnósticos foram concluídos!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Diagnóstico..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Recursos (Dentro do Avançado!) ---
function Show-RecursosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: RECURSOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Gerenciar Hibernação" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Planos de Energia" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Recursos Opcionais do Windows" -ForegroundColor White
        Write-Host "[4] Gerenciar Memória Virtual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Windows Defender" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Recursos de Telemetria" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Recursos de Inicialização" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Recursos de Segurança" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de recursos"

        switch ($choice) {
            "1" { Invoke-ManageHibernation }
            "2" { Invoke-ManagePowerPlans }
            "3" { Invoke-ManageOptionalFeatures }
            "4" { Invoke-ManageVirtualMemory }
            "5" { Invoke-ManageWindowsDefender }
            "6" { Invoke-ManageTelemetry }
            "7" { Invoke-ManageStartupResources }
            "8" { Invoke-ManageSecurityFeatures }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Arquivos e Pastas (Dentro do Avançado!) ---
function Show-ArquivosPastasMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: ARQUIVOS E PASTAS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Encontrar Arquivos Grandes" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Arquivos" -ForegroundColor Cyan
        Write-Host "[3] Tomar Posse de Arquivos (TakeOwn)" -ForegroundColor White
        Write-Host "[4] Listar Conteúdo de Pastas Específicas" -ForegroundColor Green
        Write-Host "[5] Compactar Pastas para Economizar Espaço" -ForegroundColor Magenta
        Write-Host "[6] Verificar Integridade de Arquivos" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Arquivos Ocultos e do Sistema" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Atributos de Arquivos" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de arquivos e pastas"

        switch ($choice) {
            "1" { Invoke-FindLargeFiles }
            "2" { Invoke-ManageFilePermissions }
            "3" { Invoke-TakeOwnership }
            "4" { Invoke-ListFolderContents }
            "5" { Invoke-CompressFolders }
            "6" { Invoke-VerifyFileIntegrity }
            "7" { Invoke-ManageHiddenSystemFiles }
            "8" { Invoke-ManageFileAttributes }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Usuários (Dentro do Avançado!) ---
function Show-UsuariosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: USUARIOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Listar Todos os Usuários Locais" -ForegroundColor Yellow
        Write-Host "[2] Listar Todos os Grupos Locais" -ForegroundColor Cyan
        Write-Host "[3] Listar Membros de Grupos Específicos" -ForegroundColor White
        Write-Host "[4] Mostrar Propriedades do Usuário Atual" -ForegroundColor Green
        Write-Host "[5] Gerenciar Contas de Usuário" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Políticas de Senha" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Permissões de Usuário" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar UAC (Controle de Conta de Usuário)" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de gerenciamento de usuários"

        switch ($choice) {
            "1" { Invoke-ListLocalUsers }
            "2" { Invoke-ListLocalGroups }
            "3" { Invoke-ListGroupMembers }
            "4" { Invoke-ShowCurrentUserProperties }
            "5" { Invoke-ManageUserAccounts }
            "6" { Invoke-ManagePasswordPolicies }
            "7" { Invoke-ManageUserPermissions }
            "8" { Invoke-ManageUAC }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Jogos Avançado (Dentro do Avançado!) ---
function Show-JogosAvancadoMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: JOGOS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Otimizar Prioridade de CPU para Jogos" -ForegroundColor Yellow
        Write-Host "[2] Otimizar Configurações de Rede para Jogos" -ForegroundColor Cyan
        Write-Host "[3] Otimizar Configurações de GPU" -ForegroundColor White
        Write-Host "[4] Desativar Game DVR e Game Bar" -ForegroundColor Green
        Write-Host "[5] Otimizar Serviços para Jogos" -ForegroundColor Magenta
        Write-Host "[6] Configurar Modo de Jogo do Windows" -ForegroundColor Gray
        Write-Host "[7] Otimizar Configurações de Áudio para Jogos" -ForegroundColor Yellow
        Write-Host "[8] Otimizar Configurações de Input Lag" -ForegroundColor Cyan
        Write-Host "[9] Executar TODAS as otimizações para jogos" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de otimização para jogos"

        switch ($choice) {
            "1" { Invoke-OptimizeCpuPriority }
            "2" { Invoke-OptimizeNetworkForGaming }
            "3" { Invoke-OptimizeGpuSettings }
            "4" { Invoke-DisableGameDvrBar }
            "5" { Invoke-OptimizeServicesForGaming }
            "6" { Invoke-ConfigureGameMode }
            "7" { Invoke-OptimizeAudioForGaming }
            "8" { Invoke-OptimizeInputLag }
            "9" {
                Write-Host "`nExecutando todas as otimizações para jogos...`n" -ForegroundColor Yellow
                Invoke-OptimizeCpuPriority
                Invoke-OptimizeNetworkForGaming
                Invoke-OptimizeGpuSettings
                Invoke-DisableGameDvrBar
                Invoke-OptimizeServicesForGaming
                Invoke-ConfigureGameMode
                Invoke-OptimizeAudioForGaming
                Invoke-OptimizeInputLag
                Write-Host "`nTodas as otimizações para jogos foram concluídas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Jogos..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Privacidade (Dentro do Avançado!) ---
function Show-PrivacidadeMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: PRIVACIDADE" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Desativar Telemetria do Windows" -ForegroundColor Yellow
        Write-Host "[2] Gerenciar Permissões de Aplicativos" -ForegroundColor Cyan
        Write-Host "[3] Gerenciar Histórico de Atividades" -ForegroundColor White
        Write-Host "[4] Gerenciar Diagnóstico e Feedback" -ForegroundColor Green
        Write-Host "[5] Gerenciar Anúncios Personalizados" -ForegroundColor Magenta
        Write-Host "[6] Gerenciar Localização e Sensores" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Reconhecimento de Voz e Digitação" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Sincronização com a Microsoft" -ForegroundColor Cyan
        Write-Host "[9] Aplicar TODAS as configurações de privacidade" -ForegroundColor Red
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de privacidade"

        switch ($choice) {
            "1" { Invoke-DisableTelemetry }
            "2" { Invoke-ManageAppPermissions }
            "3" { Invoke-ManageActivityHistory }
            "4" { Invoke-ManageDiagnosticsFeedback }
            "5" { Invoke-ManagePersonalizedAds }
            "6" { Invoke-ManageLocationSensors }
            "7" { Invoke-ManageVoiceTyping }
            "8" { Invoke-ManageMicrosoftSync }
            "9" {
                Write-Host "`nAplicando todas as configurações de privacidade...`n" -ForegroundColor Yellow
                Invoke-DisableTelemetry
                Invoke-ManageAppPermissions
                Invoke-ManageActivityHistory
                Invoke-ManageDiagnosticsFeedback
                Invoke-ManagePersonalizedAds
                Invoke-ManageLocationSensors
                Invoke-ManageVoiceTyping
                Invoke-ManageMicrosoftSync
                Write-Host "`nTodas as configurações de privacidade foram aplicadas!`n" -ForegroundColor Green
                Read-Host "Pressione Enter para voltar ao menu de Privacidade..."
            }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- NOVO Sub-Menu: Outros (Dentro do Avançado!) ---
function Show-OutrosMenu {
    do {
        Clear-Host
        Banner-TORK

        Write-Host ""
        Write-Host "===============================" -ForegroundColor White
        Write-Host "  AVANCADO: OUTROS TWEAKS" -ForegroundColor White
        Write-Host "===============================" -ForegroundColor White
        Write-Host ""

        Write-Host "[1] Mostrar Informações Detalhadas do Sistema" -ForegroundColor Yellow
        Write-Host "[2] Mostrar Configuração Completa de Rede" -ForegroundColor Cyan
        Write-Host "[3] Reiniciar Explorer.exe" -ForegroundColor White
        Write-Host "[4] Limpar Cache de Atualizações do Windows" -ForegroundColor Green
        Write-Host "[5] Gerenciar Programas de Inicialização" -ForegroundColor Magenta
        Write-Host "[6] Configurar Opções de Energia Avançadas" -ForegroundColor Gray
        Write-Host "[7] Gerenciar Configurações de Armazenamento" -ForegroundColor Yellow
        Write-Host "[8] Gerenciar Configurações de Notificações" -ForegroundColor Cyan
        Write-Host "[0] Voltar ao Menu Avançado" -ForegroundColor Red

        Write-Host ""
        $choice = Read-Host "Escolha uma opção de configurações diversas"

        switch ($choice) {
            "1" { Invoke-ShowDetailedSystemInfo }
            "2" { Invoke-ShowDetailedNetworkConfig }
            "3" { Invoke-RestartExplorer }
            "4" { Invoke-CleanWindowsUpdateCache }
            "5" { Invoke-ManageStartupPrograms }
            "6" { Invoke-ConfigureAdvancedPowerOptions }
            "7" { Invoke-ManageStorageSettings }
            "8" { Invoke-ManageNotificationSettings }
            "0" { break }
            default {
                Write-Host "Opção inválida! Por favor, escolha uma opção válida." -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    } while ($choice -ne '0')
}

# --- Funções para as Secoes SIMPLIFICADAS (Expandidas) ---
function Invoke-SimpleSystemCleanup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza Geral do Sistema: Hora de varrer o lixo digital! ---" -ForegroundColor Green
    Write-Host "Essa opção vai te ajudar a liberar espaço e dar um fôlego pro PC tirando arquivos temporários, lixo da lixeira, etc. É tipo faxina no computador!" -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Comando 1: Limpar Arquivos Temporários do Usuário
    Write-Host "Bora começar limpando os arquivos temporários do seu usuário! Eles acumulam que é uma beleza!" -ForegroundColor Yellow
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário limpos! Menos peso pro PC respirar! ;)" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Esvaziar a Lixeira
    Write-Host "Agora, vamos dar um fim definitivo naqueles arquivos na Lixeira. Eles só estão ocupando espaço à toa!" -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada! Espaço recuperado com sucesso! Rá!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários do Windows
    Write-Host "Vamos limpar também os temporários do próprio Windows. Às vezes, fica lixo escondido por lá!" -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Limpar Cache de Navegadores Comuns
    Write-Host "Bora dar uma geral nos caches dos navegadores também! Eles guardam um monte de coisa que pode pesar!" -ForegroundColor Yellow
    
    # Chrome
    Write-Host "Tentando limpar cache do Google Chrome..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Chrome limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Edge
    Write-Host "Tentando limpar cache do Microsoft Edge..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\GPUCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Service Worker\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Edge limpo (se o navegador não estiver rodando)." -ForegroundColor DarkGray

    # Firefox
    Write-Host "Tentando limpar cache do Mozilla Firefox..." -ForegroundColor DarkGray
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\entries\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\startupCache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\thumbnails\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Firefox limpo (pode não ser completo, dependendo do perfil/uso)." -ForegroundColor DarkGray

    # Brave (se instalado)
    Write-Host "Tentando limpar cache do Brave Browser (se instalado)..." -ForegroundColor DarkGray
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Code Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Cache do Brave limpo (se instalado e não estiver rodando)." -ForegroundColor DarkGray

    Write-Host "Limpeza de caches de navegador concluída!" -ForegroundColor Green
    Write-Host ""

    # Comando 5: Limpar Cache de Miniaturas
    Write-Host "Limpando cache de miniaturas do Windows (aquelas pré-visualizações de imagens e vídeos)..." -ForegroundColor Yellow
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "Cache de miniaturas limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Limpar Arquivos de Log do Windows
    Write-Host "Limpando arquivos de log do Windows que podem ocupar espaço..." -ForegroundColor Yellow
    wevtutil cl Application
    wevtutil cl System
    wevtutil cl Security
    Write-Host "Logs do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 7: Limpar Arquivos Temporários de Instalação
    Write-Host "Limpando arquivos temporários de instalação de programas..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Installer\$*\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários de instalação limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 8: Limpar Arquivos de Atualização do Windows
    Write-Host "Limpando arquivos de atualização do Windows que podem ocupar bastante espaço..." -ForegroundColor Yellow
    Stop-Service -Name wuauserv -ErrorAction SilentlyContinue
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    Write-Host "Arquivos de atualização do Windows limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 9: Limpar Arquivos Prefetch
    Write-Host "Limpando arquivos prefetch para melhorar a inicialização..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos prefetch limpos!" -ForegroundColor Green
    Write-Host ""

    # Comando 10: Executar Limpeza de Disco Integrada do Windows
    Write-Host "Executando a ferramenta de limpeza de disco integrada do Windows..." -ForegroundColor Yellow
    Start-Process -FilePath cleanmgr.exe -ArgumentList "/sagerun:1" -Wait -ErrorAction SilentlyContinue
    Write-Host "Limpeza de disco concluída!" -ForegroundColor Green
    Write-Host ""

    # Mostrar comparação de espaço em disco
    Write-Host "Vamos ver quanto espaço conseguimos recuperar com essa faxina:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    # Mensagem de conclusão da tarefa
    Write-Host "`nPronto! A faxina geral básica foi feita! Seu PC agradece o espaço extra! ;)" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu
    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleMemoryStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Memória e Inicialização Rápida: Deixa o PC ligando num piscar! ---" -ForegroundColor Yellow
    Write-Host "Aqui a gente dá uma olhada na memória RAM e nos programas que ligam junto com o Windows. Menos coisa ligando à toa = PC mais rápido pra usar na hora!" -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Listar Programas de Inicialização
    Write-Host "Listando programas que iniciam com o Windows (pra você saber o que tá rodando por baixo dos panos):" -ForegroundColor Yellow
    Get-CimInstance win32_startupcommand | Select-Object Name, command, Location | Format-Table -AutoSize
    Write-Host "Lista de programas de inicialização exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Serviço SuperFetch/SysMain
    Write-Host "Otimizando o serviço SuperFetch/SysMain para melhorar o desempenho..." -ForegroundColor Yellow
    $confirmSysMain = Read-Host "Deseja desativar o serviço SysMain/SuperFetch? (s/n) - Recomendado para SSDs"
    if ($confirmSysMain -eq 's') {
        Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
        Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
        Write-Host "Serviço SysMain/SuperFetch desativado!" -ForegroundColor Green
    } else {
        Write-Host "Serviço SysMain/SuperFetch mantido ativo." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Limpar Arquivos Temporários de Updates
    Write-Host "Limpando arquivos temporários de atualizações do Windows (podem ocupar bastante espaço e afetar performance):" -ForegroundColor Yellow
    Dism /online /Cleanup-Image /StartComponentCleanup /ErrorAction SilentlyContinue
    Write-Host "Limpeza de componentes de atualização iniciada (pode levar um tempo)." -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Memória Virtual
    Write-Host "Otimizando configurações de memória virtual para melhor desempenho..." -ForegroundColor Yellow
    $totalRam = (Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).Sum / 1GB
    Write-Host "Seu sistema tem aproximadamente $totalRam GB de RAM." -ForegroundColor White
    
    $confirmPageFile = Read-Host "Deseja otimizar o arquivo de paginação (memória virtual)? (s/n)"
    if ($confirmPageFile -eq 's') {
        # Calcula tamanho recomendado (1.5x a RAM para sistemas com menos de 8GB, 1x para sistemas com mais)
        $pageFileSize = if ($totalRam -lt 8) { [math]::Round($totalRam * 1.5) * 1024 } else { [math]::Round($totalRam) * 1024 }
        
        Write-Host "Configurando arquivo de paginação para tamanho fixo de $pageFileSize MB..." -ForegroundColor DarkGray
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put() | Out-Null
        
        $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting
        if ($pageFileSetting) {
            $pageFileSetting.InitialSize = $pageFileSize
            $pageFileSetting.MaximumSize = $pageFileSize
            $pageFileSetting.Put() | Out-Null
        }
        Write-Host "Arquivo de paginação otimizado! (Requer reinicialização para aplicar totalmente)" -ForegroundColor Green
    } else {
        Write-Host "Configurações de memória virtual mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Listar os 10 Processos que mais usam memória no momento
    Write-Host "Listando os 10 processos que mais consomem memória agora:" -ForegroundColor Yellow
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 10 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host "Lista de processos exibida." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Otimizar Inicialização do Windows
    Write-Host "Otimizando a inicialização do Windows..." -ForegroundColor Yellow
    # Desabilitar serviços não essenciais que podem atrasar a inicialização
    $startupServices = @(
        @{Name="DiagTrack"; DisplayName="Experiências do Usuário Conectado e Telemetria"},
        @{Name="dmwappushservice"; DisplayName="Serviço de Transferência Inteligente em Segundo Plano (BITS)"},
        @{Name="MapsBroker"; DisplayName="Serviço de Dados de Mapas"}
    )
    
    foreach ($service in $startupServices) {
        $confirmService = Read-Host "Deseja desativar o serviço '$($service.DisplayName)' na inicialização? (s/n)"
        if ($confirmService -eq 's') {
            Set-Service -Name $service.Name -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Host "Serviço '$($service.DisplayName)' desativado!" -ForegroundColor Green
        } else {
            Write-Host "Serviço '$($service.DisplayName)' mantido." -ForegroundColor Green
        }
    }
    Write-Host ""

    # Comando 7: Reiniciar o Computador (Útil pra liberar memória e aplicar mudanças)
    Write-Host "Quer dar um 'refresh' geral no PC? Reiniciar pode ajudar!" -ForegroundColor Yellow
    $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (digite 'sim' para confirmar)"
    if ($confirmRestart -eq 'sim') {
        Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
        Restart-Computer -Force
    } else {
        Write-Host "Reinício cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização de memória e inicialização!" -ForegroundColor Green

    # Pausa ao final da seção antes de voltar pro menu (a não ser que o PC tenha reiniciado)
    if ($confirmRestart -ne 'sim') {
        Write-Host ""
        Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
    }
}

function Invoke-SimpleInternetOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Acelerar a Conexão com a Internet (Simplificado): Diz adeus pro 'carregando...'! ---" -ForegroundColor Cyan
    Write-Host "Vamos fazer uns ajustes rápidos na sua conexão pra tentar deixar ela mais esperta." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Limpar Cache de DNS
    Write-Host "Limpando o cache de endereços de internet (DNS) pra resolver nomes mais rápido!" -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Otimizar Configurações TCP/IP
    Write-Host "Otimizando configurações TCP/IP para melhorar a velocidade de conexão..." -ForegroundColor Yellow
    
    # Habilitar TCP Window Auto-Tuning
    netsh int tcp set global autotuninglevel=normal
    Write-Host "TCP Auto-Tuning configurado para 'normal'." -ForegroundColor DarkGray
    
    # Otimizar parâmetros de recebimento de pacotes
    netsh int tcp set global rss=enabled
    Write-Host "Receive-Side Scaling (RSS) habilitado." -ForegroundColor DarkGray
    
    # Otimizar congestion provider
    netsh int tcp set global congestionprovider=ctcp
    Write-Host "Congestion Provider configurado para 'ctcp'." -ForegroundColor DarkGray
    
    # Otimizar ECN capability
    netsh int tcp set global ecncapability=enabled
    Write-Host "ECN Capability habilitado." -ForegroundColor DarkGray
    
    Write-Host "Configurações TCP/IP otimizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Reiniciar Adaptadores de Rede
    Write-Host "Dando um 'reset' rápido nas suas conexões de rede. Pode resolver uns pepinos!" -ForegroundColor Yellow
    $confirmResetAdapter = Read-Host "Isso vai desconectar brevemente sua internet. Continuar? (s/n)"
    if ($confirmResetAdapter -eq 's') {
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        Write-Host "Adaptadores de rede reiniciados." -ForegroundColor Green
    } else {
        Write-Host "Reset de adaptadores cancelado." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 4: Configurar DNS Rápido
    Write-Host "Configurar DNS mais rápido pode melhorar sua navegação!" -ForegroundColor Yellow
    $confirmDns = Read-Host "Deseja configurar DNS mais rápidos (Google ou Cloudflare)? (s/n)"
    if ($confirmDns -eq 's') {
        Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
        Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
        $dnsChoice = Read-Host "Escolha uma opção (1 ou 2)"
        
        $primaryDns = ""
        $secondaryDns = ""
        
        if ($dnsChoice -eq '1') {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            Write-Host "Google DNS selecionado." -ForegroundColor DarkGray
        } elseif ($dnsChoice -eq '2') {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            Write-Host "Cloudflare DNS selecionado." -ForegroundColor DarkGray
        } else {
            Write-Host "Opção inválida. DNS não alterado." -ForegroundColor Red
        }
        
        if ($primaryDns -ne "") {
            $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and ($_.InterfaceDescription -match "Ethernet" -or $_.InterfaceDescription -match "Wi-Fi" -or $_.InterfaceDescription -match "Wireless") }
            
            foreach ($adapter in $networkAdapters) {
                Write-Host "Configurando DNS para adaptador: $($adapter.Name)" -ForegroundColor DarkGray
                Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses ($primaryDns, $secondaryDns)
            }
            
            Write-Host "DNS configurado! Sua navegação deve ficar mais rápida agora." -ForegroundColor Green
        }
    } else {
        Write-Host "Configuração de DNS mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Mostrar Status Básico da Conexão
    Write-Host "Mostrando um resumo básico da sua configuração de rede atual:" -ForegroundColor Yellow
    ipconfig /all | Select-String -Pattern "IPv4", "DNS", "Gateway", "DHCP", "Subnet", "Physical Address"
    Write-Host "Status básico da rede exibido." -ForegroundColor Green
    Write-Host ""

    # Comando 6: Testar a conexão com a internet
    Write-Host "Testando a conexão com a internet (ping para google.com)..." -ForegroundColor Yellow
    Test-Connection -Count 4 google.com -ErrorAction SilentlyContinue
    Write-Host "Teste de conexão finalizado." -ForegroundColor Green
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizada a otimização básica de internet!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleVisualOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Deixar o Windows mais Leve Visualmente (Simplificado): Desempenho antes da beleza! ---" -ForegroundColor White
    Write-Host "Ajustes rápidos pra desativar efeitos visuais que podem pesar, liberando recursos pro que importa." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ajustar Efeitos Visuais
    Write-Host "Você quer desativar ou ativar as animações e efeitos visuais do Windows?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Efeitos Visuais (Pra ganhar desempenho)" -ForegroundColor Green
    Write-Host "[2] Configurar para Melhor Aparência (Mais bonito, mas mais pesado)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows Escolher (Configuração padrão)" -ForegroundColor Cyan
    $choiceVisual = Read-Host "Escolha [1], [2] ou [3]"

    if ($choiceVisual -eq '1') {
        Write-Host "Desativando efeitos visuais para melhor desempenho..." -ForegroundColor Yellow
        # Valor 2 = Ajustar para melhor desempenho (desativa a maioria dos efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 2 -Type DWord -Force -ErrorAction SilentlyContinue
        
        # Desativar animações individuais
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value 0 -Type String -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ListviewAlphaSelect' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAnimations' -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Efeitos visuais desativados para melhor desempenho!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '2') {
        Write-Host "Configurando para melhor aparência (todos os efeitos visuais ativados)..." -ForegroundColor Yellow
        # Valor 1 = Ajustar para melhor aparência (ativa todos os efeitos)
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Efeitos visuais configurados para melhor aparência!" -ForegroundColor Green
    } elseif ($choiceVisual -eq '3') {
        Write-Host "Deixando o Windows escolher automaticamente (configuração padrão)..." -ForegroundColor Yellow
        # Valor 0 = Deixar o Windows escolher
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name VisualFXSetting -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Configuração visual definida para padrão do Windows!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança nos efeitos visuais foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 2: Ativar/Desativar Efeitos de Transparência
    Write-Host "E os efeitos de transparência do Windows (tipo na barra de tarefas)?" -ForegroundColor Yellow
    Write-Host "[1] Desativar Transparência (Mais leve)" -ForegroundColor Green
    Write-Host "[2] Ativar Transparência (Mais 'bonito')" -ForegroundColor White
    $choiceTransp = Read-Host "Escolha [1] ou [2]"

    if ($choiceTransp -eq '1') {
        Write-Host "Desativando transparência..." -ForegroundColor Yellow
        # Valor 0 = Desativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência desativada!" -ForegroundColor Green
    } elseif ($choiceTransp -eq '2') {
        Write-Host "Ativando transparência..." -ForegroundColor Yellow
        # Valor 1 = Ativar Transparência
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name EnableTransparency -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Transparência ativada!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança na transparência foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 3: Configurar Tema Claro/Escuro
    Write-Host "Você prefere tema claro ou escuro? O tema escuro pode ser mais confortável para os olhos." -ForegroundColor Yellow
    Write-Host "[1] Tema Escuro (Dark Mode)" -ForegroundColor DarkGray
    Write-Host "[2] Tema Claro (Light Mode)" -ForegroundColor White
    $choiceTheme = Read-Host "Escolha [1] ou [2]"

    if ($choiceTheme -eq '1') {
        Write-Host "Configurando tema escuro..." -ForegroundColor Yellow
        # Valor 0 = Tema Escuro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 0 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema escuro configurado!" -ForegroundColor Green
    } elseif ($choiceTheme -eq '2') {
        Write-Host "Configurando tema claro..." -ForegroundColor Yellow
        # Valor 1 = Tema Claro
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name AppsUseLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name SystemUsesLightTheme -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        Write-Host "Tema claro configurado!" -ForegroundColor Green
    } else {
        Write-Host "Opção inválida. Nenhuma mudança no tema foi feita." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Configurar Resolução de Tela
    Write-Host "Deseja ajustar a resolução da tela? Resoluções menores podem melhorar o desempenho em PCs mais antigos." -ForegroundColor Yellow
    $confirmResolution = Read-Host "Deseja ver e ajustar a resolução da tela? (s/n)"
    
    if ($confirmResolution -eq 's') {
        # Mostrar resolução atual
        $currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -ExpandProperty VideoModeDescription
        Write-Host "Resolução atual: $currentResolution" -ForegroundColor White
        
        # Abrir configurações de exibição do Windows
        Write-Host "Abrindo configurações de exibição do Windows..." -ForegroundColor DarkGray
        Start-Process "ms-settings:display"
        Write-Host "Ajuste a resolução conforme necessário na janela de configurações que foi aberta." -ForegroundColor Green
        
        $waitForSettings = Read-Host "Pressione Enter quando terminar de ajustar as configurações de exibição"
    } else {
        Write-Host "Configuração de resolução mantida." -ForegroundColor Green
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nFinalizados os ajustes visuais básicos!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleGamingOpt {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Otimização de Jogos (Simplificado): Mais FPS, menos lag! ---" -ForegroundColor Magenta
    Write-Host "Vamos fazer alguns ajustes para melhorar o desempenho dos seus jogos sem complicações." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Ativar Modo de Jogo do Windows
    Write-Host "Ativando o Modo de Jogo do Windows para priorizar recursos para jogos..." -ForegroundColor Yellow
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 1 -Force -ErrorAction SilentlyContinue
    Write-Host "Modo de Jogo do Windows ativado!" -ForegroundColor Green
    Write-Host ""

    # Comando 2: Desativar Game DVR e Game Bar
    Write-Host "O Game DVR e Game Bar podem reduzir o desempenho em jogos. Deseja desativá-los?" -ForegroundColor Yellow
    $confirmGameDVR = Read-Host "Desativar Game DVR e Game Bar? (s/n)"
    
    if ($confirmGameDVR -eq 's') {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\GameDVR" -Name "AppCaptureEnabled" -Type DWord -Value 0 -Force -ErrorAction SilentlyContinue
        Write-Host "Game DVR e Game Bar desativados!" -ForegroundColor Green
    } else {
        Write-Host "Game DVR e Game Bar mantidos ativos." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 3: Otimizar Plano de Energia para Jogos
    Write-Host "Configurando plano de energia para alto desempenho (ideal para jogos)..." -ForegroundColor Yellow
    powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
    Write-Host "Plano de energia configurado para alto desempenho!" -ForegroundColor Green
    Write-Host ""

    # Comando 4: Otimizar Configurações de Mouse
    Write-Host "Otimizando configurações de mouse para jogos (precisão do ponteiro)..." -ForegroundColor Yellow
    $confirmMouseFix = Read-Host "Desativar a aceleração do mouse para melhor precisão em jogos? (s/n)"
    
    if ($confirmMouseFix -eq 's') {
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSpeed" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold1" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseThreshold2" -Type String -Value "0" -Force -ErrorAction SilentlyContinue
        Write-Host "Aceleração do mouse desativada para melhor precisão em jogos!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do mouse mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Otimizar Prioridade de CPU para Jogos
    Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor Yellow
    Write-Host "Esta configuração ajusta o sistema para dar mais prioridade aos jogos." -ForegroundColor DarkGray
    
    # Criar chave de registro para prioridade de jogos
    if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
    }
    
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Type DWord -Value 8 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Type DWord -Value 6 -Force -ErrorAction SilentlyContinue
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
    
    Write-Host "Prioridade de CPU para jogos otimizada!" -ForegroundColor Green
    Write-Host ""

    # Comando 6: Verificar Driver de Placa de Vídeo
    Write-Host "Verificando informações da placa de vídeo..." -ForegroundColor Yellow
    $gpuInfo = Get-WmiObject -Class Win32_VideoController | Select-Object Name, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution
    
    foreach ($gpu in $gpuInfo) {
        Write-Host "Placa de vídeo: $($gpu.Name)" -ForegroundColor White
        Write-Host "Versão do driver: $($gpu.DriverVersion)" -ForegroundColor White
        Write-Host "Resolução atual: $($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
      x $($gpu.CurrentVerticalResolution)" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "Recomendação: Mantenha seus drivers de vídeo atualizados para melhor desempenho em jogos!" -ForegroundColor Green
    Write-Host "Você pode baixar os drivers mais recentes nos sites oficiais da NVIDIA, AMD ou Intel." -ForegroundColor DarkGray
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nOtimizações para jogos concluídas! Seus jogos devem rodar mais suaves agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

function Invoke-SimpleSecurityMaintenance {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Manutenção de Segurança (Simplificado): Mantenha seu PC protegido! ---" -ForegroundColor DarkYellow
    Write-Host "Vamos verificar e melhorar a segurança do seu sistema com alguns ajustes simples." -ForegroundColor Gray
    Write-Host ""

    # Comando 1: Verificar Status do Windows Defender
    Write-Host "Verificando status do Windows Defender..." -ForegroundColor Yellow
    $defenderStatus = Get-MpComputerStatus
    
    Write-Host "Status do Windows Defender:" -ForegroundColor White
    Write-Host "Antivírus habilitado: $($defenderStatus.AntivirusEnabled)" -ForegroundColor $(if ($defenderStatus.AntivirusEnabled) { "Green" } else { "Red" })
    Write-Host "Proteção em tempo real: $($defenderStatus.RealTimeProtectionEnabled)" -ForegroundColor $(if ($defenderStatus.RealTimeProtectionEnabled) { "Green" } else { "Red" })
    Write-Host "Definições de antivírus: $($defenderStatus.AntivirusSignatureVersion)" -ForegroundColor White
    Write-Host "Última atualização: $($defenderStatus.AntivirusSignatureLastUpdated)" -ForegroundColor White
    Write-Host ""

    # Comando 2: Atualizar Definições do Windows Defender
    Write-Host "Atualizando definições do Windows Defender..." -ForegroundColor Yellow
    Update-MpSignature -ErrorAction SilentlyContinue
    Write-Host "Definições do Windows Defender atualizadas!" -ForegroundColor Green
    Write-Host ""

    # Comando 3: Verificar Atualizações do Windows
    Write-Host "Verificando status das atualizações do Windows..." -ForegroundColor Yellow
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
            Write-Host "Recomendação: Execute o Windows Update para manter seu sistema seguro." -ForegroundColor Green
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 4: Verificar Configurações de Firewall
    Write-Host "Verificando status do Firewall do Windows..." -ForegroundColor Yellow
    $firewallStatus = Get-NetFirewallProfile
    
    foreach ($profile in $firewallStatus) {
        Write-Host "Perfil: $($profile.Name)" -ForegroundColor White
        Write-Host "Status: $($profile.Enabled)" -ForegroundColor $(if ($profile.Enabled) { "Green" } else { "Red" })
        Write-Host ""
    }
    
    $confirmFirewall = Read-Host "Deseja habilitar o Firewall em todos os perfis? (s/n)"
    if ($confirmFirewall -eq 's') {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
        Write-Host "Firewall habilitado em todos os perfis!" -ForegroundColor Green
    } else {
        Write-Host "Configurações do Firewall mantidas." -ForegroundColor Green
    }
    Write-Host ""

    # Comando 5: Verificar Configurações de UAC
    Write-Host "Verificando configurações do Controle de Conta de Usuário (UAC)..." -ForegroundColor Yellow
    $uacLevel = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -ErrorAction SilentlyContinue
    
    if ($uacLevel) {
        switch ($uacLevel.ConsentPromptBehaviorAdmin) {
            0 { $uacStatus = "Desativado (Não recomendado)" }
            1 { $uacStatus = "Baixo (Não recomendado)" }
            2 { $uacStatus = "Médio" }
            5 { $uacStatus = "Alto (Recomendado)" }
            default { $uacStatus = "Personalizado" }
        }
        
        Write-Host "Nível atual do UAC: $uacStatus" -ForegroundColor $(if ($uacLevel.ConsentPromptBehaviorAdmin -ge 2) { "Green" } else { "Red" })
        
        $confirmUAC = Read-Host "Deseja configurar o UAC para o nível recomendado? (s/n)"
        if ($confirmUAC -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "PromptOnSecureDesktop" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Write-Host "UAC configurado para o nível recomendado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do UAC mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do UAC." -ForegroundColor Red
    }
    Write-Host ""

    # Comando 6: Verificar Configurações de SmartScreen
    Write-Host "Verificando configurações do Windows SmartScreen..." -ForegroundColor Yellow
    $smartScreen = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -ErrorAction SilentlyContinue
    
    if ($smartScreen) {
        Write-Host "Status do SmartScreen: $($smartScreen.SmartScreenEnabled)" -ForegroundColor $(if ($smartScreen.SmartScreenEnabled -eq "RequireAdmin" -or $smartScreen.SmartScreenEnabled -eq "Warn") { "Green" } else { "Red" })
        
        $confirmSmartScreen = Read-Host "Deseja habilitar o SmartScreen para maior segurança? (s/n)"
        if ($confirmSmartScreen -eq 's') {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "RequireAdmin" -Type String -Force -ErrorAction SilentlyContinue
            Write-Host "SmartScreen habilitado!" -ForegroundColor Green
        } else {
            Write-Host "Configurações do SmartScreen mantidas." -ForegroundColor Green
        }
    } else {
        Write-Host "Não foi possível verificar as configurações do SmartScreen." -ForegroundColor Red
    }
    Write-Host ""

    # Mensagem de conclusão da tarefa
    Write-Host "`nManutenção de segurança concluída! Seu sistema está mais protegido agora!" -ForegroundColor Green

    Write-Host ""
    Read-Host "Dá um Enter pra voltar pro Menu Simplificado..."
}

# --- Funções para o Diagnóstico Rápido e Sobre ---
function Invoke-QuickDiagnostic {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Diagnóstico Rápido do Sistema ---" -ForegroundColor Yellow
    Write-Host "Vamos fazer uma verificação rápida do estado atual do seu PC." -ForegroundColor Gray
    Write-Host ""

    # Informações do Sistema
    Write-Host "=== Informações do Sistema ===" -ForegroundColor Cyan
    $sysInfo = Get-SystemInfo
    Write-Host "Sistema: $($sysInfo.OSName) ($($sysInfo.Architecture))" -ForegroundColor White
    Write-Host "Versão: $($sysInfo.OSVersion) (Build $($sysInfo.OSBuild))" -ForegroundColor White
    Write-Host "Processador: $($sysInfo.Processor)" -ForegroundColor White
    Write-Host "Memória RAM: $($sysInfo.Memory) GB" -ForegroundColor White
    Write-Host "Último boot: $($sysInfo.LastBootTime)" -ForegroundColor White
    Write-Host ""

    # Uso de CPU
    Write-Host "=== Uso de CPU ===" -ForegroundColor Cyan
    $cpuLoad = (Get-WmiObject Win32_Processor).LoadPercentage
    Write-Host "Uso atual de CPU: $cpuLoad%" -ForegroundColor $(if ($cpuLoad -lt 70) { "Green" } elseif ($cpuLoad -lt 90) { "Yellow" } else { "Red" })
    Write-Host ""

    # Uso de Memória
    Write-Host "=== Uso de Memória ===" -ForegroundColor Cyan
    $os = Get-WmiObject Win32_OperatingSystem
    $totalMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)
    $usedMemory = [math]::Round($totalMemory - $freeMemory, 2)
    $memoryPercentage = [math]::Round(($usedMemory / $totalMemory) * 100, 2)
    
    Write-Host "Memória Total: $totalMemory GB" -ForegroundColor White
    Write-Host "Memória Usada: $usedMemory GB ($memoryPercentage%)" -ForegroundColor $(if ($memoryPercentage -lt 70) { "Green" } elseif ($memoryPercentage -lt 90) { "Yellow" } else { "Red" })
    Write-Host "Memória Livre: $freeMemory GB" -ForegroundColor White
    Write-Host ""

    # Espaço em Disco
    Write-Host "=== Espaço em Disco ===" -ForegroundColor Cyan
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $freeSpace = [math]::Round($drive.Free / 1GB, 2)
        $usedSpace = [math]::Round(($drive.Used) / 1GB, 2)
        $totalSpace = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
        $percentFree = [math]::Round(($freeSpace / $totalSpace) * 100, 2)
        
        Write-Host "Drive $($drive.Name):" -ForegroundColor White
        Write-Host "  Total: $totalSpace GB" -ForegroundColor White
        Write-Host "  Usado: $usedSpace GB" -ForegroundColor White
        Write-Host "  Livre: $freeSpace GB ($percentFree%)" -ForegroundColor $(if ($percentFree -gt 20) { "Green" } elseif ($percentFree -gt 10) { "Yellow" } else { "Red" })
    }
    Write-Host ""

    # Processos que mais consomem recursos
    Write-Host "=== Top 5 Processos (CPU) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 ProcessName, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}}, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}} | Format-Table -AutoSize
    Write-Host ""

    Write-Host "=== Top 5 Processos (Memória) ===" -ForegroundColor Cyan
    Get-Process | Sort-Object WorkingSet -Descending | Select-Object -First 5 ProcessName, @{Name="Memory(MB)"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}}, @{Name="CPU(s)"; Expression={[math]::Round($_.CPU, 2)}} | Format-Table -AutoSize
    Write-Host ""

    # Status de Serviços Críticos
    Write-Host "=== Status de Serviços Críticos ===" -ForegroundColor Cyan
    $criticalServices = @("wuauserv", "WinDefend", "MpsSvc", "wscsvc")
    foreach ($service in $criticalServices) {
        $serviceStatus = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceStatus) {
            Write-Host "$($serviceStatus.DisplayName): $($serviceStatus.Status)" -ForegroundColor $(if ($serviceStatus.Status -eq "Running") { "Green" } else { "Red" })
        }
    }
    Write-Host ""

    # Verificar Atualizações Pendentes
    Write-Host "=== Atualizações do Windows ===" -ForegroundColor Cyan
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    
    try {
        $searchResult = $updateSearcher.Search("IsInstalled=0")
        $pendingUpdates = $searchResult.Updates.Count
        
        if ($pendingUpdates -gt 0) {
            Write-Host "Existem $pendingUpdates atualizações pendentes para o seu sistema." -ForegroundColor Yellow
        } else {
            Write-Host "Seu sistema está atualizado! Não há atualizações pendentes." -ForegroundColor Green
        }
    } catch {
        Write-Host "Não foi possível verificar as atualizações do Windows." -ForegroundColor Red
    }
    Write-Host ""

    # Recomendações
    Write-Host "=== Recomendações ===" -ForegroundColor Cyan
    
    # Recomendação de Memória
    if ($memoryPercentage -gt 80) {
        Write-Host "- Seu uso de memória está alto. Considere fechar alguns programas ou usar a opção 'Otimização de Memória'." -ForegroundColor Yellow
    }
    
    # Recomendação de Disco
    $lowDiskSpace = $false
    foreach ($drive in $drives) {
        $percentFree = [math]::Round(($drive.Free / ($drive.Free + $drive.Used)) * 100, 2)
        if ($percentFree -lt 15) {
            $lowDiskSpace = $true
            break
        }
    }
    
    if ($lowDiskSpace) {
        Write-Host "- Espaço em disco baixo detectado. Considere usar a opção 'Limpeza Geral do Sistema'." -ForegroundColor Yellow
    }
    
    # Recomendação de Atualizações
    if ($pendingUpdates -gt 0) {
        Write-Host "- Existem atualizações pendentes. Recomendamos atualizar seu sistema para maior segurança." -ForegroundColor Yellow
    }
    
    # Recomendação de Inicialização
    $bootTime = $sysInfo.LastBootTime
    $uptime = (Get-Date) - $bootTime
    if ($uptime.Days -gt 7) {
        Write-Host "- Seu sistema está ligado há $($uptime.Days) dias. Considere reiniciar para aplicar atualizações e limpar a memória." -ForegroundColor Yellow
    }
    
    Write-Host ""

    # Mensagem de conclusão
    Write-Host "`nDiagnóstico rápido concluído! Use as informações acima para decidir quais otimizações fazer." -ForegroundColor Green

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

function Show-AboutTORK {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Sobre o TORK ---" -ForegroundColor White
    Write-Host ""
    
    Write-Host "TORK - Otimizador para Windows" -ForegroundColor Cyan
    Write-Host "Versão: 2.0" -ForegroundColor White
    Write-Host "Desenvolvido por: Partner77" -ForegroundColor White
    Write-Host ""
    
    Write-Host "=== Descrição ===" -ForegroundColor Yellow
    Write-Host "O TORK é uma ferramenta abrangente de otimização para Windows, projetada para" -ForegroundColor Gray
    Write-Host "melhorar o desempenho do seu sistema através de limpeza, ajustes e otimizações." -ForegroundColor Gray
    Write-Host "Ele oferece opções simplificadas para usuários comuns e opções avançadas para" -ForegroundColor Gray
    Write-Host "usuários experientes que desejam um controle mais detalhado sobre o sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Recursos ===" -ForegroundColor Yellow
    Write-Host "- Limpeza completa do sistema" -ForegroundColor Gray
    Write-Host "- Otimização de memória e inicialização" -ForegroundColor Gray
    Write-Host "- Ajustes de rede para melhor conectividade" -ForegroundColor Gray
    Write-Host "- Otimizações visuais para melhor desempenho" -ForegroundColor Gray
    Write-Host "- Configurações específicas para jogos" -ForegroundColor Gray
    Write-Host "- Manutenção de segurança" -ForegroundColor Gray
    Write-Host "- Diagnóstico rápido do sistema" -ForegroundColor Gray
    Write-Host "- Mais de 100 ajustes e otimizações avançadas" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Aviso Legal ===" -ForegroundColor Yellow
    Write-Host "Este software é fornecido 'como está', sem garantias de qualquer tipo." -ForegroundColor Gray
    Write-Host "O autor não se responsabiliza por quaisquer danos ou problemas causados pelo uso" -ForegroundColor Gray
    Write-Host "deste software. Use por sua conta e risco. Recomendamos sempre fazer backup" -ForegroundColor Gray
    Write-Host "dos seus dados importantes antes de realizar otimizações no sistema." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "=== Agradecimentos ===" -ForegroundColor Yellow
    Write-Host "Obrigado por escolher o TORK para otimizar seu sistema Windows!" -ForegroundColor Gray
    Write-Host "Esperamos que esta ferramenta ajude a melhorar o desempenho do seu PC." -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "© 2023-2024 Partner77 - Todos os direitos reservados" -ForegroundColor Cyan
    Write-Host ""
    
    Read-Host "Pressione Enter para voltar ao Menu Principal..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - LIMPEZA (Expandidas) ---
function Invoke-CleanUserTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Usuário ---" -ForegroundColor Cyan
    Write-Host "Remove arquivos da pasta temporária do seu usuário (`$env:TEMP`)." -ForegroundColor Gray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:TEMP..." -ForegroundColor Yellow
    $tempFiles = Get-ChildItem -Path $env:TEMP -Recurse -ErrorAction SilentlyContinue
    $tempFilesCount = ($tempFiles | Measure-Object).Count
    $tempFilesSize = ($tempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $tempFilesCount arquivos temporários ocupando aproximadamente $([math]::Round($tempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do usuário removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemTemp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos Temporários do Sistema ---" -ForegroundColor Gray
    Write-Host "Remove arquivos da pasta temporária do Windows (`$env:SystemRoot\Temp`)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Removendo arquivos em $env:SystemRoot\Temp..." -ForegroundColor Yellow
    $systemTempFiles = Get-ChildItem -Path "$env:SystemRoot\Temp" -Recurse -ErrorAction SilentlyContinue
    $systemTempFilesCount = ($systemTempFiles | Measure-Object).Count
    $systemTempFilesSize = ($systemTempFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $systemTempFilesCount arquivos temporários do sistema ocupando aproximadamente $([math]::Round($systemTempFilesSize, 2)) MB." -ForegroundColor White
    
    Remove-Item "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "Arquivos temporários do sistema removidos." -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanDnsCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-EmptyRecycleBin {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Esvaziar Lixeira ---" -ForegroundColor Gray
    Write-Host "Esvazia a lixeira do usuário logado." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar tamanho da lixeira antes de esvaziar
    Write-Host "Verificando tamanho da lixeira..." -ForegroundColor Yellow
    
    try {
        $shell = New-Object -ComObject Shell.Application
        $recycleBin = $shell.Namespace(0xA)
        $recycleBinItems = $recycleBin.Items()
        $recycleBinItemCount = $recycleBinItems.Count
        
        Write-Host "A lixeira contém $recycleBinItemCount itens." -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o conteúdo da lixeira." -ForegroundColor DarkGray
    }
    
    # Esvaziar a lixeira
    Write-Host "Executando: Esvaziando a lixeira..." -ForegroundColor Yellow
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Write-Host "Lixeira esvaziada com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanThumbnailCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Miniaturas ---" -ForegroundColor Green
    Write-Host "Remove o cache de miniaturas de arquivos (imagens, vídeos, etc.)." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Limpando cache de miniaturas..." -ForegroundColor Yellow
    
    # Verificar tamanho do cache de miniaturas antes da limpeza
    $thumbnailPath = "$env:LOCALAPPDATA\Microsoft\Windows\Explorer"
    $thumbnailFiles = Get-ChildItem -Path $thumbnailPath -Filter "thumbcache_*.db" -ErrorAction SilentlyContinue
    $thumbnailFilesCount = ($thumbnailFiles | Measure-Object).Count
    $thumbnailFilesSize = ($thumbnailFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "Encontrados $thumbnailFilesCount arquivos de cache de miniaturas ocupando aproximadamente $([math]::Round($thumbnailFilesSize, 2)) MB." -ForegroundColor White
    
    # Limpar o cache de miniaturas
    Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Start-Process explorer
    
    Write-Host "Cache de miniaturas limpo com sucesso!" -ForegroundColor Green
    Write-Host "O Windows Explorer foi reiniciado para aplicar as alterações." -ForegroundColor DarkGray
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de miniaturas:" -ForegroundColor Cyan
    Write-Host "- Navegação mais rápida em pastas com muitas imagens ou vídeos" -ForegroundColor DarkGray
    Write-Host "- Correção de miniaturas corrompidas ou desatualizadas" -ForegroundColor DarkGray
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanSystemLogs {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Logs do Sistema ---" -ForegroundColor Cyan
    Write-Host "Limpa os logs de eventos do sistema para liberar espaço e melhorar o desempenho." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando logs do sistema..." -ForegroundColor Yellow
    
    # Verificar tamanho dos logs antes da limpeza
    $eventLogs = Get-WinEvent -ListLog * -ErrorAction SilentlyContinue | Where-Object { $_.RecordCount -gt 0 }
    $totalLogCount = ($eventLogs | Measure-Object).Count
    $total = ($eventLogs | Measure-Object -Property FileSize -Sum).Sum / 1MB
    
    Write-Host "Encontrados $totalLogCount logs de eventos ocupando aproximadamente $([math]::Round($total, 2)) MB." -ForegroundColor White
    
    # Limpar os logs principais
    Write-Host "Limpando logs principais do sistema..." -ForegroundColor Yellow
    
    $mainLogs = @("Application", "System", "Security")
    foreach ($log in $mainLogs) {
        try {
            $logSize = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).FileSize / 1MB
            $logRecords = (Get-WinEvent -ListLog $log -ErrorAction SilentlyContinue).RecordCount
            
            Write-Host "Log $log: $([math]::Round($logSize, 2)) MB com $logRecords registros" -ForegroundColor DarkGray
            wevtutil cl $log
            Write-Host "Log $log limpo com sucesso!" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível limpar o log $log." -ForegroundColor Red
        }
    }
    
    # Perguntar se deseja limpar todos os outros logs
    $confirmAllLogs = Read-Host "Deseja limpar todos os outros logs do sistema? (s/n)"
    
    if ($confirmAllLogs -eq 's') {
        Write-Host "Limpando todos os logs do sistema... (isso pode levar algum tempo)" -ForegroundColor Yellow
        
        $otherLogs = $eventLogs | Where-Object { $_.LogName -notin $mainLogs }
        foreach ($log in $otherLogs) {
            try {
                wevtutil cl $log.LogName
            } catch {
                # Ignorar erros silenciosamente
            }
        }
        
        Write-Host "Todos os logs do sistema foram limpos!" -ForegroundColor Green
    } else {
        Write-Host "Apenas os logs principais foram limpos." -ForegroundColor Green
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWindowsUpdateCache {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Cache de Atualizações do Windows ---" -ForegroundColor Yellow
    Write-Host "Limpa os arquivos temporários de atualizações do Windows para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "Executando: Verificando cache de atualizações do Windows..." -ForegroundColor Yellow
    
    # Verificar tamanho da pasta SoftwareDistribution antes da limpeza
    $updateCachePath = "$env:SystemRoot\SoftwareDistribution\Download"
    $updateCacheFiles = Get-ChildItem -Path $updateCachePath -Recurse -ErrorAction SilentlyContinue
    $updateCacheSize = ($updateCacheFiles | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "O cache de atualizações do Windows está ocupando aproximadamente $([math]::Round($updateCacheSize, 2)) MB." -ForegroundColor White
    
    # Parar o serviço Windows Update
    Write-Host "Parando o serviço Windows Update..." -ForegroundColor DarkGray
    Stop-Service -Name wuauserv -Force -ErrorAction SilentlyContinue
    
    # Limpar o cache de atualizações
    Write-Host "Limpando o cache de atualizações do Windows..." -ForegroundColor Yellow
    Remove-Item "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
    
    # Iniciar o serviço Windows Update novamente
    Write-Host "Iniciando o serviço Windows Update..." -ForegroundColor DarkGray
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
    
    Write-Host "Cache de atualizações do Windows limpo com sucesso!" -ForegroundColor Green
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nBenefícios da limpeza do cache de atualizações:" -ForegroundColor Cyan
    Write-Host "- Liberação de espaço em disco" -ForegroundColor DarkGray
    Write-Host "- Resolução de problemas com atualizações do Windows" -ForegroundColor DarkGray
    Write-Host "- Melhoria no desempenho do sistema" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanHibernationFile {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Arquivos de Hibernação ---" -ForegroundColor White
    Write-Host "Gerencia o arquivo de hibernação (hiberfil.sys) para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    # Verificar status atual da hibernação
    Write-Host "Verificando status atual da hibernação..." -ForegroundColor Yellow
    $hibernationStatus = powercfg.exe /availablesleepstates | Select-String -Pattern "Hibernação"
    
    if ($hibernationStatus -match "Hibernação está desativada") {
        $currentStatus = "desativada"
    } else {
        $currentStatus = "ativada"
    }
    
    Write-Host "Status atual da hibernação: $currentStatus" -ForegroundColor White
    
    # Verificar tamanho do arquivo de hibernação (se existir)
    $systemDrive = $env:SystemDrive
    $hiberfilPath = "$systemDrive\hiberfil.sys"
    
    if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
        try {
            $hiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
            Write-Host "Tamanho do arquivo de hibernação: $([math]::Round($hiberfilSize, 2)) GB" -ForegroundColor White
        } catch {
            Write-Host "Não foi possível determinar o tamanho do arquivo de hibernação." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Arquivo de hibernação não encontrado (já está desativado)." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja desativar ou ativar a hibernação
    if ($currentStatus -eq "ativada") {
        $confirmHibernation = Read-Host "Deseja desativar a hibernação para liberar espaço em disco? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Desativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate off
            Write-Host "Hibernação desativada com sucesso! O arquivo hiberfil.sys foi removido." -ForegroundColor Green
        } else {
            Write-Host "Hibernação mantida ativada." -ForegroundColor Green
        }
    } else {
        $confirmHibernation = Read-Host "Deseja ativar a hibernação? (s/n)"
        
        if ($confirmHibernation -eq 's') {
            Write-Host "Ativando a hibernação..." -ForegroundColor Yellow
            powercfg.exe /hibernate on
            Write-Host "Hibernação ativada com sucesso! O arquivo hiberfil.sys foi criado." -ForegroundColor Green
            
            # Verificar novo tamanho do arquivo de hibernação
            if (Test-Path -Path $hiberfilPath -ErrorAction SilentlyContinue) {
                try {
                    $newHiberfilSize = (Get-Item -Path $hiberfilPath -Force -ErrorAction SilentlyContinue).Length / 1GB
                    Write-Host "Tamanho do novo arquivo de hibernação: $([math]::Round($newHiberfilSize, 2)) GB" -ForegroundColor White
                } catch {
                    Write-Host "Não foi possível determinar o tamanho do novo arquivo de hibernação." -ForegroundColor DarkGray
                }
            }
        } else {
            Write-Host "Hibernação mantida desativada." -ForegroundColor Green
        }
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço foi afetado:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a hibernação:" -ForegroundColor Cyan
    Write-Host "- O arquivo de hibernação (hiberfil.sys) geralmente ocupa espaço equivalente a 75% da RAM instalada" -ForegroundColor DarkGray
    Write-Host "- Desativar a hibernação libera esse espaço, mas você não poderá usar o modo de hibernação" -ForegroundColor DarkGray
    Write-Host "- A hibernação é útil para laptops, pois salva o estado do sistema no disco antes de desligar" -ForegroundColor DarkGray
    Write-Host "- Para desktops, a hibernação geralmente é menos necessária" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

function Invoke-CleanWinSxS {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Limpeza: Pasta WinSxS ---" -ForegroundColor Magenta
    Write-Host "Limpa componentes não utilizados da pasta WinSxS para liberar espaço em disco." -ForegroundColor DarkGray
    Write-Host ""

    # Armazena o espaço em disco antes da limpeza para comparação posterior
    $diskSpaceBefore = Get-DiskSpaceBefore
    
    Write-Host "A pasta WinSxS (Windows Side-by-Side) armazena componentes do sistema e pode ocupar muito espaço." -ForegroundColor White
    Write-Host "Esta limpeza é segura e usa ferramentas oficiais do Windows para remover componentes não utilizados." -ForegroundColor White
    Write-Host ""
    
    # Verificar tamanho da pasta WinSxS antes da limpeza
    Write-Host "Verificando tamanho da pasta WinSxS (isso pode levar algum tempo)..." -ForegroundColor Yellow
    
    try {
        $winSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
        Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($winSxSSize, 2)) GB" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível determinar o tamanho da pasta WinSxS." -ForegroundColor DarkGray
    }
    
    # Perguntar se deseja prosseguir com a limpeza
    $confirmCleanup = Read-Host "Deseja prosseguir com a limpeza da pasta WinSxS? (s/n)"
    
    if ($confirmCleanup -eq 's') {
        Write-Host "Executando limpeza de componentes não utilizados (isso pode levar vários minutos)..." -ForegroundColor Yellow
        
        # Executar limpeza de componentes
        Write-Host "Etapa 1: Limpeza de componentes..." -ForegroundColor DarkGray
        Dism.exe /Online /Cleanup-Image /StartComponentCleanup
        
        # Perguntar se deseja executar limpeza mais agressiva (com reset base)
        $confirmResetBase = Read-Host "Deseja executar uma limpeza mais profunda? (remove a capacidade de desinstalar atualizações) (s/n)"
        
        if ($confirmResetBase -eq 's') {
            Write-Host "Etapa 2: Executando limpeza profunda (isso pode levar muito tempo)..." -ForegroundColor DarkGray
            Dism.exe /Online /Cleanup-Image /StartComponentCleanup /ResetBase
            Write-Host "Limpeza profunda concluída!" -ForegroundColor Green
        }
        
        Write-Host "Limpeza da pasta WinSxS concluída com sucesso!" -ForegroundColor Green
        
        # Verificar tamanho da pasta WinSxS após a limpeza
        try {
            $newWinSxSSize = (Get-ChildItem -Path "$env:SystemRoot\WinSxS" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
            $savedSpace = $winSxSSize - $newWinSxSSize
            
            Write-Host "Tamanho atual da pasta WinSxS: $([math]::Round($newWinSxSSize, 2)) GB" -ForegroundColor White
            Write-Host "Espaço liberado: $([math]::Round($savedSpace, 2)) GB" -ForegroundColor Green
        } catch {
            Write-Host "Não foi possível determinar o novo tamanho da pasta WinSxS." -ForegroundColor DarkGray
        }
    } else {
        Write-Host "Limpeza da pasta WinSxS cancelada." -ForegroundColor Yellow
    }
    
    # Mostrar comparação de espaço em disco
    Write-Host "`nVamos ver quanto espaço conseguimos recuperar:" -ForegroundColor Cyan
    Show-DiskSpaceComparison -before $diskSpaceBefore
    
    Write-Host "`nInformações sobre a pasta WinSxS:" -ForegroundColor Cyan
    Write-Host "- A pasta WinSxS armazena componentes do sistema Windows e atualizações" -ForegroundColor DarkGray
    Write-Host "- Não é recomendado excluir esta pasta manualmente" -ForegroundColor DarkGray
    Write-Host "- A limpeza realizada é segura e usa ferramentas oficiais do Windows" -ForegroundColor DarkGray
    Write-Host "- Após a limpeza profunda, não será possível desinstalar algumas atualizações" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Limpeza..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - REDE (Expandidas) ---
function Invoke-NetworkFlushDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Limpar Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkChangeDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Mudar Servidor DNS ---" -ForegroundColor Cyan
    Write-Host "Permite definir servidores DNS personalizados para suas conexões de rede." -ForegroundColor DarkGray
    Write-Host ""

    # Listar adaptadores de rede ativos
    Write-Host "Listando adaptadores de rede ativos..." -ForegroundColor Yellow
    $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
    
    if ($networkAdapters.Count -eq 0) {
        Write-Host "Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host "Adaptadores de rede ativos:" -ForegroundColor White
    $index = 1
    foreach ($adapter in $networkAdapters) {
        Write-Host "[$index] $($adapter.Name) - $($adapter.InterfaceDescription)" -ForegroundColor White
        $index++
    }
    Write-Host ""
    
    # Selecionar adaptador de rede
    $adapterChoice = Read-Host "Selecione o número do adaptador que deseja configurar (ou 0 para voltar)"
    
    if ($adapterChoice -eq "0" -or $adapterChoice -eq "") {
        Write-Host "Operação cancelada." -ForegroundColor Yellow
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $adapterIndex = [int]$adapterChoice - 1
    if ($adapterIndex -lt 0 -or $adapterIndex -ge $networkAdapters.Count) {
        Write-Host "Seleção inválida." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $selectedAdapter = $networkAdapters[$adapterIndex]
    
    # Mostrar configuração DNS atual
    Write-Host "Configuração DNS atual para $($selectedAdapter.Name):" -ForegroundColor Yellow
    $currentDns = Get-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -AddressFamily IPv4 | Select-Object -ExpandProperty ServerAddresses
    
    if ($currentDns.Count -eq 0) {
        Write-Host "Nenhum servidor DNS configurado manualmente (usando DHCP)." -ForegroundColor DarkGray
    } else {
        foreach ($dns in $currentDns) {
            Write-Host $dns -ForegroundColor White
        }
    }
    Write-Host ""
    
    # Opções de DNS
    Write-Host "Opções de DNS:" -ForegroundColor Yellow
    Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
    Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
    Write-Host "[3] OpenDNS (208.67.222.222, 208.67.220.220)" -ForegroundColor White
    Write-Host "[4] Quad9 (9.9.9.9, 149.112.112.112)" -ForegroundColor White
    Write-Host "[5] AdGuard DNS (94.140.14.14, 94.140.15.15)" -ForegroundColor White
    Write-Host "[6] Inserir DNS personalizado" -ForegroundColor White
    Write-Host "[7] Usar DNS automático (DHCP)" -ForegroundColor White
    Write-Host "[0] Cancelar" -ForegroundColor White
    Write-Host ""
    
    $dnsChoice = Read-Host "Selecione uma opção"
    
    switch ($dnsChoice) {
        "1" {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            $dnsName = "Google DNS"
        }
        "2" {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            $dnsName = "Cloudflare DNS"
        }
        "3" {
            $primaryDns = "208.67.222.222"
            $secondaryDns = "208.67.220.220"
            $dnsName = "OpenDNS"
        }
        "4" {
            $primaryDns = "9.9.9.9"
            $secondaryDns = "149.112.112.112"
            $dnsName = "Quad9"
        }
        "5" {
            $primaryDns = "94.140.14.14"
            $secondaryDns = "94.140.15.15"
            $dnsName = "AdGuard DNS"
        }
        "6" {
            $primaryDns = Read-Host "Digite o endereço do DNS primário"
            $secondaryDns = Read-Host "Digite o endereço do DNS secundário (ou deixe em branco)"
            $dnsName = "DNS Personalizado"
        }
        "7" {
            Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ResetServerAddresses
            Write-Host "Configuração de DNS definida para automática (DHCP)." -ForegroundColor Green
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
    }
    
    # Aplicar configuração de DNS
    if ($secondaryDns -eq "") {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns
    } else {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns, $secondaryDns
    }
    
    Write-Host "Configuração de DNS alterada para $dnsName." -ForegroundColor Green
    Write-Host "DNS Primário: $primaryDns" -ForegroundColor White
    if ($secondaryDns -ne "") {
        Write-Host "DNS Secundário: $secondaryDns" -ForegroundColor White
    }
    
    # Limpar cache DNS após a mudança
    Write-Host "Limpando cache DNS para aplicar as alterações..." -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo." -ForegroundColor Green
    
    Write-Host "`nBenefícios de usar servidores DNS alternativos:" -ForegroundColor Cyan
    Write-Host "- Maior velocidade de resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Melhor confiabilidade e disponibilidade" -ForegroundColor DarkGray
    Write-Host "- Alguns servidores oferecem proteção adicional contra malware e phishing" -ForegroundColor DarkGray
    Write-Host "- Possibilidade de contornar bloqueios de conteúdo baseados em DNS" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkReset {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Resetar Configurações de Rede ---" -ForegroundColor White
    Write-Host "Reinicia os componentes de rede. Use como último recurso para solucionar problemas de conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "!!! ATENÇÃO: ESTE COMANDO VAI REINICIAR SUAS CONFIGURAÇÕES DE REDE !!!" -ForegroundColor Red
    Write-Host "Sua conexão será interrompida temporariamente e todas as configurações de rede personalizadas serão redefinidas." -ForegroundColor Yellow
    Write-Host "Isso inclui adaptadores de rede, configurações de DNS, configurações de proxy, etc." -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "Esta operação pode ajudar a resolver os seguintes problemas:" -ForegroundColor Cyan
    Write-Host "- Conexões de rede instáveis ou intermitentes" -ForegroundColor DarkGray
    Write-Host "- Problemas de DNS ou resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Problemas de conectividade após instalação de software ou atualizações" -ForegroundColor DarkGray
    Write-Host "- Erros de rede persistentes que não são resolvidos por outros métodos" -ForegroundColor DarkGray
    Write-Host ""
    
    $confirm = Read-Host "Tem certeza que deseja resetar as configurações de rede? (digite 'sim' para confirmar)"
    
    if ($confirm -eq 'sim') {
        Write-Host "Iniciando reset de configurações de rede..." -ForegroundColor Yellow
        
        # Etapa 1: Resetar pilha TCP/IP
        Write-Host "Etapa 1: Resetando pilha TCP/IP..." -ForegroundColor DarkGray
        netsh int ip reset
        
        # Etapa 2: Resetar catálogo Winsock
        Write-Host "Etapa 2: Resetando catálogo Winsock..." -ForegroundColor DarkGray
        netsh winsock reset
        
        # Etapa 3: Limpar cache DNS
        Write-Host "Etapa 3: Limpando cache DNS..." -ForegroundColor DarkGray
        ipconfig /flushdns
        
        # Etapa 4: Renovar configurações DHCP
        Write-Host "Etapa 4: Renovando configurações DHCP..." -ForegroundColor DarkGray
        ipconfig /release
        ipconfig /renew
        
        # Etapa 5: Reiniciar adaptadores de rede
        Write-Host "Etapa 5: Reiniciando adaptadores de rede..." -ForegroundColor DarkGray
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        
        Write-Host "Reset de configurações de rede concluído!" -ForegroundColor Green
        Write-Host "Recomenda-se reiniciar o computador para aplicar todas as alterações." -ForegroundColor Yellow
        
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        } else {
            Write-Host "Reinício cancelado. Algumas alterações podem não ter efeito até que o computador seja reiniciado." -ForegroundColor Yellow
        }
    } else {
        Write-Host "Reset de configurações de rede cancelado." -ForegroundColor Green
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-OptimizeTcpIp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Otimizar Configurações TCP/IP ---" -ForegroundColor Green
    Write-Host "Ajusta configurações avançadas do TCP/IP para melhorar o desempenho da conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função otimiza vários parâmetros TCP/IP para melhorar a velocidade e estabilidade da conexão." -ForegroundColor White
    Write-Host "As otimizações são seguras e podem ser revertidas se necessário." -ForegroundColor White
    Write-Host ""
    
    Write-Host "Configurações atuais:" -ForegroundColor Yellow
    
    # Mostrar configurações atuais
    Write-Host "Auto-Tuning Level:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Auto-Tuning Level"
    
    Write-Host "Congestion Provider:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Congestion Control Provider"
    
    Write-Host "ECN Capability:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "ECN Capability"
    
    Write-Host "Receive-Side Scaling (RSS):" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Receive-Side Scaling State"
    
    Write-Host ""
    $confirm = Read-Host "Deseja aplicar otimizações TCP/IP recomendadas? (s/n)"
    
    if ($confirm -eq 's') {
        Write-Host "Aplicando otimizações TCP/IP..." -ForegroundColor Yellow
        
        # Otimização 1: Habilitar TCP Window Auto-Tuning
        Write-Host "Configurando TCP Auto-Tuning para 'normal'..." -ForegroundColor DarkGray
        netsh int tcp set global autotuninglevel=normal
        
        # Otimização 2: Habilitar Receive-Side Scaling (RSS)
        Write-Host "Habilitando Receive-Side Scaling (RSS)..." -ForegroundColor DarkGray
        netsh int tcp set global rss=enabled
        
        # Otimização 3: Configurar Congestion Provider para CTCP
        Write-Host "Configurando Congestion Provider para 'ctcp'..." -ForegroundColor DarkGray
        netsh int tcp set global congestionprovider=ctcp
        
        # Otimização 4: Habilitar ECN Capability
        Write-Host "Habilitando ECN Capability..." -ForegroundColor DarkGray
        netsh int tcp set global ecncapability=enabled
        
        # Otimização 5: Configurar NetDMA (se disponível)
        Write-Host "Tentando configurar NetDMA..." -ForegroundColor DarkGray
        netsh int tcp set global netdma=enabled
        
        # Otimização 6: Configurar tamanho de buffer TCP
        Write-Host "Configurando tamanho de buffer TCP..." -ForegroundColor DarkGray
        netsh int tcp set global chimney=enabled
        
        # Otimização 7: Configurar QoS
        Write-Host "Configurando QoS..." -ForegroundColor DarkGray
        netsh int tcp set global timestamps=disabled
        
        Write-Host "Otimizações TCP/IP aplicadas com sucesso!" -ForegroundColor Green
        
        Write-Host "`nNovas configurações:" -ForegroundColor Yellow
        
        # Mostrar novas configurações
        Write-Host "Auto-Tuning Level:" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "Auto-Tuning Level"
        
        Write-Host "Congestion Provider:" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "Congestion Control Provider"
        
        Write-Host "ECN Capability:" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "ECN Capability"
        
        Write-Host "Receive-Side Scaling (RSS):" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "Receive-Side Scaling State"
        
        Write-Host "`nBenefícios das otimizações TCP/IP:" -ForegroundColor Cyan
        Write-Host "- Melhor aproveitamento da largura de banda disponível" -ForegroundColor DarkGray
        Write-Host "- Redução da latência em conexões de internet" -ForegroundColor DarkGray
        Write-Host "- Melhor desempenho em downloads e uploads" -ForegroundColor DarkGray
        Write-Host "- Conexões mais estáveis em redes congestionadas" -ForegroundColor DarkGray
        
        Write-Host "`nNota: Algumas alterações podem requerer reinicialização para ter efeito completo." -ForegroundColor Yellow
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        }
    } else {
        Write-Host "Otimizações TCP/IP canceladas." -ForegroundColor Yellow
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-CheckNetworkSpeed {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Verificar Velocidade da Conexão ---" -ForegroundColor Magenta
    Write-Host "Realiza testes para verificar a velocidade e qualidade da sua conexão com a internet." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função realiza testes básicos para avaliar a velocidade e qualidade da sua conexão." -ForegroundColor White
    Write-Host "Nota: Para testes de velocidade mais precisos, recomendamos usar sites especializados como speedtest.net" -ForegroundColor White
    Write-Host ""
    
    # Teste 1: Verificar conectividade básica
    Write-Host "Teste 1: Verificando conectividade básica com a internet..." -ForegroundColor Yellow
    $pingGoogle = Test-Connection -ComputerName google.com -Count 4 -ErrorAction SilentlyContinue
    
    if ($pingGoogle) {
        $avgLatency = ($pingGoogle | Measure-Object -Property ResponseTime -Average).Average
        $maxLatency = ($pingGoogle | Measure-Object -Property ResponseTime -Maximum).Maximum
        $minLatency = ($pingGoogle | Measure-Object -Property ResponseTime -Minimum).Minimum
        
        Write-Host "Conectividade: OK" -ForegroundColor Green
        Write-Host "Latência média: $avgLatency ms" -ForegroundColor $(if ($avgLatency -lt 50) { "Green" } elseif ($avgLatency -lt 100) { "Yellow" } else { "Red" })
        Write-Host "Latência mínima: $minLatency ms" -ForegroundColor Green
        Write-Host "Latência máxima: $maxLatency ms" -ForegroundColor $(if ($maxLatency -lt 100) { "Green" } elseif ($maxLatency -lt 200) { "Yellow" } else { "Red" })
        
        # Avaliação da qualidade da conexão
        if ($avgLatency -lt 30) {
            $qualidade = "Excelente"
            $cor = "Green"
        } elseif ($avgLatency -lt 60) {
            $qualidade = "Boa"
            $cor = "Green"
        } elseif ($avgLatency -lt 100) {
            $qualidade = "Razoável"
            $cor = "Yellow"
        } else {
            $qualidade = "Ruim"
            $cor = "Red"
        }
        
        Write-Host "Qualidade da conexão: $qualidade" -ForegroundColor $cor
    } else {
        Write-Host "Não foi possível conectar à internet. Verifique sua conexão." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host ""
    
    # Teste 2: Verificar resolução DNS
    Write-Host "Teste 2: Verificando velocidade de resolução DNS..." -ForegroundColor Yellow
    $domains = @("google.com", "microsoft.com", "amazon.com", "facebook.com", "youtube.com")
    $dnsResults = @()
    
    foreach ($domain in $domains) {
        $startTime = Get-Date
        try {
            $null = Resolve-DnsName -Name $domain -ErrorAction SilentlyContinue
            $endTime = Get-Date
            $timeSpan = New-TimeSpan -Start $startTime -End $endTime
            $dnsResults += [PSCustomObject]@{
                Domain = $domain
                Time = $timeSpan.TotalMilliseconds
                Status = "OK"
            }
        } catch {
            $dnsResults += [PSCustomObject]@{
                Domain = $domain
                Time = 0
                Status = "Falha"
            }
        }
    }
    
    $dnsResults | Format-Table -AutoSize
    
    $avgDnsTime = ($dnsResults | Where-Object { $_.Status -eq "OK" } | Measure-Object -Property Time -Average).Average
    Write-Host "Tempo médio de resolução DNS: $([math]::Round($avgDnsTime, 2)) ms" -ForegroundColor $(if ($avgDnsTime -lt 50) { "Green" } elseif ($avgDnsTime -lt 100) { "Yellow" } else { "Red" })
    
    Write-Host ""
    
    # Teste 3: Verificar MTU
    Write-Host "Teste 3: Verificando MTU (Maximum Transmission Unit)..." -ForegroundColor Yellow
    
    $activeAdapter = Get-NetAdapter | Where-Object { $_.Status -eq "Up" } | Select-Object -First 1
    if ($activeAdapter) {
        $mtu = Get-NetIPInterface -InterfaceIndex $activeAdapter.ifIndex -AddressFamily IPv4 | Select-Object -ExpandProperty NlMtu
        Write-Host "MTU atual: $mtu bytes" -ForegroundColor White
        
        if ($mtu -eq 1500) {
            Write-Host "MTU está no valor padrão (1500), que é ideal para a maioria das conexões." -ForegroundColor Green
        } elseif ($mtu -lt 1500) {
            Write-Host "MTU está abaixo do valor padrão. Isso pode afetar o desempenho em algumas situações." -ForegroundColor Yellow
        } else {
            Write-Host "MTU está acima do valor padrão. Isso pode causar fragmentação de pacotes em algumas redes." -ForegroundColor Yellow
        }
    } else {
        Write-Host "Não foi possível determinar o MTU. Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
    }
    
    Write-Host ""
    
    # Teste 4: Verificar perda de pacotes
    Write-Host "Teste 4: Verificando perda de pacotes..." -ForegroundColor Yellow
    $packetLossTest = Test-Connection -ComputerName google.com -Count 50 -ErrorAction SilentlyContinue
    
    if ($packetLossTest) {
        $packetsSent = 50
        $packetsReceived = ($packetLossTest | Measure-Object).Count
        $packetsLost = $packetsSent - $packetsReceived
        $packetLossPercentage = ($packetsLost / $packetsSent) * 100
        
        Write-Host "Pacotes enviados: $packetsSent" -ForegroundColor White
        Write-Host "Pacotes recebidos: $packetsReceived" -ForegroundColor White
        Write-Host "Pacotes perdidos: $packetsLost" -ForegroundColor $(if ($packetsLost -eq 0) { "Green" } elseif ($packetsLost -lt 5) { "Yellow" } else { "Red" })
        Write-Host "Percentual de perda: $([math]::Round($packetLossPercentage, 2))%" -ForegroundColor $(if ($packetLossPercentage -eq 0) { "Green" } elseif ($packetLossPercentage -lt 10) { "Yellow" } else { "Red" })
        
        # Avaliação da qualidade da conexão baseada na perda de pacotes
        if ($packetLossPercentage -eq 0) {
            Write-Host "Qualidade da conexão (perda de pacotes): Excelente" -ForegroundColor Green
        } elseif ($packetLossPercentage -lt 2) {
            Write-Host "Qualidade da conexão (perda de pacotes): Boa" -ForegroundColor Green
        } elseif ($packetLossPercentage -lt 5) {
            Write-Host "Qualidade da conexão (perda de pacotes): Razoável" -ForegroundColor Yellow
        } else {
            Write-Host "Qualidade da conexão (perda de pacotes): Ruim" -ForegroundColor Red
        }
    } else {
        Write-Host "Não foi possível realizar o teste de perda de pacotes." -ForegroundColor Red
    }
    
    Write-Host ""
    
    # Resumo e recomendações
    Write-Host "=== Resumo da Análise de Rede ===" -ForegroundColor Cyan
    
    # Recomendações baseadas nos resultados
    Write-Host "Recomendações:" -ForegroundColor Yellow
    
    if ($avgLatency -gt 100) {
        Write-Host "- Sua latência está alta. Considere verificar outros dispositivos na rede ou contatar seu provedor." -ForegroundColor Yellow
    }
    
    if ($avgDnsTime -gt 100) {
        Write-Host "- A resolução DNS está lenta. Considere mudar para servidores DNS mais rápidos como Google (8.8.8.8) ou Cloudflare (1.1.1.1)." -ForegroundColor Yellow
    }
    
    if ($packetLossPercentage -gt 2) {
        Write-Host "- Há perda significativa de pacotes. Verifique sua conexão física ou contate seu provedor." -ForegroundColor Yellow
    }
    
    if ($mtu -ne 1500 -and $mtu -ne 0) {
        Write-Host "- Seu MTU não está no valor padrão. Considere ajustá-lo para 1500 para melhor desempenho." -ForegroundColor Yellow
    }
    
    if ($avgLatency -le 100 -and $avgDnsTime -le 100 -and $packetLossPercentage -le 2) {
        Write-Host "- Sua conexão parece estar em boas condições! Não há problemas significativos detectados." -ForegroundColor Green
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-ConfigureQoS {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Configurar QoS (Qualidade de Serviço) ---" -ForegroundColor Gray
    Write-Host "Configura prioridades de tráfego de rede para melhorar o desempenho de aplicações específicas." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "O QoS (Quality of Service) permite priorizar certos tipos de tráfego de rede sobre outros." -ForegroundColor White
    Write-Host "Isso é útil para garantir que aplicações importantes como jogos, chamadas de vídeo ou streaming" -ForegroundColor White
    Write-Host "tenham prioridade sobre downloads ou atualizações em segundo plano." -ForegroundColor White
    Write-Host ""
    
    Write-Host "Opções de configuração de QoS:" -ForegroundColor Yellow
    Write-Host "[1] Configurar QoS para Jogos (prioriza tráfego de jogos)" -ForegroundColor White
    Write-Host "[2] Configurar QoS para Videoconferência (prioriza Zoom, Teams, etc.)" -ForegroundColor White
    Write-Host "[3] Configurar QoS para Streaming (prioriza Netflix, YouTube, etc.)" -ForegroundColor White
    Write-Host "[4] Configurar QoS Personalizado" -ForegroundColor White
    Write-Host "[5] Desativar QoS" -ForegroundColor White
    Write-Host "[0] Voltar" -ForegroundColor White
    Write-Host ""
    
    $qosChoice = Read-Host "Selecione uma opção"
    
    switch ($qosChoice) {
        "1" {
            Write-Host "Configurando QoS para Jogos..." -ForegroundColor Yellow
            
            # Criar política de QoS para jogos
            Write-Host "Criando política de QoS para jogos..." -ForegroundColor DarkGray
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS para jogos usando netsh
            netsh advfirewall firewall add rule name="QoS-Games" dir=out action=allow protocol=UDP remoteport=3074,3478,3479,3480 enable=yes
            
            # Configurar prioridade para jogos
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política para jogos
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Application Name" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Protocol" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Remote Port" -Value "3074,3478-3480" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "DSCP Value" -Value "46" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS para Jogos configurado com sucesso!" -ForegroundColor Green
            Write-Host "Os jogos online agora terão prioridade sobre outros tipos de tráfego." -ForegroundColor Green
        }
        "2" {
            Write-Host "Configurando QoS para Videoconferência..." -ForegroundColor Yellow
            
            # Criar política de QoS para videoconferência
            Write-Host "Criando política de QoS para videoconferência..." -ForegroundColor DarkGray
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS para videoconferência usando netsh
            netsh advfirewall firewall add rule name="QoS-VideoConference" dir=out action=allow protocol=UDP remoteport=3478-3479,8801-8810 enable=yes
            
            # Configurar prioridade para videoconferência
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política para Zoom
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Application Name" -Value "Zoom.exe" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Protocol" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Remote Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "DSCP Value" -Value "46" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Throttle Rate" -Value "-1" -Type String
            
            # Adicionar política para Teams
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Application Name" -Value "Teams.exe" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Protocol" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Remote Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "DSCP Value" -Value "46" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS para Videoconferência configurado com sucesso!" -ForegroundColor Green
            Write-Host "Aplicativos como Zoom e Teams agora terão prioridade sobre outros tipos de tráfego." -ForegroundColor Green
        }
        "3" {
            Write-Host "Configurando QoS para Streaming..." -ForegroundColor Yellow
            
            # Criar política de QoS para streaming
            Write-Host "Criando política de QoS para streaming..." -ForegroundColor DarkGray
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS para streaming usando netsh
            netsh advfirewall firewall add rule name="QoS-Streaming" dir=out action=allow protocol=TCP remoteport=80,443 enable=yes
            
            # Configurar prioridade para streaming
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política para navegadores (streaming)
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Application Name" -Value "*.exe" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Protocol" -Value "TCP" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Remote Port" -Value "80,443" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "DSCP Value" -Value "34" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Streaming" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS para Streaming configurado com sucesso!" -ForegroundColor Green
            Write-Host "Serviços de streaming como Netflix e YouTube agora terão prioridade sobre outros tipos de tráfego." -ForegroundColor Green
        }
        "4" {
            Write-Host "Configurando QoS Personalizado..." -ForegroundColor Yellow
            
            # Solicitar informações para QoS personalizado
            $appName = Read-Host "Digite o nome do aplicativo (ex: chrome.exe, ou * para todos)"
            $protocol = Read-Host "Digite o protocolo (TCP, UDP, ou * para ambos)"
            $remotePorts = Read-Host "Digite as portas remotas (ex: 80,443, ou * para todas)"
            $priority = Read-Host "Digite o valor de prioridade DSCP (0-63, recomendado: 46 para alta prioridade)"
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS personalizado
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política personalizada
            $policyName = "CustomQoS_" + (Get-Random)
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Application Name" -Value $appName -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Protocol" -Value $protocol -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Remote Port" -Value $remotePorts -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "DSCP Value" -Value $priority -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\$policyName" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS Personalizado configurado com sucesso!" -ForegroundColor Green
            Write-Host "A política de QoS personalizada foi criada com o nome: $policyName" -ForegroundColor Green
        }
        "5" {
            Write-Host "Desativando QoS..." -ForegroundColor Yellow
            
            # Remover políticas de QoS
            if (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS") {
                Remove-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Recurse -Force
                Write-Host "Políticas de QoS removidas." -ForegroundColor Green
            }
            
            # Remover regras de firewall relacionadas a QoS
            netsh advfirewall firewall delete rule name="QoS-Games"
            netsh advfirewall firewall delete rule name="QoS-VideoConference"
            netsh advfirewall firewall delete rule name="QoS-Streaming"
            
            # Parar serviço QoS
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService) {
                Stop-Service -Name "QoS RSVP" -Force -ErrorAction SilentlyContinue
                Set-Service -Name "QoS RSVP" -Startup Disabled -ErrorAction SilentlyContinue
                Write-Host "Serviço QoS RSVP parado e desabilitado." -ForegroundColor Green
            }
            
            Write-Host "QoS desativado com sucesso!" -ForegroundColor Green
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
        }
    }
    
    if ($qosChoice -ne "0") {
        Write-Host "`nNota: Algumas alterações de QoS podem requerer reinicialização para ter efeito completo." -ForegroundColor Yellow
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        }
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-DisableIPv6 {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Desativar IPv6 ---" -ForegroundColor Yellow
    Write-Host "Desativa o protocolo IPv6 em adaptadores de rede para resolver problemas de conectividade." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "O IPv6 é o protocolo de internet mais recente, mas em algumas redes pode causar problemas de conectividade." -ForegroundColor White
    Write-Host "Desativar o IPv6 pode resolver problemas em redes que não o suportam adequadamente." -ForegroundColor White
    Write-Host "Nota: Desativar o IPv6 não é recomendado a menos que você esteja enfrentando problemas específicos." -ForegroundColor Yellow
    Write-Host ""
    
    # Verificar status atual do IPv6
    Write-Host "Verificando status atual do IPv6..." -ForegroundColor Yellow
    
    $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
    
    if ($networkAdapters.Count -eq 0) {
        Write-Host "Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host "Status do IPv6 nos adaptadores de rede ativos:" -ForegroundColor White
    
    foreach ($adapter in $networkAdapters) {
        $ipv6Status = Get-NetAdapterBinding -InterfaceAlias $adapter.Name -ComponentID "ms_tcpip6"
        $status = if ($ipv6Status.Enabled) { "Ativado" } else { "Desativado" }
        $statusColor = if ($ipv6Status.Enabled) { "Green" } else { "Yellow" }
        
        Write-Host "$($adapter.Name): $status" -ForegroundColor $statusColor
    }
    
    Write-Host ""
    Write-Host "Opções:" -ForegroundColor Yellow
    Write-Host "[1] Desativar IPv6 em todos os adaptadores" -ForegroundColor White
    Write-Host "[2] Ativar IPv6 em todos os adaptadores" -ForegroundColor White
    Write-Host "[3] Gerenciar IPv6 em adaptadores específicos" -ForegroundColor White
    Write-Host "[0] Voltar" -ForegroundColor White
    Write-Host ""
    
    $ipv6Choice = Read-Host "Selecione uma opção"
    
    switch ($ipv6Choice) {
        "1" {
            Write-Host "Desativando IPv6 em todos os adaptadores de rede..." -ForegroundColor Yellow
            
            foreach ($adapter in $networkAdapters) {
                Disable-NetAdapterBinding -InterfaceAlias $adapter.Name -ComponentID "ms_tcpip6"
                Write-Host "IPv6 desativado em $($adapter.Name)" -ForegroundColor Green
            }
            
            # Desativar IPv6 globalmente no registro
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters" -Name "DisabledComponents" -Value 0xffffffff -Type DWord
            
            Write-Host "IPv6 desativado em todos os adaptadores de rede!" -ForegroundColor Green
            Write-Host "Nota: Algumas alterações podem requerer reinicialização para ter efeito completo." -ForegroundColor Yellow
        }
        "2" {
            Write-Host "Ativando IPv6 em todos os adaptadores de rede..." -ForegroundColor Yellow
            
            foreach ($adapter in $networkAdapters) {
                Enable-NetAdapterBinding -InterfaceAlias $adapter.Name -ComponentID "ms_tcpip6"
                Write-Host "IPv6 ativado em $($adapter.Name)" -ForegroundColor Green
            }
            
            # Ativar IPv6 globalmente no registro
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters" -Name "DisabledComponents" -Value 0x0 -Type DWord
            
            Write-Host "IPv6 ativado em todos os adaptadores de rede!" -ForegroundColor Green
            Write-Host "Nota: Algumas alterações podem requerer reinicialização para ter efeito completo." -ForegroundColor Yellow
        }
        "3" {
            Write-Host "Gerenciando IPv6 em adaptadores específicos..." -ForegroundColor Yellow
            
            $index = 1
            $adapterList = @()
            
            foreach ($adapter in $networkAdapters) {
                $ipv6Status = Get-NetAdapterBinding -InterfaceAlias $adapter.Name -ComponentID "ms_tcpip6"
                $status = if ($ipv6Status.Enabled) { "Ativado" } else { "Desativado" }
                $statusColor = if ($ipv6Status.Enabled) { "Green" } else { "Yellow" }
                
                Write-Host "[$index] $($adapter.Name): $status" -ForegroundColor $statusColor
                $adapterList += $adapter
                $index++
            }
            
            Write-Host "[0] Voltar" -ForegroundColor White
            Write-Host ""
            
            $adapterChoice = Read-Host "Selecione o número do adaptador que deseja gerenciar (ou 0 para voltar)"
            
            if ($adapterChoice -eq "0" -or $adapterChoice -eq "") {
                Write-Host "Operação cancelada." -ForegroundColor Yellow
                break
            }
            
            $adapterIndex = [int]$adapterChoice - 1
            if ($adapterIndex -lt 0 -or $adapterIndex -ge $adapterList.Count) {
                Write-Host "Seleção inválida." -ForegroundColor Red
                break
            }
            
            $selectedAdapter = $adapterList[$adapterIndex]
            $ipv6Status = Get-NetAdapterBinding -InterfaceAlias $selectedAdapter.Name -ComponentID "ms_tcpip6"
            
            if ($ipv6Status.Enabled) {
                Write-Host "Desativando IPv6 em $($selectedAdapter.Name)..." -ForegroundColor Yellow
                Disable-NetAdapterBinding -InterfaceAlias $selectedAdapter.Name -ComponentID "ms_tcpip6"
                Write-Host "IPv6 desativado em $($selectedAdapter.Name)" -ForegroundColor Green
            } else {
                Write-Host "Ativando IPv6 em $($selectedAdapter.Name)..." -ForegroundColor Yellow
                Enable-NetAdapterBinding -InterfaceAlias $selectedAdapter.Name -ComponentID "ms_tcpip6"
                Write-Host "IPv6 ativado em $($selectedAdapter.Name)" -ForegroundColor Green
            }
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
        }
    }
    
    if ($ipv6Choice -eq "1" -or $ipv6Choice -eq "2") {
        Write-Host "`nNota: Algumas alterações de IPv6 podem requerer reinicialização para ter efeito completo." -ForegroundColor Yellow
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        }
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-OptimizeGamingLatency {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Otimizar Latência de Rede para Jogos ---" -ForegroundColor Cyan
    Write-Host "Configura parâmetros de rede para reduzir a latência em jogos online." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função otimiza vários parâmetros de rede para reduzir a latência em jogos online." -ForegroundColor White
    Write-Host "As otimizações são seguras e podem ser revertidas se necessário." -ForegroundColor White
    Write-Host ""
    
    # Verificar latência atual
    Write-Host "Verificando latência atual para servidores de jogos populares..." -ForegroundColor Yellow
    
    $gameServers = @(
        @{Name="Google (Stadia)"; Address="stadia.google.com"},
        @{Name="EA Games"; Address="ea.com"},
        @{Name="Steam"; Address="steamcommunity.com"},
        @{Name="Epic Games"; Address="epicgames.com"},
        @{Name="Xbox Live"; Address="xbox.com"}
    )
    
    $latencyResults = @()
    
    foreach ($server in $gameServers) {
        try {
            $pingResult = Test-Connection -ComputerName $server.Address -Count 4 -ErrorAction SilentlyContinue
            if ($pingResult) {
                $avgLatency = ($pingResult | Measure-Object -Property ResponseTime -Average).Average
                $latencyResults += [PSCustomObject]@{
                    Server = $server.Name
                    Latency = [math]::Round($avgLatency, 2)
                    Status = "OK"
                }
            } else {
                $latencyResults += [PSCustomObject]@{
                    Server = $server.Name
                    Latency = 0
                    Status = "Falha"
                }
            }
        } catch {
            $latencyResults += [PSCustomObject]@{
                Server = $server.Name
                Latency = 0
                Status = "Falha"
            }
        }
    }
    
    Write-Host "Latência atual para servidores de jogos:" -ForegroundColor White
    $latencyResults | Format-Table -AutoSize
    
    $avgLatency = ($latencyResults | Where-Object { $_.Status -eq "OK" } | Measure-Object -Property Latency -Average).Average
    if ($avgLatency -gt 0) {
        Write-Host "Latência média atual: $([math]::Round($avgLatency, 2)) ms" -ForegroundColor $(if ($avgLatency -lt 50) { "Green" } elseif ($avgLatency -lt 100) { "Yellow" } else { "Red" })
    } else {
        Write-Host "Não foi possível determinar a latência média atual." -ForegroundColor Red
    }
    
    Write-Host ""
    $confirm = Read-Host "Deseja aplicar otimizações de latência para jogos? (s/n)"
    
    if ($confirm -eq 's') {
        Write-Host "Aplicando otimizações de latência para jogos..." -ForegroundColor Yellow
        
        # Otimização 1: Configurar QoS para jogos
        Write-Host "Configurando QoS para jogos..." -ForegroundColor DarkGray
        
        # Verificar se o serviço QoS está em execução
        $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
        if ($qosService -and $qosService.Status -ne "Running") {
            Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
            Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
        }
        
        # Configurar QoS para jogos usando netsh
        netsh advfirewall firewall add rule name="QoS-Games" dir=out action=allow protocol=UDP remoteport=3074,3478,3479,3480 enable=yes
        
        # Configurar prioridade para jogos
        if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
        }
        
        # Adicionar política para jogos
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Force | Out-Null
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Application Name" -Value "*" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Version" -Value "1.0" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Protocol" -Value "*" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Local Port" -Value "*" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Local IP" -Value "*" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Remote Port" -Value "3074,3478-3480" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Remote IP" -Value "*" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "DSCP Value" -Value "46" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Throttle Rate" -Value "-1" -Type String
        
        # Otimização 2: Configurar TCP/IP para jogos
        Write-Host "Configurando TCP/IP para jogos..." -ForegroundColor DarkGray
        
        # Habilitar TCP Window Auto-Tuning
        netsh int tcp set global autotuninglevel=normal
        
        # Habilitar Receive-Side Scaling (RSS)
        netsh int tcp set global rss=enabled
        
        # Configurar Congestion Provider para CTCP
        netsh int tcp set global congestionprovider=ctcp
        
        # Habilitar ECN Capability
        netsh int tcp set global ecncapability=enabled
        
        # Otimização 3: Configurar Nagle Algorithm (reduz latência para pacotes pequenos)
        Write-Host "Configurando Nagle Algorithm..." -ForegroundColor DarkGray
        
        # Desabilitar Nagle Algorithm para jogos
        if (-not (Test-Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces")) {
            New-Item -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces" -Force | Out-Null
        }
        
        $networkInterfaces = Get-ChildItem "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces"
        foreach ($interface in $networkInterfaces) {
            Set-ItemProperty -Path $interface.PSPath -Name "TcpAckFrequency" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path $interface.PSPath -Name "TCPNoDelay" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
        }
        
        # Otimização 4: Configurar prioridade de CPU para jogos
        Write-Host "Configurando prioridade de CPU para jogos..." -ForegroundColor DarkGray
        
        # Configurar prioridade para jogos
        if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games")) {
            New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Force | Out-Null
        }
        
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "GPU Priority" -Value 8 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Priority" -Value 6 -Type DWord -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" -Name "Scheduling Category" -Type String -Value "High" -Force -ErrorAction SilentlyContinue
        
        # Otimização 5: Configurar Network Throttling Index
        Write-Host "Configurando Network Throttling Index..." -ForegroundColor DarkGray
        
        if (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile")) {
            New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -Force | Out-Null
        }
        
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -Name "NetworkThrottlingIndex" -Value 0xffffffff -Type DWord -Force -ErrorAction SilentlyContinue
        
        Write-Host "Otimizações de latência para jogos aplicadas com sucesso!" -ForegroundColor Green
        
        # Verificar latência após otimizações
        Write-Host "`nVerificando latência após otimizações..." -ForegroundColor Yellow
        
        $latencyResultsAfter = @()
        
        foreach ($server in $gameServers) {
            try {
                $pingResult = Test-Connection -ComputerName $server.Address -Count 4 -ErrorAction SilentlyContinue
                if ($pingResult) {
                    $avgLatency = ($pingResult | Measure-Object -Property ResponseTime -Average).Average
                    $latencyResultsAfter += [PSCustomObject]@{
                        Server = $server.Name
                        Latency = [math]::Round($avgLatency, 2)
                        Status = "OK"
                    }
                } else {
                    $latencyResultsAfter += [PSCustomObject]@{
                        Server = $server.Name
                        Latency = 0
                        Status = "Falha"
                    }
                }
            } catch {
                $latencyResultsAfter += [PSCustomObject]@{
                    Server = $server.Name
                    Latency = 0
                    Status = "Falha"
                }
            }
        }
        
        Write-Host "Latência após otimizações:" -ForegroundColor White
        $latencyResultsAfter | Format-Table -AutoSize
        
        $avgLatencyAfter = ($latencyResultsAfter | Where-Object { $_.Status -eq "OK" } | Measure-Object -Property Latency -Average).Average
        if ($avgLatencyAfter -gt 0) {
            Write-Host "Latência média após otimizações: $([math]::Round($avgLatencyAfter, 2)) ms" -ForegroundColor $(if ($avgLatencyAfter -lt 50) { "Green" } elseif ($avgLatencyAfter -lt 100) { "Yellow" } else { "Red" })
        } else {
            Write-Host "Não foi possível determinar a latência média após otimizações." -ForegroundColor Red
        }
        
        Write-Host "`nBenefícios das otimizações de latência para jogos:" -ForegroundColor Cyan
        Write-Host "- Redução da latência em jogos online" -ForegroundColor DarkGray
        Write-Host "- Melhor resposta em jogos competitivos" -ForegroundColor DarkGray
        Write-Host "- Redução de lag e stuttering" -ForegroundColor DarkGray
        Write-Host "- Melhor experiência geral em jogos online" -ForegroundColor DarkGray
        
        Write-Host "`nNota: Algumas alterações podem requerer reinicialização para ter efeito completo." -ForegroundColor Yellow
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        }
    } else {
        Write-Host "Otimizações de latência para jogos canceladas." -ForegroundColor Yellow
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - DESEMPENHO (Expandidas) ---
function Invoke-OptimizeVisualEffects {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Desempenho: Ajustar Efeitos Visuais para Melhor Desempenho ---" -ForegroundColor Green
    Write-Host "Configura os efeitos visuais do Windows para priorizar o desempenho sobre a aparência." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função ajusta os efeitos visuais do Windows para priorizar o desempenho." -ForegroundColor White
    Write-Host "Desativar efeitos visuais pode melhorar significativamente o desempenho em sistemas mais antigos." -ForegroundColor White
    Write-Host ""
    
    # Verificar configurações atuais
    Write-Host "Verificando configurações atuais de efeitos visuais..." -ForegroundColor Yellow
    
    $visualFXPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects"
    $visualFXSetting = Get-ItemProperty -Path $visualFXPath -Name "VisualFXSetting" -ErrorAction SilentlyContinue
    
    if ($visualFXSetting) {
        switch ($visualFXSetting.VisualFXSetting) {
            0 { $currentSetting = "Deixar o Windows escolher (Automático)" }
            1 { $currentSetting = "Ajustar para melhor aparência" }
            2 { $currentSetting = "Ajustar para melhor desempenho" }
            3 { $currentSetting = "Personalizado" }
            default { $currentSetting = "Desconhecido" }
        }
        
        Write-Host "Configuração atual: $currentSetting" -ForegroundColor White
    } else {
        Write-Host "Não foi possível determinar a configuração atual." -ForegroundColor DarkGray
    }
    
    Write-Host ""
    Write-Host "Opções de configuração:" -ForegroundColor Yellow
    Write-Host "[1] Ajustar para melhor desempenho (desativa todos os efeitos visuais)" -ForegroundColor White
    Write-Host "[2] Ajustar para melhor aparência (ativa todos os efeitos visuais)" -ForegroundColor White
    Write-Host "[3] Deixar o Windows escolher (configuração automática)" -ForegroundColor White
    Write-Host "[4] Configuração personalizada (escolher efeitos específicos)" -ForegroundColor White
    Write-Host "[0] Voltar" -ForegroundColor White
    Write-Host ""
    
    $visualChoice = Read-Host "Selecione uma opção"
    
    switch ($visualChoice) {
        "1" {
            Write-Host "Ajustando para melhor desempenho..." -ForegroundColor Yellow
            
            # Configurar para melhor desempenho (desativar todos os efeitos visuais)
            Set-ItemProperty -Path $visualFXPath -Name "VisualFXSetting" -Value 2 -Type DWord -Force
            
            # Desativar efeitos visuais específicos
            $desktopPath = "HKCU:\Control Panel\Desktop"
            $advancedPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
            $windowMetricsPath = "HKCU:\Control Panel\Desktop\WindowMetrics"
            
            # Desativar animações de janela
            Set-ItemProperty -Path $desktopPath -Name "UserPreferencesMask" -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force
            
            # Desativar animações de minimizar/maximizar
            Set-ItemProperty -Path $windowMetricsPath -Name "MinAnimate" -Value 0 -Type String -Force
            
            # Desativar efeitos de transparência
            Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "EnableTransparency" -Value 0 -Type DWord -Force
            
            # Desativar animações da barra de tarefas
            Set-ItemProperty -Path $advancedPath -Name "TaskbarAnimations" -Value 0 -Type DWord -Force
            
            # Desativar seleção transparente
            Set-ItemProperty -Path $advancedPath -Name "ListviewAlphaSelect" -Value 0 -Type DWord -Force
            
            # Desativar sombras sob o ponteiro do mouse
            Set-ItemProperty -Path $advancedPath -Name "EnablePointerShadow" -Value 0 -Type DWord -Force
            
            # Desativar sombras sob janelas
            Set-ItemProperty -Path $advancedPath -Name "ListviewShadow" -Value 0 -Type DWord -Force
            
            Write-Host "Configuração ajustada para melhor desempenho!" -ForegroundColor Green
            Write-Host "Todos os efeitos visuais foram desativados para maximizar o desempenho." -ForegroundColor Green
        }
        "2" {
            Write-Host "Ajustando para melhor aparência..." -ForegroundColor Yellow
            
            # Configurar para melhor aparência (ativar todos os efeitos visuais)
            Set-ItemProperty -Path $visualFXPath -Name "VisualFXSetting" -Value 1 -Type DWord -Force
            
            # Ativar efeitos visuais específicos
            $desktopPath = "HKCU:\Control Panel\Desktop"
            $advancedPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
            $windowMetricsPath = "HKCU:\Control Panel\Desktop\WindowMetrics"
            
            # Ativar animações de janela
            Set-ItemProperty -Path $desktopPath -Name "UserPreferencesMask" -Value ([byte[]](0x9E, 0x3E, 0x07, 0x80)) -Type Binary -Force
            
            # Ativar animações de minimizar/maximizar
            Set-ItemProperty -Path $windowMetricsPath -Name "MinAnimate" -Value 1 -Type String -Force
            
            # Ativar efeitos de transparência
            Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "EnableTransparency" -Value 1 -Type DWord -Force
            
            # Ativar animações da barra de tarefas
            Set-ItemProperty -Path $advancedPath -Name "TaskbarAnimations" -Value 1 -Type DWord -Force
            
            # Ativar seleção transparente
            Set-ItemProperty -Path $advancedPath -Name "ListviewAlphaSelect" -Value 1 -Type DWord -Force
            
            # Ativar sombras sob o ponteiro do mouse
            Set-ItemProperty -Path $advancedPath -Name "EnablePointerShadow" -Value 1 -Type DWord -Force
            
            # Ativar sombras sob janelas
            Set-ItemProperty -Path $advancedPath -Name "ListviewShadow" -Value 1 -Type DWord -Force
            
            Write-Host "Configuração ajustada para melhor aparência!" -ForegroundColor Green
            Write-Host "Todos os efeitos visuais foram ativados para maximizar a aparência." -ForegroundColor Green
        }
        "3" {
            Write-Host "Configurando para deixar o Windows escolher..." -ForegroundColor Yellow
            
            # Configurar para deixar o Windows escolher (configuração automática)
            Set-ItemProperty -Path $visualFXPath -Name "VisualFXSetting" -Value 0 -Type DWord -Force
            
            Write-Host "Configuração ajustada para deixar o Windows escolher!" -ForegroundColor Green
            Write-Host "O Windows irá determinar automaticamente quais efeitos visuais usar com base no desempenho do sistema." -ForegroundColor Green
        }
        "4" {
            Write-Host "Configuração personalizada de efeitos visuais..." -ForegroundColor Yellow
            
            # Configurar para personalizado
            Set-ItemProperty -Path $visualFXPath -Name "VisualFXSetting" -Value 3 -Type DWord -Force
            
            $desktopPath = "HKCU:\Control Panel\Desktop"
            $advancedPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
            $windowMetricsPath = "HKCU:\Control Panel\Desktop\WindowMetrics"
            
            # Listar efeitos visuais disponíveis
            Write-Host ""
            Write-Host "Efeitos visuais disponíveis:" -ForegroundColor Yellow
            Write-Host "[1] Animações de janela" -ForegroundColor White
            Write-Host "[2] Animações de minimizar/maximizar" -ForegroundColor White
            Write-Host "[3] Efeitos de transparência" -ForegroundColor White
            Write-Host "[4] Animações da barra de tarefas" -ForegroundColor White
            Write-Host "[5] Seleção transparente" -ForegroundColor White
            Write-Host "[6] Sombras sob o ponteiro do mouse" -ForegroundColor White
            Write-Host "[7] Sombras sob janelas" -ForegroundColor White
            Write-Host ""
            
            # Solicitar quais efeitos ativar/desativar
            $animations = Read-Host "Ativar animações de janela? (s/n)"
            $minAnimate = Read-Host "Ativar animações de minimizar/maximizar? (s/n)"
            $transparency = Read-Host "Ativar efeitos de transparência? (s/n)"
            $taskbarAnimations = Read-Host "Ativar animações da barra de tarefas? (s/n)"
            $alphaSelect = Read-Host "Ativar seleção transparente? (s/n)"
            $pointerShadow = Read-Host "Ativar sombras sob o ponteiro do mouse? (s/n)"
            $listviewShadow = Read-Host "Ativar sombras sob janelas? (s/n)"
            
            # Aplicar configurações personalizadas
            if ($animations -eq "s") {
                Set-ItemProperty -Path $desktopPath -Name "UserPreferencesMask" -Value ([byte[]](0x9E, 0x3E, 0x07, 0x80)) -Type Binary -Force
            } else {
                Set-ItemProperty -Path $desktopPath -Name "UserPreferencesMask" -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Type Binary -Force
            }
            
            if ($minAnimate -eq "s") {
                Set-ItemProperty -Path $windowMetricsPath -Name "MinAnimate" -Value 1 -Type String -Force
            } else {
                Set-ItemProperty -Path $windowMetricsPath -Name "MinAnimate" -Value 0 -Type String -Force
            }
            
            if ($transparency -eq "s") {
                Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "EnableTransparency" -Value 1 -Type DWord -Force
            } else {
                Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "EnableTransparency" -Value 0 -Type DWord -Force
            }
            
            if ($taskbarAnimations -eq "s") {
                Set-ItemProperty -Path $advancedPath -Name "TaskbarAnimations" -Value 1 -Type DWord -Force
            } else {
                Set-ItemProperty -Path $advancedPath -Name "TaskbarAnimations" -Value 0 -Type DWord -Force
            }
            
            if ($alphaSelect -eq "s") {
                Set-ItemProperty -Path $advancedPath -Name "ListviewAlphaSelect" -Value 1 -Type DWord -Force
            } else {
                Set-ItemProperty -Path $advancedPath -Name "ListviewAlphaSelect" -Value 0 -Type DWord -Force
            }
            
            if ($pointerShadow -eq "s") {
                Set-ItemProperty -Path $advancedPath -Name "EnablePointerShadow" -Value 1 -Type DWord -Force
            } else {
                Set-ItemProperty -Path $advancedPath -Name "EnablePointerShadow" -Value 0 -Type DWord -Force
            }
            
            if ($listviewShadow -eq "s") {
                Set-ItemProperty -Path $advancedPath -Name "ListviewShadow" -Value 1 -Type DWord -Force
            } else {
                Set-ItemProperty -Path $advancedPath -Name "ListviewShadow" -Value 0 -Type DWord -Force
            }
            
            Write-Host "Configuração personalizada aplicada!" -ForegroundColor Green
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
        }
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
}

function Invoke-OptimizeDisk {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Desempenho: Otimizar Disco do Sistema ---" -ForegroundColor Cyan
    Write-Host "Otimiza o disco do sistema para melhorar o desempenho geral." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função realiza otimizações no disco do sistema para melhorar o desempenho." -ForegroundColor White
    Write-Host "Isso inclui desfragmentação (em HDDs), TRIM (em SSDs) e limpeza de arquivos desnecessários." -ForegroundColor White
    Write-Host ""
    
    # Verificar tipo de disco
    Write-Host "Verificando tipo de disco..." -ForegroundColor Yellow
    
    $diskType = Get-PhysicalDisk | Select-Object MediaType
    
    if ($diskType.MediaType -eq "SSD") {
        Write-Host "Tipo de disco: SSD (Solid State Drive)" -ForegroundColor Green
        $optimizeType = "ReTrim"
    } else {
        Write-Host "Tipo de disco: HDD (Hard Disk Drive)" -ForegroundColor White
        $optimizeType = "Defrag"
    }
    
    # Verificar status da otimização
    Write-Host "Verificando status da otimização..." -ForegroundColor Yellow
    
    $volumeInfo = Get-Volume -DriveLetter C
    $fileSystem = $volumeInfo.FileSystemTypeName
    
    if ($fileSystem -eq "NTFS") {
        Write-Host "Sistema de arquivos: NTFS" -ForegroundColor Green
    } else {
        Write-Host "Sistema de arquivos: $fileSystem (não suportado)" -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
        return
    }
    
    # Verificar se a otimização está habilitada
    $scheduledTask = Get-ScheduledTask -TaskName "Optimize Drives" -ErrorAction SilentlyContinue
    
    if ($scheduledTask) {
        Write-Host "Otimização agendada: Habilitada" -ForegroundColor Green
    } else {
        Write-Host "Otimização agendada: Desabilitada" -ForegroundColor Yellow
    }
    
    Write-Host ""
    Write-Host "Opções de otimização:" -ForegroundColor Yellow
    Write-Host "[1] Otimizar disco (ReTrim para SSD, Desfragmentar para HDD)" -ForegroundColor White
    Write-Host "[2] Verificar e corrigir erros no disco (CHKDSK)" -ForegroundColor White
    Write-Host "[3] Limpar arquivos desnecessários (Limpeza de Disco)" -ForegroundColor White
    Write-Host "[0] Voltar" -ForegroundColor White
    Write-Host ""
    
    $optimizeChoice = Read-Host "Selecione uma opção"
    
    switch ($optimizeChoice) {
        "1" {
            Write-Host "Otimizando disco (C:)..." -ForegroundColor Yellow
            
            # Otimizar disco
            Optimize-Volume -DriveLetter C -Verbose -ErrorAction SilentlyContinue -$optimizeType
            
            Write-Host "Otimização do disco (C:) concluída!" -ForegroundColor Green
        }
        "2" {
            Write-Host "Verificando e corrigindo erros no disco (C:)..." -ForegroundColor Yellow
            
            # Agendar CHKDSK para o próximo boot
            Write-Host "Agendando CHKDSK para o próximo boot..." -ForegroundColor DarkGray
            chkdsk C: /f
            
            Write-Host "CHKDSK agendado para o próximo boot. Reinicie o computador para executar a verificação." -ForegroundColor Green
        }
        "3" {
            Write-Host "Limpando arquivos desnecessários (Limpeza de Disco)..." -ForegroundColor Yellow
            
            # Executar Limpeza de Disco
            Write-Host "Executando Limpeza de Disco..." -ForegroundColor DarkGray
            Start-Process -FilePath cleanmgr.exe -ArgumentList "/d C:" -Wait -ErrorAction SilentlyContinue
            
            Write-Host "Limpeza de Disco concluída!" -ForegroundColor Green
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
        }
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
}

function Invoke-CleanPrefetch {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Desempenho: Limpar Arquivos Prefetch ---" -ForegroundColor Yellow
    Write-Host "Remove arquivos prefetch para melhorar o tempo de inicialização de aplicativos." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função remove os arquivos prefetch, que são usados pelo Windows para acelerar a inicialização de aplicativos." -ForegroundColor White
    Write-Host "Limpar esses arquivos pode ajudar a resolver problemas de desempenho e melhorar o tempo de inicialização." -ForegroundColor White
    Write-Host "Nota: Limpar os arquivos prefetch pode fazer com que os aplicativos demorem mais para iniciar na primeira vez após a limpeza." -ForegroundColor Yellow
    Write-Host ""
    
    # Verificar status do Prefetcher
    Write-Host "Verificando status do Prefetcher..." -ForegroundColor Yellow
    
    $prefetcherStatus = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters" -Name "EnablePrefetcher" -ErrorAction SilentlyContinue
    
    if ($prefetcherStatus) {
        switch ($prefetcherStatus.EnablePrefetcher) {
            0 { $currentStatus = "Desativado" }
            1 { $currentStatus = "Aplicativos" }
            2 { $currentStatus = "Inicialização" }
            3 { $currentStatus = "Tudo" }
            default { $currentStatus = "Desconhecido" }
        }
        
        Write-Host "Status atual do Prefetcher: $currentStatus" -ForegroundColor White
    } else {
        Write-Host "Não foi possível determinar o status do Prefetcher." -ForegroundColor Red
    }
    
    Write-Host ""
    Write-Host "Opções de limpeza:" -ForegroundColor Yellow
    Write-Host "[1] Limpar arquivos prefetch" -ForegroundColor White
    Write-Host "[2] Desativar Prefetcher" -ForegroundColor White
    Write-Host "[3] Ativar Prefetcher (para aplicativos e inicialização)" -ForegroundColor White
    Write-Host "[0] Voltar" -ForegroundColor White
    Write-Host ""
    
    $prefetchChoice = Read-Host "Selecione uma opção"
    
    switch ($prefetchChoice) {
        "1" {
            Write-Host "Limpando arquivos prefetch..." -ForegroundColor Yellow
            
            # Parar o serviço Superfetch/SysMain
            Stop-Service -Name "SysMain" -Force -ErrorAction SilentlyContinue
            
            # Remover arquivos prefetch
            Remove-Item "$env:SystemRoot\Prefetch\*.pf" -Force -ErrorAction SilentlyContinue
            
            # Iniciar o serviço Superfetch/SysMain
            Start-Service -Name "SysMain" -ErrorAction SilentlyContinue
            
            Write-Host "Arquivos prefetch limpos com sucesso!" -ForegroundColor Green
            Write-Host "Os aplicativos podem demorar mais para iniciar na primeira vez após a limpeza." -ForegroundColor Yellow
        }
        "2" {
            Write-Host "Desativando Prefetcher..." -ForegroundColor Yellow
            
            # Desativar Prefetcher
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters" -Name "EnablePrefetcher" -Value 0 -Type DWord -Force
            
            Write-Host "Prefetcher desativado com sucesso!" -ForegroundColor Green
            Write-Host "Reinicie o computador para aplicar as alterações." -ForegroundColor Yellow
        }
        "3" {
            Write-Host "Ativando Prefetcher (para aplicativos e inicialização)..." -ForegroundColor Yellow
            
            # Ativar Prefetcher
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters" -Name "EnablePrefetcher" -Value 3 -Type DWord -Force
            
            Write-Host "Prefetcher ativado com sucesso!" -ForegroundColor Green
            Write-Host "Reinicie o computador para aplicar as alterações." -ForegroundColor Yellow
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
        }
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
}

function Invoke-SetHighPerformancePower {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Desempenho: Definir Plano de Energia para Alto Desempenho ---" -ForegroundColor White
    Write-Host "Configura o plano de energia para 'Alto desempenho' para maximizar o desempenho do sistema." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função configura o plano de energia para 'Alto desempenho', o que pode melhorar o desempenho do sistema." -ForegroundColor White
    Write-Host "Nota: O plano de energia 'Alto desempenho' pode aumentar o consumo de energia e reduzir a vida útil da bateria em laptops." -ForegroundColor Yellow
    Write-Host ""
    
    # Verificar plano de energia atual
    Write-Host "Verificando plano de energia atual..." -ForegroundColor Yellow
    
    $currentPlan = powercfg /getactivescheme
    
    if ($currentPlan -match "8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c") {
        Write-Host "Plano de energia atual: Alto desempenho" -ForegroundColor Green
    } elseif ($currentPlan -match "381b4222-f694-41f0-9685-ff5bb260df2e") {
        Write-Host "Plano de energia atual: Equilibrado" -ForegroundColor White
    } elseif ($currentPlan -match "a1841308-3541-4fab-bc81-f71556f20b4a") {
        Write-Host "Plano de energia atual: Economia de energia" -ForegroundColor White
    } else {
        Write-Host "Plano de energia atual: Desconhecido" -ForegroundColor Red
    }
    
    Write-Host ""
    Write-Host "Deseja configurar o plano de energia para 'Alto desempenho'?" -ForegroundColor Yellow
    $confirm = Read-Host "(s/n)"
    
    if ($confirm -eq 's') {
        Write-Host "Configurando plano de energia para 'Alto desempenho'..." -ForegroundColor Yellow
        
        # Definir plano de energia para Alto Desempenho
        powercfg /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
        
        Write-Host "Plano de energia configurado para 'Alto desempenho' com sucesso!" -ForegroundColor Green
        Write-Host "O sistema agora priorizará o desempenho em vez da economia de energia." -ForegroundColor Green
    } else {
        Write-Host "Operação cancelada." -ForegroundColor Yellow
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
}

function Invoke-OptimizeSuperFetch {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Desempenho: Otimizar Serviço SuperFetch/SysMain ---" -ForegroundColor Magenta
    Write-Host "Otimiza o serviço SuperFetch/SysMain para melhorar o tempo de carregamento de aplicativos." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função otimiza o serviço SuperFetch/SysMain, que pré-carrega aplicativos usados com frequência na memória." -ForegroundColor White
    Write-Host "Desativar ou configurar corretamente este serviço pode melhorar o desempenho, especialmente em SSDs." -ForegroundColor White
    Write-Host ""
    
    # Verificar status do serviço SuperFetch/SysMain
    Write-Host "Verificando status do serviço SuperFetch/SysMain..." -ForegroundColor Yellow
    
    $superFetchService = Get-Service -Name "SysMain" -ErrorAction SilentlyContinue
    
    if ($superFetchService) {
        Write-Host "Nome do serviço: $($superFetchService.DisplayName)" -ForegroundColor White
        Write-Host "Status atual: $($superFetchService.Status)" -ForegroundColor $(if ($superFetchService.Status -eq "Running") { "Green" } else { "Yellow" })
        Write-Host "Tipo de inicialização: $($superFetchService.StartType)" -ForegroundColor White
    } else {
        Write-Host "Serviço SuperFetch/SysMain não encontrado." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
        return
    }
    
    Write-Host ""
    Write-Host "Opções de otimização:" -ForegroundColor Yellow
    Write-Host "[1] Desativar SuperFetch/SysMain (recomendado para SSDs)" -ForegroundColor White
    Write-Host "[2] Ativar SuperFetch/SysMain (configuração padrão)" -ForegroundColor White
    Write-Host "[0] Voltar" -ForegroundColor White
    Write-Host ""
    
    $superFetchChoice = Read-Host "Selecione uma opção"
    
    switch ($superFetchChoice) {
        "1" {
            Write-Host "Desativando SuperFetch/SysMain..." -ForegroundColor Yellow
            
            # Desativar o serviço
            Set-Service -Name "SysMain" -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name "SysMain" -Force -ErrorAction SilentlyContinue
            
            Write-Host "Serviço SuperFetch/SysMain desativado com sucesso!" -ForegroundColor Green
            Write-Host "Recomendado para sistemas com SSDs." -ForegroundColor Green
        }
        "2" {
            Write-Host "Ativando SuperFetch/SysMain..." -ForegroundColor Yellow
            
            # Configurar o serviço para automático
            Set-Service -Name "SysMain" -StartupType Automatic -ErrorAction SilentlyContinue
            Start-Service -Name "SysMain" -ErrorAction SilentlyContinue
            
            Write-Host "Serviço SuperFetch/SysMain ativado com sucesso!" -ForegroundColor Green
            Write-Host "Configuração padrão para sistemas com HDDs." -ForegroundColor Green
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
        }
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
}

function Invoke-AdjustVirtualMemory {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Desempenho: Ajustar Tamanho da Memória Virtual ---" -ForegroundColor Gray
    Write-Host "Configura o tamanho da memória virtual para melhorar o desempenho do sistema." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função ajusta o tamanho da memória virtual (arquivo de paginação) para melhorar o desempenho." -ForegroundColor White
    Write-Host "A memória virtual é usada quando a memória RAM está cheia, e ajustar seu tamanho pode evitar problemas de desempenho." -ForegroundColor White
    Write-Host ""
    
    # Verificar configurações atuais de memória virtual
    Write-Host "Verificando configurações atuais de memória virtual..." -ForegroundColor Yellow
    
    $wmi = Get-WmiObject -Class Win32_ComputerSystem
    $automaticManagedPagefile = $wmi.AutomaticManagedPagefile
    
    if ($automaticManagedPagefile) {
        Write-Host "Gerenciamento automático do arquivo de paginação: Ativado" -ForegroundColor Green
    } else {
        Write-Host "Gerenciamento automático do arquivo de paginação: Desativado" -ForegroundColor Yellow
    }
    
    # Obter informações sobre o arquivo de paginação
    $pageFile = Get-WmiObject -Class Win32_PageFileUsage
    
    if ($pageFile) {
        Write-Host "Local do arquivo de paginação: $($pageFile.Name)" -ForegroundColor White
        Write-Host "Tamanho alocado: $([math]::Round($pageFile.AllocatedBaseSize / 1024, 2)) GB" -ForegroundColor White
    } else {
        Write-Host "Não foi possível obter informações sobre o arquivo de paginação." -ForegroundColor Red
    }
    
    Write-Host ""
    Write-Host "Opções de configuração:" -ForegroundColor Yellow
    Write-Host "[1] Ativar gerenciamento automático do arquivo de paginação" -ForegroundColor White
    Write-Host "[2] Desativar gerenciamento automático e definir tamanho personalizado" -ForegroundColor White
    Write-Host "[0] Voltar" -ForegroundColor White
    Write-Host ""
    
    $pageChoice = Read-Host "Selecione uma opção"
    
    switch ($pageChoice) {
        "1" {
            Write-Host "Ativando gerenciamento automático do arquivo de paginação..." -ForegroundColor Yellow
            
            # Ativar gerenciamento automático
            $wmi.AutomaticManagedPagefile = $true
            $wmi.Put()
            
            Write-Host "Gerenciamento automático do arquivo de paginação ativado com sucesso!" -ForegroundColor Green
            Write-Host "O Windows agora gerenciará automaticamente o tamanho do arquivo de paginação." -ForegroundColor Green
        }
        "2" {
            Write-Host "Desativando gerenciamento automático e definindo tamanho personalizado..." -ForegroundColor Yellow
            
            # Desativar gerenciamento automático
            $wmi.AutomaticManagedPagefile = $false
            $wmi.Put()
            
            # Solicitar tamanho inicial e máximo
            $initialSize = Read-Host "Digite o tamanho inicial do arquivo de paginação (em MB)"
            $maximumSize = Read-Host "Digite o tamanho máximo do arquivo de paginação (em MB)"
            
            # Configurar tamanho personalizado
            try {
                $pageFileSetting = Get-WmiObject -Class Win32_PageFileSetting | Where-Object {$_.Name -like "*pagefile.sys"}
                
                if ($pageFileSetting) {
                    $pageFileSetting.InitialSize = $initialSize
                    $pageFileSetting.MaximumSize = $maximumSize
                    $pageFileSetting.Put()
                    
                    Write-Host "Tamanho do arquivo de paginação definido para:" -ForegroundColor Green
                    Write-Host "Tamanho inicial: $initialSize MB" -ForegroundColor White
                    Write-Host "Tamanho máximo: $maximumSize MB" -ForegroundColor White
                } else {
                    Write-Host "Não foi possível encontrar o arquivo de paginação." -ForegroundColor Red
                }
            } catch {
                Write-Host "Ocorreu um erro ao configurar o tamanho do arquivo de paginação." -ForegroundColor Red
            }
            
            Write-Host "Configuração personalizada aplicada!" -ForegroundColor Green
            Write-Host "Reinicie o computador para aplicar as alterações." -ForegroundColor Yellow
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
        }
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
}

function Invoke-DisableIndexing {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Desempenho: Desativar Indexação de Arquivos ---" -ForegroundColor Green
    Write-Host "Desativa a indexação de arquivos para melhorar o desempenho do sistema." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função desativa a indexação de arquivos, que pode melhorar o desempenho, especialmente em HDDs." -ForegroundColor White
    Write-Host "Desativar a indexação pode fazer com que as pesquisas de arquivos demorem mais." -ForegroundColor Yellow
    Write-Host ""
    
    # Verificar status do serviço de indexação
    Write-Host "Verificando status do serviço de indexação..." -ForegroundColor Yellow
    
    $indexingService = Get-Service -Name "WSearch" -ErrorAction SilentlyContinue
    
    if ($indexingService) {
        Write-Host "Nome do serviço: $($indexingService.DisplayName)" -ForegroundColor White
        Write-Host "Status atual: $($indexingService.Status)" -ForegroundColor $(if ($indexingService.Status -eq "Running") { "Green" } else { "Yellow" })
        Write-Host "Tipo de inicialização: $($indexingService.StartType)" -ForegroundColor White
    } else {
        Write-Host "Serviço de indexação não encontrado." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
        return
    }
    
    Write-Host ""
    Write-Host "Opções de configuração:" -ForegroundColor Yellow
    Write-Host "[1] Desativar indexação de arquivos" -ForegroundColor White
    Write-Host "[2] Ativar indexação de arquivos (configuração padrão)" -ForegroundColor White
    Write-Host "[0] Voltar" -ForegroundColor White
    Write-Host ""
    
    $indexChoice = Read-Host "Selecione uma opção"
    
    switch ($indexChoice) {
        "1" {
            Write-Host "Desativando indexação de arquivos..." -ForegroundColor Yellow
            
            # Desativar o serviço
            Set-Service -Name "WSearch" -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name "WSearch" -Force -ErrorAction SilentlyContinue
            
            Write-Host "Indexação de arquivos desativada com sucesso!" -ForegroundColor Green
            Write-Host "As pesquisas de arquivos podem demorar mais." -ForegroundColor Yellow
        }
        "2" {
            Write-Host "Ativando indexação de arquivos..." -ForegroundColor Yellow
            
            # Configurar o serviço para automático
            Set-Service -Name "WSearch" -StartupType AutomaticDelayedStart -ErrorAction SilentlyContinue
            Start-Service -Name "WSearch" -ErrorAction SilentlyContinue
            
            Write-Host "Indexação de arquivos ativada com sucesso!" -ForegroundColor Green
            Write-Host "As pesquisas de arquivos serão mais rápidas, mas o desempenho do sistema pode ser afetado." -ForegroundColor Yellow
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
        }
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
}

function Invoke-OptimizeStartup {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Desempenho: Otimizar Inicialização do Sistema ---" -ForegroundColor Cyan
    Write-Host "Gerencia os programas e serviços que são iniciados com o Windows para melhorar o tempo de inicialização." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função permite gerenciar os programas e serviços que são iniciados com o Windows." -ForegroundColor White
    Write-Host "Desativar programas e serviços desnecessários pode melhorar significativamente o tempo de inicialização." -ForegroundColor White
    Write-Host ""
    
    # Listar programas de inicialização
    Write-Host "Listando programas de inicialização..." -ForegroundColor Yellow
    
    $startupPrograms = Get-CimInstance -ClassName Win32_StartupCommand
    
    if ($startupPrograms) {
        Write-Host "Programas de inicialização:" -ForegroundColor White
        
        $index = 1
        foreach ($program in $startupPrograms) {
            Write-Host "[$index] $($program.Name) - $($program.Command)" -ForegroundColor White
            $index++
        }
    } else {
        Write-Host "Nenhum programa de inicialização encontrado." -ForegroundColor DarkGray
    }
    
    Write-Host ""
    Write-Host "Opções de gerenciamento:" -ForegroundColor Yellow
    Write-Host "[1] Desabilitar programa de inicialização" -ForegroundColor White
    Write-Host "[2] Gerenciar serviços de inicialização" -ForegroundColor White
    Write-Host "[0] Voltar" -ForegroundColor White
    Write-Host ""
    
    $startupChoice = Read-Host "Selecione uma opção"
    
    switch ($startupChoice) {
        "1" {
            Write-Host "Desabilitando programa de inicialização..." -ForegroundColor Yellow
            
            # Selecionar programa para desabilitar
            $programChoice = Read-Host "Digite o número do programa que deseja desabilitar (ou 0 para voltar)"
            
            if ($programChoice -eq "0" -or $programChoice -eq "") {
                Write-Host "Operação cancelada." -ForegroundColor Yellow
                break
            }
            
            $programIndex = [int]$programChoice - 1
            if ($programIndex -lt 0 -or $programIndex -ge $startupPrograms.Count) {
                Write-Host "Seleção inválida." -ForegroundColor Red
                break
            }
            
            $selectedProgram = $startupPrograms[$programIndex]
            
            # Desabilitar programa de inicialização
            Write-Host "Desabilitando $($selectedProgram.Name)..." -ForegroundColor DarkGray
            
            # Remover entrada do registro
            $regPath = $selectedProgram.Location
            $regName = $selectedProgram.Name
            
            try {
                Remove-ItemProperty -Path $regPath -Name $regName -Force -ErrorAction SilentlyContinue
                Write-Host "$($selectedProgram.Name) desabilitado com sucesso!" -ForegroundColor Green
            } catch {
                Write-Host "Não foi possível desabilitar $($selectedProgram.Name)." -ForegroundColor Red
            }
        }
        "2" {
            Write-Host "Gerenciando serviços de inicialização..." -ForegroundColor Yellow
            
            # Listar serviços de inicialização
            Write-Host "Listando serviços de inicialização..." -ForegroundColor DarkGray
            
            $startupServices = Get-Service | Where-Object {$_.StartType -ne "Disabled"}
            
            if ($startupServices) {
                Write-Host "Serviços de inicialização:" -ForegroundColor White
                
                $index = 1
                foreach ($service in $startupServices) {
                    Write-Host "[$index] $($service.DisplayName) - $($service.Status)" -ForegroundColor White
                    $index++
                }
            } else {
                Write-Host "Nenhum serviço de inicialização encontrado." -ForegroundColor DarkGray
            }
            
            Write-Host ""
            Write-Host "Opções de gerenciamento:" -ForegroundColor Yellow
            Write-Host "[1] Desabilitar serviço" -ForegroundColor White
            Write-Host "[2] Configurar serviço para 'Atraso na Inicialização'" -ForegroundColor White
            Write-Host "[0] Voltar" -ForegroundColor White
            Write-Host ""
            
            $serviceChoice = Read-Host "Selecione uma opção"
            
            switch ($serviceChoice) {
                "1" {
                    Write-Host "Desabilitando serviço..." -ForegroundColor Yellow
                    
                    # Selecionar serviço para desabilitar
                    $serviceChoice = Read-Host "Digite o número do serviço que deseja desabilitar (ou 0 para voltar)"
                    
                    if ($serviceChoice -eq "0" -or $serviceChoice -eq "") {
                        Write-Host "Operação cancelada." -ForegroundColor Yellow
                        break
                    }
                    
                    $serviceIndex = [int]$serviceChoice - 1
                    if ($serviceIndex -lt 0 -or $serviceIndex -ge $startupServices.Count) {
                        Write-Host "Seleção inválida." -ForegroundColor Red
                        break
                    }
                    
                    $selectedService = $startupServices[$serviceIndex]
                    
                    # Desabilitar serviço
                    Write-Host "Desabilitando $($selectedService.DisplayName)..." -ForegroundColor DarkGray
                    
                    Set-Service -Name $selectedService.Name -StartupType Disabled -ErrorAction SilentlyContinue
                    Stop-Service -Name $selectedService.Name -Force -ErrorAction SilentlyContinue
                    
                    Write-Host "$($selectedService.DisplayName) desabilitado com sucesso!" -ForegroundColor Green
                }
                "2" {
                    Write-Host "Configurando serviço para 'Atraso na Inicialização'..." -ForegroundColor Yellow
                    
                    # Selecionar serviço para configurar
                    $serviceChoice = Read-Host "Digite o número do serviço que deseja configurar (ou 0 para voltar)"
                    
                    if ($serviceChoice -eq "0" -or $serviceChoice -eq "") {
                        Write-Host "Operação cancelada." -ForegroundColor Yellow
                        break
                    }
                    
                    $serviceIndex = [int]$serviceChoice - 1
                    if ($serviceIndex -lt 0 -or $serviceIndex -ge $startupServices.Count) {
                        Write-Host "Seleção inválida." -ForegroundColor Red
                        break
                    }
                    
                    $selectedService = $startupServices[$serviceIndex]
                    
                    # Configurar serviço para 'Atraso na Inicialização'
                    Write-Host "Configurando $($selectedService.DisplayName) para 'Atraso na Inicialização'..." -ForegroundColor DarkGray
                    
                    # Configurar serviço para automático (Atraso na Inicialização)
                    Set-Service -Name $selectedService.Name -StartupType AutomaticDelayedStart -ErrorAction SilentlyContinue
                    
                    Write-Host "$($selectedService.DisplayName) configurado para 'Atraso na Inicialização' com sucesso!" -ForegroundColor Green
                }
                "0" {
                    Write-Host "Operação cancelada." -ForegroundColor Yellow
                }
                default {
                    Write-Host "Opção inválida." -ForegroundColor Red
                }
            }
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
        }
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Desempenho..."
}

# --- Funções para os Sub-Subgrupos AVANCADOS - REDE (Expandidas) ---
function Invoke-NetworkFlushDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Limpar Cache de DNS ---" -ForegroundColor Yellow
    Write-Host "Limpa o cache de resolução de nomes de domínio local (`ipconfig /flushdns`)." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Executando: Limpando cache de DNS..." -ForegroundColor Yellow
    
    # Mostrar estatísticas do cache DNS antes da limpeza (se disponível)
    try {
        Write-Host "Estatísticas do cache DNS antes da limpeza:" -ForegroundColor White
        Get-DnsClientCache | Measure-Object | ForEach-Object { Write-Host "Entradas no cache: $($_.Count)" -ForegroundColor White }
    } catch {
        Write-Host "Não foi possível obter estatísticas do cache DNS." -ForegroundColor DarkGray
    }
    
    # Limpar o cache DNS
    ipconfig /flushdns
    Write-Host "Cache de DNS limpo com sucesso!" -ForegroundColor Green
    
    # Verificar se o cache está vazio após a limpeza
    try {
        $dnsEntriesAfter = (Get-DnsClientCache | Measure-Object).Count
        Write-Host "Entradas no cache após limpeza: $dnsEntriesAfter" -ForegroundColor White
    } catch {
        Write-Host "Não foi possível verificar o cache DNS após a limpeza." -ForegroundColor DarkGray
    }
    
    Write-Host "`nBenefícios da limpeza do cache DNS:" -ForegroundColor Cyan
    Write-Host "- Resolução mais rápida de novos endereços de sites" -ForegroundColor DarkGray
    Write-Host "- Correção de problemas de acesso a sites que mudaram de endereço IP" -ForegroundColor DarkGray
    Write-Host "- Melhoria na navegação web em geral" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkChangeDns {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Mudar Servidor DNS ---" -ForegroundColor Cyan
    Write-Host "Permite definir servidores DNS personalizados para suas conexões de rede." -ForegroundColor DarkGray
    Write-Host ""

    # Listar adaptadores de rede ativos
    Write-Host "Listando adaptadores de rede ativos..." -ForegroundColor Yellow
    $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
    
    if ($networkAdapters.Count -eq 0) {
        Write-Host "Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host "Adaptadores de rede ativos:" -ForegroundColor White
    $index = 1
    foreach ($adapter in $networkAdapters) {
        Write-Host "[$index] $($adapter.Name) - $($adapter.InterfaceDescription)" -ForegroundColor White
        $index++
    }
    Write-Host ""
    
    # Selecionar adaptador de rede
    $adapterChoice = Read-Host "Selecione o número do adaptador que deseja configurar (ou 0 para voltar)"
    
    if ($adapterChoice -eq "0" -or $adapterChoice -eq "") {
        Write-Host "Operação cancelada." -ForegroundColor Yellow
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $adapterIndex = [int]$adapterChoice - 1
    if ($adapterIndex -lt 0 -or $adapterIndex -ge $networkAdapters.Count) {
        Write-Host "Seleção inválida." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    $selectedAdapter = $networkAdapters[$adapterIndex]
    
    # Mostrar configuração DNS atual
    Write-Host "Configuração DNS atual para $($selectedAdapter.Name):" -ForegroundColor Yellow
    $currentDns = Get-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -AddressFamily IPv4 | Select-Object -ExpandProperty ServerAddresses
    
    if ($currentDns.Count -eq 0) {
        Write-Host "Nenhum servidor DNS configurado manualmente (usando DHCP)." -ForegroundColor DarkGray
    } else {
        foreach ($dns in $currentDns) {
            Write-Host $dns -ForegroundColor White
        }
    }
    Write-Host ""
    
    # Opções de DNS
    Write-Host "Opções de DNS:" -ForegroundColor Yellow
    Write-Host "[1] Google DNS (8.8.8.8, 8.8.4.4)" -ForegroundColor White
    Write-Host "[2] Cloudflare DNS (1.1.1.1, 1.0.0.1)" -ForegroundColor White
    Write-Host "[3] OpenDNS (208.67.222.222, 208.67.220.220)" -ForegroundColor White
    Write-Host "[4] Quad9 (9.9.9.9, 149.112.112.112)" -ForegroundColor White
    Write-Host "[5] AdGuard DNS (94.140.14.14, 94.140.15.15)" -ForegroundColor White
    Write-Host "[6] Inserir DNS personalizado" -ForegroundColor White
    Write-Host "[7] Usar DNS automático (DHCP)" -ForegroundColor White
    Write-Host "[0] Cancelar" -ForegroundColor White
    Write-Host ""
    
    $dnsChoice = Read-Host "Selecione uma opção"
    
    switch ($dnsChoice) {
        "1" {
            $primaryDns = "8.8.8.8"
            $secondaryDns = "8.8.4.4"
            $dnsName = "Google DNS"
        }
        "2" {
            $primaryDns = "1.1.1.1"
            $secondaryDns = "1.0.0.1"
            $dnsName = "Cloudflare DNS"
        }
        "3" {
            $primaryDns = "208.67.222.222"
            $secondaryDns = "208.67.220.220"
            $dnsName = "OpenDNS"
        }
        "4" {
            $primaryDns = "9.9.9.9"
            $secondaryDns = "149.112.112.112"
            $dnsName = "Quad9"
        }
        "5" {
            $primaryDns = "94.140.14.14"
            $secondaryDns = "94.140.15.15"
            $dnsName = "AdGuard DNS"
        }
        "6" {
            $primaryDns = Read-Host "Digite o endereço do DNS primário"
            $secondaryDns = Read-Host "Digite o endereço do DNS secundário (ou deixe em branco)"
            $dnsName = "DNS Personalizado"
        }
        "7" {
            Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ResetServerAddresses
            Write-Host "Configuração de DNS definida para automática (DHCP)." -ForegroundColor Green
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        "0" {
            Write-Host "Operação cancelada." -ForegroundColor Yellow
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
        default {
            Write-Host "Opção inválida." -ForegroundColor Red
            Write-Host ""
            Read-Host "Pressione Enter para voltar ao menu de Rede..."
            return
        }
    }
    
    # Aplicar configuração de DNS
    if ($secondaryDns -eq "") {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns
    } else {
        Set-DnsClientServerAddress -InterfaceIndex $selectedAdapter.ifIndex -ServerAddresses $primaryDns, $secondaryDns
    }
    
    Write-Host "Configuração de DNS alterada para $dnsName." -ForegroundColor Green
    Write-Host "DNS Primário: $primaryDns" -ForegroundColor White
    if ($secondaryDns -ne "") {
        Write-Host "DNS Secundário: $secondaryDns" -ForegroundColor White
    }
    
    # Limpar cache DNS após a mudança
    Write-Host "Limpando cache DNS para aplicar as alterações..." -ForegroundColor Yellow
    ipconfig /flushdns
    Write-Host "Cache DNS limpo." -ForegroundColor Green
    
    Write-Host "`nBenefícios de usar servidores DNS alternativos:" -ForegroundColor Cyan
    Write-Host "- Maior velocidade de resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Melhor confiabilidade e disponibilidade" -ForegroundColor DarkGray
    Write-Host "- Alguns servidores oferecem proteção adicional contra malware e phishing" -ForegroundColor DarkGray
    Write-Host "- Possibilidade de contornar bloqueios de conteúdo baseados em DNS" -ForegroundColor DarkGray

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-NetworkReset {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Resetar Configurações de Rede ---" -ForegroundColor White
    Write-Host "Reinicia os componentes de rede. Use como último recurso para solucionar problemas de conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "!!! ATENÇÃO: ESTE COMANDO VAI REINICIAR SUAS CONFIGURAÇÕES DE REDE !!!" -ForegroundColor Red
    Write-Host "Sua conexão será interrompida temporariamente e todas as configurações de rede personalizadas serão redefinidas." -ForegroundColor Yellow
    Write-Host "Isso inclui adaptadores de rede, configurações de DNS, configurações de proxy, etc." -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "Esta operação pode ajudar a resolver os seguintes problemas:" -ForegroundColor Cyan
    Write-Host "- Conexões de rede instáveis ou intermitentes" -ForegroundColor DarkGray
    Write-Host "- Problemas de DNS ou resolução de nomes" -ForegroundColor DarkGray
    Write-Host "- Problemas de conectividade após instalação de software ou atualizações" -ForegroundColor DarkGray
    Write-Host "- Erros de rede persistentes que não são resolvidos por outros métodos" -ForegroundColor DarkGray
    Write-Host ""
    
    $confirm = Read-Host "Tem certeza que deseja resetar as configurações de rede? (digite 'sim' para confirmar)"
    
    if ($confirm -eq 'sim') {
        Write-Host "Iniciando reset de configurações de rede..." -ForegroundColor Yellow
        
        # Etapa 1: Resetar pilha TCP/IP
        Write-Host "Etapa 1: Resetando pilha TCP/IP..." -ForegroundColor DarkGray
        netsh int ip reset
        
        # Etapa 2: Resetar catálogo Winsock
        Write-Host "Etapa 2: Resetando catálogo Winsock..." -ForegroundColor DarkGray
        netsh winsock reset
        
        # Etapa 3: Limpar cache DNS
        Write-Host "Etapa 3: Limpando cache DNS..." -ForegroundColor DarkGray
        ipconfig /flushdns
        
        # Etapa 4: Renovar configurações DHCP
        Write-Host "Etapa 4: Renovando configurações DHCP..." -ForegroundColor DarkGray
        ipconfig /release
        ipconfig /renew
        
        # Etapa 5: Reiniciar adaptadores de rede
        Write-Host "Etapa 5: Reiniciando adaptadores de rede..." -ForegroundColor DarkGray
        Get-NetAdapter | Restart-NetAdapter -ErrorAction SilentlyContinue
        
        Write-Host "Reset de configurações de rede concluído!" -ForegroundColor Green
        Write-Host "Recomenda-se reiniciar o computador para aplicar todas as alterações." -ForegroundColor Yellow
        
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        } else {
            Write-Host "Reinício cancelado. Algumas alterações podem não ter efeito até que o computador seja reiniciado." -ForegroundColor Yellow
        }
    } else {
        Write-Host "Reset de configurações de rede cancelado." -ForegroundColor Green
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-OptimizeTcpIp {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Otimizar Configurações TCP/IP ---" -ForegroundColor Green
    Write-Host "Ajusta configurações avançadas do TCP/IP para melhorar o desempenho da conexão." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função otimiza vários parâmetros TCP/IP para melhorar a velocidade e estabilidade da conexão." -ForegroundColor White
    Write-Host "As otimizações são seguras e podem ser revertidas se necessário." -ForegroundColor White
    Write-Host ""
    
    Write-Host "Configurações atuais:" -ForegroundColor Yellow
    
    # Mostrar configurações atuais
    Write-Host "Auto-Tuning Level:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Auto-Tuning Level"
    
    Write-Host "Congestion Provider:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Congestion Control Provider"
    
    Write-Host "ECN Capability:" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "ECN Capability"
    
    Write-Host "Receive-Side Scaling (RSS):" -ForegroundColor DarkGray
    netsh int tcp show global | Select-String "Receive-Side Scaling State"
    
    Write-Host ""
    $confirm = Read-Host "Deseja aplicar otimizações TCP/IP recomendadas? (s/n)"
    
    if ($confirm -eq 's') {
        Write-Host "Aplicando otimizações TCP/IP..." -ForegroundColor Yellow
        
        # Otimização 1: Habilitar TCP Window Auto-Tuning
        Write-Host "Configurando TCP Auto-Tuning para 'normal'..." -ForegroundColor DarkGray
        netsh int tcp set global autotuninglevel=normal
        
        # Otimização 2: Habilitar Receive-Side Scaling (RSS)
        Write-Host "Habilitando Receive-Side Scaling (RSS)..." -ForegroundColor DarkGray
        netsh int tcp set global rss=enabled
        
        # Otimização 3: Configurar Congestion Provider para CTCP
        Write-Host "Configurando Congestion Provider para 'ctcp'..." -ForegroundColor DarkGray
        netsh int tcp set global congestionprovider=ctcp
        
        # Otimização 4: Habilitar ECN Capability
        Write-Host "Habilitando ECN Capability..." -ForegroundColor DarkGray
        netsh int tcp set global ecncapability=enabled
        
        # Otimização 5: Configurar NetDMA (se disponível)
        Write-Host "Tentando configurar NetDMA..." -ForegroundColor DarkGray
        netsh int tcp set global netdma=enabled
        
        # Otimização 6: Configurar tamanho de buffer TCP
        Write-Host "Configurando tamanho de buffer TCP..." -ForegroundColor DarkGray
        netsh int tcp set global chimney=enabled
        
        # Otimização 7: Configurar QoS
        Write-Host "Configurando QoS..." -ForegroundColor DarkGray
        netsh int tcp set global timestamps=disabled
        
        Write-Host "Otimizações TCP/IP aplicadas com sucesso!" -ForegroundColor Green
        
        Write-Host "`nNovas configurações:" -ForegroundColor Yellow
        
        # Mostrar novas configurações
        Write-Host "Auto-Tuning Level:" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "Auto-Tuning Level"
        
        Write-Host "Congestion Provider:" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "Congestion Control Provider"
        
        Write-Host "ECN Capability:" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "ECN Capability"
        
        Write-Host "Receive-Side Scaling (RSS):" -ForegroundColor DarkGray
        netsh int tcp show global | Select-String "Receive-Side Scaling State"
        
        Write-Host "`nBenefícios das otimizações TCP/IP:" -ForegroundColor Cyan
        Write-Host "- Melhor aproveitamento da largura de banda disponível" -ForegroundColor DarkGray
        Write-Host "- Redução da latência em conexões de internet" -ForegroundColor DarkGray
        Write-Host "- Melhor desempenho em downloads e uploads" -ForegroundColor DarkGray
        Write-Host "- Conexões mais estáveis em redes congestionadas" -ForegroundColor DarkGray
        
        Write-Host "`nNota: Algumas alterações podem requerer reinicialização para ter efeito completo." -ForegroundColor Yellow
        $confirmRestart = Read-Host "Deseja reiniciar o computador agora? (s/n)"
        
        if ($confirmRestart -eq 's') {
            Write-Host "Reiniciando o computador... Salve seu trabalho!" -ForegroundColor Red
            Restart-Computer -Force
        }
    } else {
        Write-Host "Otimizações TCP/IP canceladas." -ForegroundColor Yellow
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-CheckNetworkSpeed {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Verificar Velocidade da Conexão ---" -ForegroundColor Magenta
    Write-Host "Realiza testes para verificar a velocidade e qualidade da sua conexão com a internet." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "Esta função realiza testes básicos para avaliar a velocidade e qualidade da sua conexão." -ForegroundColor White
    Write-Host "Nota: Para testes de velocidade mais precisos, recomendamos usar sites especializados como speedtest.net" -ForegroundColor White
    Write-Host ""
    
    # Teste 1: Verificar conectividade básica
    Write-Host "Teste 1: Verificando conectividade básica com a internet..." -ForegroundColor Yellow
    $pingGoogle = Test-Connection -ComputerName google.com -Count 4 -ErrorAction SilentlyContinue
    
    if ($pingGoogle) {
        $avgLatency = ($pingGoogle | Measure-Object -Property ResponseTime -Average).Average
        $maxLatency = ($pingGoogle | Measure-Object -Property ResponseTime -Maximum).Maximum
        $minLatency = ($pingGoogle | Measure-Object -Property ResponseTime -Minimum).Minimum
        
        Write-Host "Conectividade: OK" -ForegroundColor Green
        Write-Host "Latência média: $avgLatency ms" -ForegroundColor $(if ($avgLatency -lt 50) { "Green" } elseif ($avgLatency -lt 100) { "Yellow" } else { "Red" })
        Write-Host "Latência mínima: $minLatency ms" -ForegroundColor Green
        Write-Host "Latência máxima: $maxLatency ms" -ForegroundColor $(if ($maxLatency -lt 100) { "Green" } elseif ($maxLatency -lt 200) { "Yellow" } else { "Red" })
        
        # Avaliação da qualidade da conexão
        if ($avgLatency -lt 30) {
            $qualidade = "Excelente"
            $cor = "Green"
        } elseif ($avgLatency -lt 60) {
            $qualidade = "Boa"
            $cor = "Green"
        } elseif ($avgLatency -lt 100) {
            $qualidade = "Razoável"
            $cor = "Yellow"
        } else {
            $qualidade = "Ruim"
            $cor = "Red"
        }
        
        Write-Host "Qualidade da conexão: $qualidade" -ForegroundColor $cor
    } else {
        Write-Host "Não foi possível conectar à internet. Verifique sua conexão." -ForegroundColor Red
        Write-Host ""
        Read-Host "Pressione Enter para voltar ao menu de Rede..."
        return
    }
    
    Write-Host ""
    
    # Teste 2: Verificar resolução DNS
    Write-Host "Teste 2: Verificando velocidade de resolução DNS..." -ForegroundColor Yellow
    $domains = @("google.com", "microsoft.com", "amazon.com", "facebook.com", "youtube.com")
    $dnsResults = @()
    
    foreach ($domain in $domains) {
        $startTime = Get-Date
        try {
            $null = Resolve-DnsName -Name $domain -ErrorAction SilentlyContinue
            $endTime = Get-Date
            $timeSpan = New-TimeSpan -Start $startTime -End $endTime
            $dnsResults += [PSCustomObject]@{
                Domain = $domain
                Time = $timeSpan.TotalMilliseconds
                Status = "OK"
            }
        } catch {
            $dnsResults += [PSCustomObject]@{
                Domain = $domain
                Time = 0
                Status = "Falha"
            }
        }
    }
    
    $dnsResults | Format-Table -AutoSize
    
    $avgDnsTime = ($dnsResults | Where-Object { $_.Status -eq "OK" } | Measure-Object -Property Time -Average).Average
    Write-Host "Tempo médio de resolução DNS: $([math]::Round($avgDnsTime, 2)) ms" -ForegroundColor $(if ($avgDnsTime -lt 50) { "Green" } elseif ($avgDnsTime -lt 100) { "Yellow" } else { "Red" })
    
    Write-Host ""
    
    # Teste 3: Verificar MTU
    Write-Host "Teste 3: Verificando MTU (Maximum Transmission Unit)..." -ForegroundColor Yellow
    
    $activeAdapter = Get-NetAdapter | Where-Object { $_.Status -eq "Up" } | Select-Object -First 1
    if ($activeAdapter) {
        $mtu = Get-NetIPInterface -InterfaceIndex $activeAdapter.ifIndex -AddressFamily IPv4 | Select-Object -ExpandProperty NlMtu
        Write-Host "MTU atual: $mtu bytes" -ForegroundColor White
        
        if ($mtu -eq 1500) {
            Write-Host "MTU está no valor padrão (1500), que é ideal para a maioria das conexões." -ForegroundColor Green
        } elseif ($mtu -lt 1500) {
            Write-Host "MTU está abaixo do valor padrão. Isso pode afetar o desempenho em algumas situações." -ForegroundColor Yellow
        } else {
            Write-Host "MTU está acima do valor padrão. Isso pode causar fragmentação de pacotes em algumas redes." -ForegroundColor Yellow
        }
    } else {
        Write-Host "Não foi possível determinar o MTU. Nenhum adaptador de rede ativo encontrado." -ForegroundColor Red
    }
    
    Write-Host ""
    
    # Teste 4: Verificar perda de pacotes
    Write-Host "Teste 4: Verificando perda de pacotes..." -ForegroundColor Yellow
    $packetLossTest = Test-Connection -ComputerName google.com -Count 50 -ErrorAction SilentlyContinue
    
    if ($packetLossTest) {
        $packetsSent = 50
        $packetsReceived = ($packetLossTest | Measure-Object).Count
        $packetsLost = $packetsSent - $packetsReceived
        $packetLossPercentage = ($packetsLost / $packetsSent) * 100
        
        Write-Host "Pacotes enviados: $packetsSent" -ForegroundColor White
        Write-Host "Pacotes recebidos: $packetsReceived" -ForegroundColor White
        Write-Host "Pacotes perdidos: $packetsLost" -ForegroundColor $(if ($packetsLost -eq 0) { "Green" } elseif ($packetsLost -lt 5) { "Yellow" } else { "Red" })
        Write-Host "Percentual de perda: $([math]::Round($packetLossPercentage, 2))%" -ForegroundColor $(if ($packetLossPercentage -eq 0) { "Green" } elseif ($packetLossPercentage -lt 10) { "Yellow" } else { "Red" })
        
        # Avaliação da qualidade da conexão baseada na perda de pacotes
        if ($packetLossPercentage -eq 0) {
            Write-Host "Qualidade da conexão (perda de pacotes): Excelente" -ForegroundColor Green
        } elseif ($packetLossPercentage -lt 2) {
            Write-Host "Qualidade da conexão (perda de pacotes): Boa" -ForegroundColor Green
        } elseif ($packetLossPercentage -lt 5) {
            Write-Host "Qualidade da conexão (perda de pacotes): Razoável" -ForegroundColor Yellow
        } else {
            Write-Host "Qualidade da conexão (perda de pacotes): Ruim" -ForegroundColor Red
        }
    } else {
        Write-Host "Não foi possível realizar o teste de perda de pacotes." -ForegroundColor Red
    }
    
    Write-Host ""
    
    # Resumo e recomendações
    Write-Host "=== Resumo da Análise de Rede ===" -ForegroundColor Cyan
    
    # Recomendações baseadas nos resultados
    Write-Host "Recomendações:" -ForegroundColor Yellow
    
    if ($avgLatency -gt 100) {
        Write-Host "- Sua latência está alta. Considere verificar outros dispositivos na rede ou contatar seu provedor." -ForegroundColor Yellow
    }
    
    if ($avgDnsTime -gt 100) {
        Write-Host "- A resolução DNS está lenta. Considere mudar para servidores DNS mais rápidos como Google (8.8.8.8) ou Cloudflare (1.1.1.1)." -ForegroundColor Yellow
    }
    
    if ($packetLossPercentage -gt 2) {
        Write-Host "- Há perda significativa de pacotes. Verifique sua conexão física ou contate seu provedor." -ForegroundColor Yellow
    }
    
    if ($mtu -ne 1500 -and $mtu -ne 0) {
        Write-Host "- Seu MTU não está no valor padrão. Considere ajustá-lo para 1500 para melhor desempenho." -ForegroundColor Yellow
    }
    
    if ($avgLatency -le 100 -and $avgDnsTime -le 100 -and $packetLossPercentage -le 2) {
        Write-Host "- Sua conexão parece estar em boas condições! Não há problemas significativos detectados." -ForegroundColor Green
    }

    Write-Host ""
    Read-Host "Pressione Enter para voltar ao menu de Rede..."
}

function Invoke-ConfigureQoS {
    Clear-Host
    Banner-TORK
    Write-Host ""
    Write-Host "--- Rede: Configurar QoS (Qualidade de Serviço) ---" -ForegroundColor Gray
    Write-Host "Configura prioridades de tráfego de rede para melhorar o desempenho de aplicações específicas." -ForegroundColor DarkGray
    Write-Host ""

    Write-Host "O QoS (Quality of Service) permite priorizar certos tipos de tráfego de rede sobre outros." -ForegroundColor White
    Write-Host "Isso é útil para garantir que aplicações importantes como jogos, chamadas de vídeo ou streaming" -ForegroundColor White
    Write-Host "tenham prioridade sobre downloads ou atualizações em segundo plano." -ForegroundColor White
    Write-Host ""
    
    Write-Host "Opções de configuração de QoS:" -ForegroundColor Yellow
    Write-Host "[1] Configurar QoS para Jogos (prioriza tráfego de jogos)" -ForegroundColor White
    Write-Host "[2] Configurar QoS para Videoconferência (prioriza Zoom, Teams, etc.)" -ForegroundColor White
    Write-Host "[3] Configurar QoS para Streaming (prioriza Netflix, YouTube, etc.)" -ForegroundColor White
    Write-Host "[4] Configurar QoS Personalizado" -ForegroundColor White
    Write-Host "[5] Desativar QoS" -ForegroundColor White
    Write-Host "[0] Voltar" -ForegroundColor White
    Write-Host ""
    
    $qosChoice = Read-Host "Selecione uma opção"
    
    switch ($qosChoice) {
        "1" {
            Write-Host "Configurando QoS para Jogos..." -ForegroundColor Yellow
            
            # Criar política de QoS para jogos
            Write-Host "Criando política de QoS para jogos..." -ForegroundColor DarkGray
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS para jogos usando netsh
            netsh advfirewall firewall add rule name="QoS-Games" dir=out action=allow protocol=UDP remoteport=3074,3478,3479,3480 enable=yes
            
            # Configurar prioridade para jogos
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política para jogos
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Application Name" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Protocol" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Remote Port" -Value "3074,3478-3480" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "DSCP Value" -Value "46" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Games" -Name "Throttle Rate" -Value "-1" -Type String
            
            Write-Host "QoS para Jogos configurado com sucesso!" -ForegroundColor Green
            Write-Host "Os jogos online agora terão prioridade sobre outros tipos de tráfego." -ForegroundColor Green
        }
        "2" {
            Write-Host "Configurando QoS para Videoconferência..." -ForegroundColor Yellow
            
            # Criar política de QoS para videoconferência
            Write-Host "Criando política de QoS para videoconferência..." -ForegroundColor DarkGray
            
            # Verificar se o serviço QoS está em execução
            $qosService = Get-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            if ($qosService -and $qosService.Status -ne "Running") {
                Write-Host "Iniciando serviço QoS RSVP..." -ForegroundColor DarkGray
                Start-Service -Name "QoS RSVP" -ErrorAction SilentlyContinue
            }
            
            # Configurar QoS para videoconferência usando netsh
            netsh advfirewall firewall add rule name="QoS-VideoConference" dir=out action=allow protocol=UDP remoteport=3478-3479,8801-8810 enable=yes
            
            # Configurar prioridade para videoconferência
            if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS")) {
                New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS" -Force | Out-Null
            }
            
            # Adicionar política para Zoom
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Application Name" -Value "Zoom.exe" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Protocol" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Remote Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "DSCP Value" -Value "46" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Zoom" -Name "Throttle Rate" -Value "-1" -Type String
            
            # Adicionar política para Teams
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Force | Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Application Name" -Value "Teams.exe" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Version" -Value "1.0" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Protocol" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Local Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Local IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Remote Port" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\QoS\Teams" -Name "Remote IP" -Value "*" -Type String
            Set-ItemProperty -Path "HKLM:\SOFTWARE\
